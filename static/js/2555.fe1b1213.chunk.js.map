{"version":3,"file":"static/js/2555.fe1b1213.chunk.js","mappings":";6hCAKMA,EAAMC,OAAO,GACbC,EAAMD,OAAO,GACbE,EAAMF,OAAO,GAWb,SAAUG,EAAQC,GACtB,OACEA,aAAaC,YACP,MAALD,GAA0B,kBAANA,GAAyC,eAAvBA,EAAEE,YAAYC,IAEzD,CAEM,SAAUC,EAAOC,GACrB,IAAKN,EAAQM,GAAO,MAAM,IAAIC,MAAM,sBACtC,CAGA,IAAMC,EAAwBC,MAAMC,KAAK,CAAEC,OAAQ,MAAO,SAACC,EAAGC,GAAC,OAC7DA,EAAEC,SAAS,IAAIC,SAAS,EAAG,IAAI,IAK3B,SAAUC,EAAWC,GACzBZ,EAAOY,GAGP,IADA,IAAIC,EAAM,GACDL,EAAI,EAAGA,EAAII,EAAMN,OAAQE,IAChCK,GAAOV,EAAMS,EAAMJ,IAErB,OAAOK,CACT,CAEM,SAAUC,EAAoBC,GAClC,IAAMF,EAAME,EAAIN,SAAS,IACzB,OAAoB,EAAbI,EAAIP,OAAa,IAAH,OAAOO,GAAQA,CACtC,CAEM,SAAUG,EAAYH,GAC1B,GAAmB,kBAARA,EAAkB,MAAM,IAAIX,MAAM,mCAAqCW,GAElF,OAAOrB,OAAe,KAARqB,EAAa,IAAM,KAAH,OAAQA,GACxC,CAGA,IAAMI,EAAe,GAAfA,EAAuB,GAAvBA,EAA+B,GAA/BA,EAAuC,GAAvCA,EAA+C,GAA/CA,EAAuD,IAC7D,SAASC,EAAcC,GACrB,OAAIA,GAAQF,GAAaE,GAAQF,EAAkBE,EAAOF,EACtDE,GAAQF,GAAaE,GAAQF,EAAkBE,GAAQF,EAAY,IACnEE,GAAQF,GAAaE,GAAQF,EAAkBE,GAAQF,EAAY,SAAvE,CAEF,CAKM,SAAUG,EAAWP,GACzB,GAAmB,kBAARA,EAAkB,MAAM,IAAIX,MAAM,mCAAqCW,GAClF,IAAMQ,EAAKR,EAAIP,OACTgB,EAAKD,EAAK,EAChB,GAAIA,EAAK,EAAG,MAAM,IAAInB,MAAM,0DAA4DmB,GAExF,IADA,IAAME,EAAQ,IAAI1B,WAAWyB,GACpBE,EAAK,EAAGC,EAAK,EAAGD,EAAKF,EAAIE,IAAMC,GAAM,EAAG,CAC/C,IAAMC,EAAKR,EAAcL,EAAIc,WAAWF,IAClCG,EAAKV,EAAcL,EAAIc,WAAWF,EAAK,IAC7C,QAAWI,IAAPH,QAA2BG,IAAPD,EAAkB,CACxC,IAAMT,EAAON,EAAIY,GAAMZ,EAAIY,EAAK,GAChC,MAAM,IAAIvB,MAAM,+CAAiDiB,EAAO,cAAgBM,EAC1F,CACAF,EAAMC,GAAW,GAALE,EAAUE,CACxB,CACA,OAAOL,CACT,CAGM,SAAUO,EAAgBlB,GAC9B,OAAOI,EAAYL,EAAWC,GAChC,CACM,SAAUmB,EAAgBnB,GAE9B,OADAZ,EAAOY,GACAI,EAAYL,EAAWd,WAAWQ,KAAKO,GAAOoB,WACvD,CAEM,SAAUC,EAAgBC,EAAoBC,GAClD,OAAOf,EAAWc,EAAEzB,SAAS,IAAIC,SAAe,EAANyB,EAAS,KACrD,CACM,SAAUC,EAAgBF,EAAoBC,GAClD,OAAOF,EAAgBC,EAAGC,GAAKH,SACjC,CAEM,SAAUK,EAAmBH,GACjC,OAAOd,EAAWN,EAAoBoB,GACxC,CAWM,SAAUI,EAAYC,EAAe1B,EAAU2B,GACnD,IAAIC,EACJ,GAAmB,kBAAR5B,EACT,IACE4B,EAAMrB,EAAWP,EAGnB,CAFE,MAAO6B,GACP,MAAM,IAAIxC,MAAM,GAAD,OAAIqC,EAAK,2CAAmC1B,EAAG,qBAAa6B,GAC7E,KACK,KAAI/C,EAAQkB,GAKjB,MAAM,IAAIX,MAAM,GAAD,OAAIqC,EAAK,sCAFxBE,EAAM5C,WAAWQ,KAAKQ,EAGxB,CACA,IAAMsB,EAAMM,EAAInC,OAChB,GAA8B,kBAAnBkC,GAA+BL,IAAQK,EAChD,MAAM,IAAItC,MAAM,GAAD,OAAIqC,EAAK,qBAAaC,EAAc,uBAAeL,IACpE,OAAOM,CACT,CAKM,SAAUE,IAEd,IADA,IAAIC,EAAM,EACDpC,EAAI,EAAGA,EAAI,UAAOF,OAAQE,IAAK,CACtC,IAAMZ,EAAWY,EAAC,qBAADA,OAAC,YAADA,GACjBR,EAAOJ,GACPgD,GAAOhD,EAAEU,MACX,CAEA,IADA,IAAMmC,EAAM,IAAI5C,WAAW+C,GAClBpC,EAAI,EAAGqC,EAAM,EAAGrC,EAAI,UAAOF,OAAQE,IAAK,CAC/C,IAAMZ,EAAWY,EAAC,qBAADA,OAAC,YAADA,GACjBiC,EAAIK,IAAIlD,EAAGiD,GACXA,GAAOjD,EAAEU,MACX,CACA,OAAOmC,CACT,CAGM,SAAUM,EAAWnD,EAAeoD,GACxC,GAAIpD,EAAEU,SAAW0C,EAAE1C,OAAQ,OAAO,EAElC,IADA,IAAI2C,EAAO,EACFzC,EAAI,EAAGA,EAAIZ,EAAEU,OAAQE,IAAKyC,GAAQrD,EAAEY,GAAKwC,EAAExC,GACpD,OAAgB,IAATyC,CACT,CASM,SAAUC,EAAYC,GAC1B,GAAmB,kBAARA,EAAkB,MAAM,IAAIjD,MAAM,oCAAD,cAA4CiD,IACxF,OAAO,IAAItD,YAAW,IAAIuD,aAAcC,OAAOF,GACjD,CAQM,SAAUG,EAAOpB,GACrB,IAAIC,EACJ,IAAKA,EAAM,EAAGD,EAAI3C,EAAK2C,IAAMzC,EAAK0C,GAAO,GACzC,OAAOA,CACT,CAOM,SAAUoB,EAAOrB,EAAWsB,GAChC,OAAQtB,GAAK1C,OAAOgE,GAAQ/D,CAC9B,CAKM,SAAUgE,EAAOvB,EAAWsB,EAAaE,GAC7C,OAAOxB,GAAMwB,EAAQjE,EAAMF,IAAQC,OAAOgE,EAC5C,CAMO,IAAMG,EAAU,SAACzB,GAAS,OAAMxC,GAAOF,OAAO0C,EAAI,IAAMzC,CAAG,EAI5DmE,EAAM,SAACC,GAAU,OAAK,IAAIhE,WAAWgE,EAAK,EAC1CC,EAAO,SAACC,GAAQ,OAAKlE,WAAWQ,KAAK0D,EAAI,EASzC,SAAUC,EACdC,EACAC,EACAC,GAEA,GAAuB,kBAAZF,GAAwBA,EAAU,EAAG,MAAM,IAAI/D,MAAM,4BAChE,GAAwB,kBAAbgE,GAAyBA,EAAW,EAAG,MAAM,IAAIhE,MAAM,6BAClE,GAAsB,oBAAXiE,EAAuB,MAAM,IAAIjE,MAAM,6BAElD,IAAIkE,EAAIR,EAAIK,GACRI,EAAIT,EAAIK,GACRzD,EAAI,EACF8D,EAAQ,WACZF,EAAEG,KAAK,GACPF,EAAEE,KAAK,GACP/D,EAAI,CACN,EACMgE,EAAI,WAAH,2BAAOxB,EAAe,yBAAfA,EAAe,uBAAKmB,EAAM,cAACE,EAAGD,GAAC,OAAKpB,GAAE,EAC9CyB,EAAS,WAAiB,IAAhBC,EAAO,UAAH,6CAAGd,IAErBS,EAAIG,EAAEV,EAAK,CAAC,IAAQY,GACpBN,EAAII,IACgB,IAAhBE,EAAKpE,SACT+D,EAAIG,EAAEV,EAAK,CAAC,IAAQY,GACpBN,EAAII,IACN,EACMG,EAAM,WAEV,GAAInE,KAAO,IAAM,MAAM,IAAIN,MAAM,2BAGjC,IAFA,IAAIiC,EAAM,EACJyC,EAAoB,GACnBzC,EAAM+B,GAAU,CAErB,IAAMW,GADNT,EAAII,KACSM,QACbF,EAAIG,KAAKF,GACT1C,GAAOiC,EAAE9D,MACX,CACA,OAAOqC,EAAW,aAAIiC,EACxB,EASA,OARiB,SAACF,EAAkBM,GAClCV,IACAG,EAAOC,GAEP,IADA,IAAIjC,OAAqBZ,IAChBY,EAAMuC,EAAKL,OAASF,IAE7B,OADAH,IACO7B,CACT,CAEF,CAIA,IAAMwC,EAAe,CACnBC,OAAQ,SAACC,GAAQ,MAAoB,kBAARA,CAAgB,EAC7CC,SAAU,SAACD,GAAQ,MAAoB,oBAARA,CAAkB,EACjDE,QAAS,SAACF,GAAQ,MAAoB,mBAARA,CAAiB,EAC/CG,OAAQ,SAACH,GAAQ,MAAoB,kBAARA,CAAgB,EAC7CI,mBAAoB,SAACJ,GAAQ,MAAoB,kBAARA,GAAoBxF,EAAQwF,EAAI,EACzEK,cAAe,SAACL,GAAQ,OAAKM,OAAOD,cAAcL,EAAI,EACtD5D,MAAO,SAAC4D,GAAQ,OAAK/E,MAAMsF,QAAQP,EAAI,EACvCQ,MAAO,SAACR,EAAUS,GAAW,OAAMA,EAAeC,GAAGC,QAAQX,EAAI,EACjEY,KAAM,SAACZ,GAAQ,MAAoB,oBAARA,GAAsBM,OAAOD,cAAcL,EAAIa,UAAU,GAMhF,SAAUC,EACdL,EACAM,GAgBA,IAf6B,IAA7BC,EAAAA,UAAAA,OAAAA,QAAAA,IAAAA,UAAAA,GAAAA,UAAAA,GAA2B,CAAC,EAEtBC,EAAa,SAACC,EAAoBC,EAAiBC,GACvD,IAAMC,EAAWvB,EAAaqB,GAC9B,GAAwB,oBAAbE,EACT,MAAM,IAAItG,MAAM,sBAAD,OAAuBoG,EAAI,yBAE5C,IAAMnB,EAAMS,EAAOS,GACnB,KAAIE,QAAsB1E,IAARsD,KACbqB,EAASrB,EAAKS,GACjB,MAAM,IAAI1F,MAAM,iBAAD,OACIuG,OAAOJ,GAAU,YAAIlB,EAAG,oBAAYA,EAAG,uBAAemB,GAG7E,EACA,MAAgCI,OAAOC,QAAQT,GAAW,gBAArD,sBAAOG,EAAS,KAAEC,EAAI,KAAiCF,EAAWC,EAAWC,GAAO,EAAO,CAChG,IAAK,IAAL,MAAgCI,OAAOC,QAAQR,GAAc,gBAAxD,sBAAOE,EAAS,KAAEC,EAAI,KAAoCF,EAAWC,EAAWC,GAAO,EAAM,CAClG,OAAOV,CACT,CC1SA,IAAMrG,EAAMC,OAAO,GAAIC,EAAMD,OAAO,GAAIE,EAAMF,OAAO,GAAIoH,EAAMpH,OAAO,GAEhEqH,EAAMrH,OAAO,GAAIsH,EAAMtH,OAAO,GAAIuH,EAAMvH,OAAO,GAEzCA,OAAO,GAAWA,OAAO,IAG/B,SAAUwH,EAAIpH,EAAWoD,GAC7B,IAAMiE,EAASrH,EAAIoD,EACnB,OAAOiE,GAAU1H,EAAM0H,EAASjE,EAAIiE,CACtC,CAQM,SAAUC,EAAInG,EAAaoG,EAAeC,GAC9C,GAAIA,GAAU7H,GAAO4H,EAAQ5H,EAAK,MAAM,IAAIW,MAAM,6BAClD,GAAIkH,IAAW3H,EAAK,OAAOF,EAE3B,IADA,IAAIkD,EAAMhD,EACH0H,EAAQ5H,GACT4H,EAAQ1H,IAAKgD,EAAOA,EAAM1B,EAAOqG,GACrCrG,EAAOA,EAAMA,EAAOqG,EACpBD,IAAU1H,EAEZ,OAAOgD,CACT,CAGM,SAAU4E,EAAKC,EAAWH,EAAeC,GAE7C,IADA,IAAI3E,EAAM6E,EACHH,KAAU5H,GACfkD,GAAOA,EACPA,GAAO2E,EAET,OAAO3E,CACT,CAGM,SAAU8E,EAAOC,EAAgBJ,GACrC,GAAII,IAAWjI,GAAO6H,GAAU7H,EAC9B,MAAM,IAAIW,MAAM,6CAAD,OAA8CsH,EAAM,gBAAQJ,IAQ7E,IAJA,IAAIxH,EAAIoH,EAAIQ,EAAQJ,GAChBpE,EAAIoE,EAEJE,EAAI/H,EAAKkI,EAAIhI,EAAKiI,EAAIjI,EAAK2E,EAAI7E,EAC5BK,IAAML,GAAK,CAEhB,IAAMoI,EAAI3E,EAAIpD,EACRgI,EAAI5E,EAAIpD,EACRiI,EAAIP,EAAII,EAAIC,EACZzF,EAAIuF,EAAIrD,EAAIuD,EAElB3E,EAAIpD,EAAGA,EAAIgI,EAAGN,EAAII,EAAGD,EAAIrD,EAAGsD,EAAIG,EAAGzD,EAAIlC,CACzC,CAEA,GADYc,IACAvD,EAAK,MAAM,IAAIS,MAAM,0BACjC,OAAO8G,EAAIM,EAAGF,EAChB,CAkEM,SAAUU,EAAOC,GAMrB,GAAIA,EAAIlB,IAAQD,EAAK,CAKnB,IAAMoB,GAAUD,EAAItI,GAAOoH,EAC3B,OAAO,SAAsBhB,EAAe3D,GAC1C,IAAM+F,EAAOpC,EAAGqB,IAAIhF,EAAG8F,GAEvB,IAAKnC,EAAGqC,IAAIrC,EAAGsC,IAAIF,GAAO/F,GAAI,MAAM,IAAIhC,MAAM,2BAC9C,OAAO+H,CACT,CACF,CAGA,GAAIF,EAAIhB,IAAQD,EAAK,CACnB,IAAMsB,GAAML,EAAIjB,GAAOC,EACvB,OAAO,SAAsBlB,EAAe3D,GAC1C,IAAMN,EAAKiE,EAAGwC,IAAInG,EAAGxC,GACf0E,EAAIyB,EAAGqB,IAAItF,EAAIwG,GACfE,EAAKzC,EAAGwC,IAAInG,EAAGkC,GACf5D,EAAIqF,EAAGwC,IAAIxC,EAAGwC,IAAIC,EAAI5I,GAAM0E,GAC5B6D,EAAOpC,EAAGwC,IAAIC,EAAIzC,EAAG0C,IAAI/H,EAAGqF,EAAG2C,MACrC,IAAK3C,EAAGqC,IAAIrC,EAAGsC,IAAIF,GAAO/F,GAAI,MAAM,IAAIhC,MAAM,2BAC9C,OAAO+H,CACT,CACF,CA0BA,OAlHI,SAAwBF,GAM5B,IAEIU,EAAWC,EAAWC,EAFpBC,GAAab,EAAItI,GAAOC,EAK9B,IAAK+I,EAAIV,EAAItI,EAAKiJ,EAAI,EAAGD,EAAI/I,IAAQH,EAAKkJ,GAAK/I,EAAKgJ,KAGpD,IAAKC,EAAIjJ,EAAKiJ,EAAIZ,GAAKb,EAAIyB,EAAGC,EAAWb,KAAOA,EAAItI,EAAKkJ,KAGzD,GAAU,IAAND,EAAS,CACX,IAAMV,GAAUD,EAAItI,GAAOoH,EAC3B,OAAO,SAAwBhB,EAAe3D,GAC5C,IAAM+F,EAAOpC,EAAGqB,IAAIhF,EAAG8F,GACvB,IAAKnC,EAAGqC,IAAIrC,EAAGsC,IAAIF,GAAO/F,GAAI,MAAM,IAAIhC,MAAM,2BAC9C,OAAO+H,CACT,CACF,CAGA,IAAMY,GAAUJ,EAAIhJ,GAAOC,EAC3B,OAAO,SAAwBmG,EAAe3D,GAE5C,GAAI2D,EAAGqB,IAAIhF,EAAG0G,KAAe/C,EAAGiD,IAAIjD,EAAG2C,KAAM,MAAM,IAAItI,MAAM,2BAO7D,IANA,IAAI0H,EAAIc,EAEJK,EAAIlD,EAAGqB,IAAIrB,EAAGwC,IAAIxC,EAAG2C,IAAKG,GAAIF,GAC9BnB,EAAIzB,EAAGqB,IAAIhF,EAAG2G,GACd7F,EAAI6C,EAAGqB,IAAIhF,EAAGuG,IAEV5C,EAAGqC,IAAIlF,EAAG6C,EAAG2C,MAAM,CACzB,GAAI3C,EAAGqC,IAAIlF,EAAG6C,EAAGmD,MAAO,OAAOnD,EAAGmD,KAGlC,IADA,IAAInB,EAAI,EACCoB,EAAKpD,EAAGsC,IAAInF,GAAI6E,EAAID,IACvB/B,EAAGqC,IAAIe,EAAIpD,EAAG2C,KADYX,IAE9BoB,EAAKpD,EAAGsC,IAAIc,GAGd,IAAMC,EAAKrD,EAAGqB,IAAI6B,EAAGtJ,GAAOD,OAAOoI,EAAIC,EAAI,IAC3CkB,EAAIlD,EAAGsC,IAAIe,GACX5B,EAAIzB,EAAGwC,IAAIf,EAAG4B,GACdlG,EAAI6C,EAAGwC,IAAIrF,EAAG+F,GACdnB,EAAIC,CACN,CACA,OAAOP,CACT,CACF,CA4DS6B,CAAcpB,EACvB,CAGO,IA6CDqB,GAAe,CACnB,SAAU,UAAW,MAAO,MAAO,MAAO,OAAQ,MAClD,MAAO,MAAO,MAAO,MAAO,MAAO,MACnC,OAAQ,OAAQ,OAAQ,QAEpB,SAAUC,GAAiB1D,GAW/B,OAAOM,EAAeN,EAJTyD,GAAaE,QAAO,SAACC,EAAKpE,GAErC,OADAoE,EAAIpE,GAAO,WACJoE,CACT,GATgB,CACdC,MAAO,SACPC,KAAM,SACNC,MAAO,gBACPC,KAAM,kBAOV,CAQM,SAAUC,GAASC,EAAc9I,EAAQoG,GAG7C,GAAIA,EAAQ5H,EAAK,MAAM,IAAIW,MAAM,sBACjC,GAAIiH,IAAU5H,EAAK,OAAOsK,EAAErB,IAC5B,GAAIrB,IAAU1H,EAAK,OAAOsB,EAG1B,IAFA,IAAI+I,EAAID,EAAErB,IACNuB,EAAIhJ,EACDoG,EAAQ5H,GACT4H,EAAQ1H,IAAKqK,EAAID,EAAExB,IAAIyB,EAAGC,IAC9BA,EAAIF,EAAE1B,IAAI4B,GACV5C,IAAU1H,EAEZ,OAAOqK,CACT,CAMM,SAAUE,GAAiBH,EAAcI,GAC7C,IAAMC,EAAM,IAAI9J,MAAM6J,EAAK3J,QAErB6J,EAAiBF,EAAKX,QAAO,SAACc,EAAKrJ,EAAKP,GAC5C,OAAIqJ,EAAEQ,IAAItJ,GAAaqJ,GACvBF,EAAI1J,GAAK4J,EACFP,EAAExB,IAAI+B,EAAKrJ,GACpB,GAAG8I,EAAErB,KAEC8B,EAAWT,EAAEU,IAAIJ,GAOvB,OALAF,EAAKO,aAAY,SAACJ,EAAKrJ,EAAKP,GAC1B,OAAIqJ,EAAEQ,IAAItJ,GAAaqJ,GACvBF,EAAI1J,GAAKqJ,EAAExB,IAAI+B,EAAKF,EAAI1J,IACjBqJ,EAAExB,IAAI+B,EAAKrJ,GACpB,GAAGuJ,GACIJ,CACT,CAgBM,SAAUO,GAAQvI,EAAWwI,GAEjC,IAAMC,OAA6B9I,IAAf6I,EAA2BA,EAAaxI,EAAEzB,SAAS,GAAGH,OAE1E,MAAO,CAAEoK,WAAYC,EAAaC,YADdC,KAAKC,KAAKH,EAAc,GAE9C,CA8GM,SAAUI,GAAoBC,GAClC,GAA0B,kBAAfA,EAAyB,MAAM,IAAI9K,MAAM,8BACpD,IAAM+K,EAAYD,EAAWvK,SAAS,GAAGH,OACzC,OAAOuK,KAAKC,KAAKG,EAAY,EAC/B,CASM,SAAUC,GAAiBF,GAC/B,IAAM1K,EAASyK,GAAoBC,GACnC,OAAO1K,EAASuK,KAAKC,KAAKxK,EAAS,EACrC,4ECrcMf,GAAMC,OAAO,GACbC,GAAMD,OAAO,GAgLb,SAAU2L,GAAqBC,GAgBnC,OAfA/B,GAAc+B,EAAMvF,IACpBI,EACEmF,EACA,CACElJ,EAAG,SACHsC,EAAG,SACH6G,GAAI,QACJC,GAAI,SAEN,CACEZ,WAAY,gBACZE,YAAa,kBAIVlE,OAAO6E,QAAO,6BAChBd,GAAQW,EAAMlJ,EAAGkJ,EAAMV,aACvBU,GACA,CAAEtB,EAAGsB,EAAMvF,GAAG2D,QAErB,CCrEA,IAAyBgC,GAAyBC,EAARC,GAAQD,EACrCE,GAAM,CAEjBC,IAAG,4CACD,aAAkB,IAAN/D,EAAI,UAAH,6CAAG,GAAE,mCACVA,EACR,CAAC,kBAHA,EAGA,QAHuB3H,QAK1B2L,UAAS,SAAChI,GACR,IAAaiI,EAAMH,GAAXC,IACR,GAAI/H,EAAKvD,OAAS,GAAiB,IAAZuD,EAAK,GAAa,MAAM,IAAIiI,EAAE,iCACrD,IAAM3J,EAAM0B,EAAK,GACXpB,EAAMoB,EAAKkI,SAAS,EAAG5J,EAAM,GACnC,IAAKA,GAAOM,EAAInC,SAAW6B,EAAK,MAAM,IAAI2J,EAAE,2CAK5C,GAAa,IAATrJ,EAAI,GAAiB,MAAM,IAAIqJ,EAAE,uCACrC,GAAe,IAAXrJ,EAAI,MAA0B,IAATA,EAAI,IAC3B,MAAM,IAAIqJ,EAAE,uDACd,MAAO,CAAE/B,EAAGyB,GAAI/I,GAAMuJ,EAAGnI,EAAKkI,SAAS5J,EAAM,GAC/C,EACA8J,MAAK,SAACpL,GAEJ,IAAaiL,EAAMH,GAAXC,IACF/H,EAAsB,kBAARhD,EAAmB6K,GAAI7K,GAAOA,EAClD4K,EAAU5H,GACV,IAAImI,EAAInI,EAAKvD,OACb,GAAI0L,EAAI,GAAgB,IAAXnI,EAAK,GAAY,MAAM,IAAIiI,EAAE,yBAC1C,GAAIjI,EAAK,KAAOmI,EAAI,EAAG,MAAM,IAAIF,EAAE,uCACnC,MAA4BH,GAAIE,UAAUhI,EAAKkI,SAAS,IAA7CnE,EAAC,EAAJmC,EAASmC,EAAM,EAATF,EACd,EAAgCL,GAAIE,UAAUK,GAAnCC,EAAC,EAAJpC,EACR,GAD2B,EAAbiC,EACC1L,OAAQ,MAAM,IAAIwL,EAAE,+CACnC,MAAO,CAAElE,EAAAA,EAAGuE,EAAAA,EACd,EACAC,WAAU,SAACC,GAET,IAAMvH,EAAQ,SAACqH,GAAS,OAA0C,EAA5B1G,OAAO6G,SAASH,EAAE,GAAI,IAAe,KAAOA,EAAIA,CAAC,EACjF3H,EAAI,SAACzD,GACT,IAAMF,EAAME,EAAIN,SAAS,IACzB,OAAoB,EAAbI,EAAIP,OAAa,IAAH,OAAOO,GAAQA,CACtC,EACMsL,EAAIrH,EAAMN,EAAE6H,EAAIF,IAChBvE,EAAI9C,EAAMN,EAAE6H,EAAIzE,IAChB2E,EAAMJ,EAAE7L,OAAS,EACjBkM,EAAM5E,EAAEtH,OAAS,EACjBuE,EAAKL,EAAE+H,GACPE,EAAKjI,EAAEgI,GACb,MAAO,KAAP,OAAYhI,EAAEgI,EAAMD,EAAM,GAAE,aAAKE,GAAE,OAAG7E,EAAC,aAAK/C,GAAE,OAAGsH,EACnD,GAKI5M,GAAMC,OAAO,GAAIC,GAAMD,OAAO,GAAIE,GAAMF,OAAO,GAAIoH,GAAMpH,OAAO,GAAIqH,GAAMrH,OAAO,GAEjF,SAAUkN,GAAqBC,GACnC,IAAMC,EArGR,SAA8BxB,GAC5B,IAAMuB,EAAOxB,GAAcC,GAC3BK,EACEkB,EACA,CACE/M,EAAG,QACHoD,EAAG,SAEL,CACE6J,yBAA0B,QAC1BC,eAAgB,UAChBC,cAAe,WACfC,cAAe,WACfC,mBAAoB,UACpBC,UAAW,WACXC,QAAS,aAGb,IAAQC,EAAgBT,EAAhBS,KAAMvH,EAAU8G,EAAV9G,GAAIjG,EAAM+M,EAAN/M,EAClB,GAAIwN,EAAM,CACR,IAAKvH,EAAGqC,IAAItI,EAAGiG,EAAGmD,MAChB,MAAM,IAAI9I,MAAM,qEAElB,GACkB,kBAATkN,GACc,kBAAdA,EAAKC,MACgB,oBAArBD,EAAKE,YAEZ,MAAM,IAAIpN,MAAM,oEAEpB,CACA,OAAOwG,OAAO6E,QAAO,WAAKoB,GAC5B,CAqEgBY,CAAkBZ,GACxB9G,EAAO+G,EAAP/G,GAEFsH,EACJP,EAAMO,SACL,SAACK,EAAwBC,EAAyBC,GACjD,IAAM9N,EAAI6N,EAAME,WAChB,OAAOlC,EAAe5L,WAAWQ,KAAK,CAAC,IAAQwF,EAAGsH,QAAQvN,EAAE0H,GAAIzB,EAAGsH,QAAQvN,EAAE6H,GAC/E,EACIyF,EACJN,EAAMM,WACL,SAACtM,GAEA,IAAMgN,EAAOhN,EAAMmL,SAAS,GAI5B,MAAO,CAAEzE,EAFCzB,EAAGqH,UAAUU,EAAK7B,SAAS,EAAGlG,EAAG6D,QAE/BjC,EADF5B,EAAGqH,UAAUU,EAAK7B,SAASlG,EAAG6D,MAAO,EAAI7D,EAAG6D,QAExD,EAMF,SAASmE,EAAoBvG,GAC3B,IAAQ1H,EAASgN,EAAThN,EAAGoD,EAAM4J,EAAN5J,EACL8K,EAAKjI,EAAGsC,IAAIb,GACZyG,EAAKlI,EAAGwC,IAAIyF,EAAIxG,GACtB,OAAOzB,EAAGmI,IAAInI,EAAGmI,IAAID,EAAIlI,EAAGwC,IAAIf,EAAG1H,IAAKoD,EAC1C,CAKA,IAAK6C,EAAGqC,IAAIrC,EAAGsC,IAAIyE,EAAMtB,IAAKuC,EAAoBjB,EAAMvB,KACtD,MAAM,IAAInL,MAAM,+CAGlB,SAAS+N,EAAmBlN,GAC1B,MAAsB,kBAARA,GAAoBxB,GAAMwB,GAAOA,EAAM6L,EAAM1K,CAC7D,CACA,SAASgM,EAASnN,GAChB,IAAKkN,EAAmBlN,GAAM,MAAM,IAAIb,MAAM,8CAChD,CAGA,SAASiO,EAAuBC,GAC9B,IAOIrN,EAP8BsN,EAA4CzB,EAAtEC,yBAAmCjC,EAAmCgC,EAAnChC,YAAakC,EAAsBF,EAAtBE,eAAgB5K,EAAM0K,EAAN1K,EACxE,GAAImM,GAA0B,kBAARD,EAAkB,CAGtC,GAFI3C,EAAW2C,KAAMA,EAAM3C,EAAc2C,IAEtB,kBAARA,IAAqBC,EAAQC,SAASF,EAAI9N,QAAS,MAAM,IAAIJ,MAAM,eAC9EkO,EAAMA,EAAI1N,SAAuB,EAAdkK,EAAiB,IACtC,CAEA,IACE7J,EACiB,kBAARqN,EACHA,EACA3C,EAAmBnJ,EAAY,cAAe8L,EAAKxD,GAG3D,CAFE,MAAO2D,GACP,MAAM,IAAIrO,MAAM,uBAAD,OAAwB0K,EAAW,6CAAqCwD,GACzF,CAGA,OAFItB,IAAgB/L,EAAMiG,EAAQjG,EAAKmB,IACvCgM,EAASnN,GACFA,CACT,CAEA,IAAMyN,EAAmB,IAAIC,IAC7B,SAASC,EAAeC,GACtB,KAAMA,aAAiBC,GAAQ,MAAM,IAAI1O,MAAM,2BACjD,CACA,IAKM0O,EAAK,WAIT,WACWC,EACAC,EACAC,GAET,IAFc,gBAFL,KAAAF,GAAAA,EACA,KAAAC,GAAAA,EACA,KAAAC,GAAAA,EAEC,MAANF,IAAehJ,EAAGC,QAAQ+I,GAAK,MAAM,IAAI3O,MAAM,cACnD,GAAU,MAAN4O,IAAejJ,EAAGC,QAAQgJ,GAAK,MAAM,IAAI5O,MAAM,cACnD,GAAU,MAAN6O,IAAelJ,EAAGC,QAAQiJ,GAAK,MAAM,IAAI7O,MAAM,aACrD,CA6CC,OA1CD,wBAWA,WACE,OAAO8O,KAAKrB,WAAWrG,CACzB,GAAC,aACD,WACE,OAAO0H,KAAKrB,WAAWlG,CACzB,GAEA,4BAgCA,SAAewH,GACbD,KAAKE,aAAeD,EACpBT,EAAiBW,OAAOH,KAC1B,GAEA,4BACA,WACE,GAAIA,KAAK3E,MAAO,CAId,GAAIuC,EAAMK,qBAAuBpH,EAAGwE,IAAI2E,KAAKF,IAAK,OAClD,MAAM,IAAI5O,MAAM,kBAClB,CAEA,MAAiB8O,KAAKrB,WAAdrG,EAAC,EAADA,EAAGG,EAAC,EAADA,EAEX,IAAK5B,EAAGC,QAAQwB,KAAOzB,EAAGC,QAAQ2B,GAAI,MAAM,IAAIvH,MAAM,4BACtD,IAAMkP,EAAOvJ,EAAGsC,IAAIV,GACd4H,EAAQxB,EAAoBvG,GAClC,IAAKzB,EAAGqC,IAAIkH,EAAMC,GAAQ,MAAM,IAAInP,MAAM,qCAC1C,IAAK8O,KAAKjC,gBAAiB,MAAM,IAAI7M,MAAM,yCAC7C,GAAC,sBACD,WACE,IAAQuH,EAAMuH,KAAKrB,WAAXlG,EACR,GAAI5B,EAAGyJ,MAAO,OAAQzJ,EAAGyJ,MAAM7H,GAC/B,MAAM,IAAIvH,MAAM,8BAClB,GAEA,oBAGA,SAAOyO,GACLD,EAAeC,GACf,IAAYY,EAAuBP,KAA3BH,GAAYW,EAAeR,KAAnBF,GAAYW,EAAOT,KAAXD,GACZW,EAAuBf,EAA3BE,GAAYc,EAAehB,EAAnBG,GAAYc,EAAOjB,EAAXI,GAClBc,EAAKhK,EAAGqC,IAAIrC,EAAGwC,IAAIkH,EAAIK,GAAK/J,EAAGwC,IAAIqH,EAAID,IACvCK,EAAKjK,EAAGqC,IAAIrC,EAAGwC,IAAImH,EAAII,GAAK/J,EAAGwC,IAAIsH,EAAIF,IAC7C,OAAOI,GAAMC,CACf,GAEA,oBAGA,WACE,OAAO,IAAIlB,EAAMI,KAAKH,GAAIhJ,EAAGiD,IAAIkG,KAAKF,IAAKE,KAAKD,GAClD,GAKA,oBACA,WACE,IAAQnP,EAASgN,EAAThN,EAAGoD,EAAM4J,EAAN5J,EACL+M,EAAKlK,EAAGwC,IAAIrF,EAAG4D,IACT2I,EAAuBP,KAA3BH,GAAYW,EAAeR,KAAnBF,GAAYW,EAAOT,KAAXD,GACpBiB,EAAKnK,EAAGmD,KAAMiH,EAAKpK,EAAGmD,KAAMkH,EAAKrK,EAAGmD,KACpCmH,EAAKtK,EAAGwC,IAAIkH,EAAIA,GAChBa,EAAKvK,EAAGwC,IAAImH,EAAIA,GAChBvG,EAAKpD,EAAGwC,IAAIoH,EAAIA,GAChBY,EAAKxK,EAAGwC,IAAIkH,EAAIC,GA4BpB,OA3BAa,EAAKxK,EAAGmI,IAAIqC,EAAIA,GAChBH,EAAKrK,EAAGwC,IAAIkH,EAAIE,GAChBS,EAAKrK,EAAGmI,IAAIkC,EAAIA,GAChBF,EAAKnK,EAAGwC,IAAIzI,EAAGsQ,GACfD,EAAKpK,EAAGwC,IAAI0H,EAAI9G,GAChBgH,EAAKpK,EAAGmI,IAAIgC,EAAIC,GAChBD,EAAKnK,EAAG0C,IAAI6H,EAAIH,GAChBA,EAAKpK,EAAGmI,IAAIoC,EAAIH,GAChBA,EAAKpK,EAAGwC,IAAI2H,EAAIC,GAChBD,EAAKnK,EAAGwC,IAAIgI,EAAIL,GAChBE,EAAKrK,EAAGwC,IAAI0H,EAAIG,GAChBjH,EAAKpD,EAAGwC,IAAIzI,EAAGqJ,GACfoH,EAAKxK,EAAG0C,IAAI4H,EAAIlH,GAChBoH,EAAKxK,EAAGwC,IAAIzI,EAAGyQ,GACfA,EAAKxK,EAAGmI,IAAIqC,EAAIH,GAChBA,EAAKrK,EAAGmI,IAAImC,EAAIA,GAChBA,EAAKtK,EAAGmI,IAAIkC,EAAIC,GAChBA,EAAKtK,EAAGmI,IAAImC,EAAIlH,GAChBkH,EAAKtK,EAAGwC,IAAI8H,EAAIE,GAChBJ,EAAKpK,EAAGmI,IAAIiC,EAAIE,GAChBlH,EAAKpD,EAAGwC,IAAImH,EAAIC,GAChBxG,EAAKpD,EAAGmI,IAAI/E,EAAIA,GAChBkH,EAAKtK,EAAGwC,IAAIY,EAAIoH,GAChBL,EAAKnK,EAAG0C,IAAIyH,EAAIG,GAChBD,EAAKrK,EAAGwC,IAAIY,EAAImH,GAChBF,EAAKrK,EAAGmI,IAAIkC,EAAIA,GAET,IAAItB,EAAMoB,EAAIC,EADrBC,EAAKrK,EAAGmI,IAAIkC,EAAIA,GAElB,GAKA,iBACA,SAAIvB,GACFD,EAAeC,GACf,IAAYY,EAAuBP,KAA3BH,GAAYW,EAAeR,KAAnBF,GAAYW,EAAOT,KAAXD,GACZW,EAAuBf,EAA3BE,GAAYc,EAAehB,EAAnBG,GAAYc,EAAOjB,EAAXI,GACpBiB,EAAKnK,EAAGmD,KAAMiH,EAAKpK,EAAGmD,KAAMkH,EAAKrK,EAAGmD,KAClCpJ,EAAIgN,EAAMhN,EACVmQ,EAAKlK,EAAGwC,IAAIuE,EAAM5J,EAAG4D,IACvBuJ,EAAKtK,EAAGwC,IAAIkH,EAAIG,GAChBU,EAAKvK,EAAGwC,IAAImH,EAAIG,GAChB1G,EAAKpD,EAAGwC,IAAIoH,EAAIG,GAChBS,EAAKxK,EAAGmI,IAAIuB,EAAIC,GAChBc,EAAKzK,EAAGmI,IAAI0B,EAAIC,GACpBU,EAAKxK,EAAGwC,IAAIgI,EAAIC,GAChBA,EAAKzK,EAAGmI,IAAImC,EAAIC,GAChBC,EAAKxK,EAAG0C,IAAI8H,EAAIC,GAChBA,EAAKzK,EAAGmI,IAAIuB,EAAIE,GAChB,IAAIc,EAAK1K,EAAGmI,IAAI0B,EAAIE,GA+BpB,OA9BAU,EAAKzK,EAAGwC,IAAIiI,EAAIC,GAChBA,EAAK1K,EAAGmI,IAAImC,EAAIlH,GAChBqH,EAAKzK,EAAG0C,IAAI+H,EAAIC,GAChBA,EAAK1K,EAAGmI,IAAIwB,EAAIC,GAChBO,EAAKnK,EAAGmI,IAAI2B,EAAIC,GAChBW,EAAK1K,EAAGwC,IAAIkI,EAAIP,GAChBA,EAAKnK,EAAGmI,IAAIoC,EAAInH,GAChBsH,EAAK1K,EAAG0C,IAAIgI,EAAIP,GAChBE,EAAKrK,EAAGwC,IAAIzI,EAAG0Q,GACfN,EAAKnK,EAAGwC,IAAI0H,EAAI9G,GAChBiH,EAAKrK,EAAGmI,IAAIgC,EAAIE,GAChBF,EAAKnK,EAAG0C,IAAI6H,EAAIF,GAChBA,EAAKrK,EAAGmI,IAAIoC,EAAIF,GAChBD,EAAKpK,EAAGwC,IAAI2H,EAAIE,GAChBE,EAAKvK,EAAGmI,IAAImC,EAAIA,GAChBC,EAAKvK,EAAGmI,IAAIoC,EAAID,GAChBlH,EAAKpD,EAAGwC,IAAIzI,EAAGqJ,GACfqH,EAAKzK,EAAGwC,IAAI0H,EAAIO,GAChBF,EAAKvK,EAAGmI,IAAIoC,EAAInH,GAChBA,EAAKpD,EAAG0C,IAAI4H,EAAIlH,GAChBA,EAAKpD,EAAGwC,IAAIzI,EAAGqJ,GACfqH,EAAKzK,EAAGmI,IAAIsC,EAAIrH,GAChBkH,EAAKtK,EAAGwC,IAAI+H,EAAIE,GAChBL,EAAKpK,EAAGmI,IAAIiC,EAAIE,GAChBA,EAAKtK,EAAGwC,IAAIkI,EAAID,GAChBN,EAAKnK,EAAGwC,IAAIgI,EAAIL,GAChBA,EAAKnK,EAAG0C,IAAIyH,EAAIG,GAChBA,EAAKtK,EAAGwC,IAAIgI,EAAID,GAChBF,EAAKrK,EAAGwC,IAAIkI,EAAIL,GAET,IAAItB,EAAMoB,EAAIC,EADrBC,EAAKrK,EAAGmI,IAAIkC,EAAIC,GAElB,GAAC,sBAED,SAASxB,GACP,OAAOK,KAAKhB,IAAIW,EAAM6B,SACxB,GAAC,iBAEO,WACN,OAAOxB,KAAKyB,OAAO7B,EAAM5F,KAC3B,GAAC,kBACO,SAAK9G,GACX,OAAOwO,EAAKC,WAAW3B,KAAMR,EAAkBtM,GAAG,SAAC0O,GACjD,IAAMC,EAAQhL,EAAGiL,YAAYF,EAAKrH,KAAI,SAACO,GAAC,OAAKA,EAAEiF,EAAE,KACjD,OAAO6B,EAAKrH,KAAI,SAACO,EAAGtJ,GAAC,OAAKsJ,EAAE6D,SAASkD,EAAMrQ,GAAG,IAAE+I,IAAIqF,EAAMmC,WAC5D,GACF,GAEA,4BAKA,SAAe7O,GACb,IAAM8O,EAAIpC,EAAM5F,KAChB,GAAI9G,IAAM3C,GAAK,OAAOyR,EAEtB,GADA9C,EAAShM,GACLA,IAAMzC,GAAK,OAAOuP,KACtB,IAAQ5B,EAASR,EAATQ,KACR,IAAKA,EAAM,OAAOsD,EAAKO,aAAajC,KAAM9M,GAO1C,IAJA,MAA+BkL,EAAKE,YAAYpL,GAA1CgP,EAAK,EAALA,MAAOC,EAAE,EAAFA,GAAIC,EAAK,EAALA,MAAOC,EAAE,EAAFA,GACpBC,EAAMN,EACNO,EAAMP,EACNjH,EAAWiF,KACRmC,EAAK5R,IAAO8R,EAAK9R,IAClB4R,EAAK1R,KAAK6R,EAAMA,EAAItD,IAAIjE,IACxBsH,EAAK5R,KAAK8R,EAAMA,EAAIvD,IAAIjE,IAC5BA,EAAIA,EAAEyH,SACNL,IAAO1R,GACP4R,IAAO5R,GAKT,OAHIyR,IAAOI,EAAMA,EAAId,UACjBY,IAAOG,EAAMA,EAAIf,UACrBe,EAAM,IAAI3C,EAAM/I,EAAGwC,IAAIkJ,EAAI1C,GAAIzB,EAAKC,MAAOkE,EAAIzC,GAAIyC,EAAIxC,IAChDuC,EAAItD,IAAIuD,EACjB,GAEA,sBASA,SAASE,GACPvD,EAASuD,GACT,IACIhE,EAAciE,EADdxP,EAAIuP,EAEArE,EAASR,EAATQ,KACR,GAAIA,EAAM,CACR,MAAiCA,EAAKE,YAAYpL,GAA1CgP,EAAK,EAALA,MAAOC,EAAE,EAAFA,GAAIC,EAAK,EAALA,MAAOC,EAAE,EAAFA,GAC1B,EAAyBrC,KAAK2C,KAAKR,GAA1BG,EAAG,EAANxH,EAAW8H,EAAG,EAAN/H,EACd,EAAyBmF,KAAK2C,KAAKN,GAA1BE,EAAG,EAANzH,EAAW+H,EAAG,EAANhI,EACdyH,EAAMZ,EAAKoB,gBAAgBZ,EAAOI,GAClCC,EAAMb,EAAKoB,gBAAgBV,EAAOG,GAClCA,EAAM,IAAI3C,EAAM/I,EAAGwC,IAAIkJ,EAAI1C,GAAIzB,EAAKC,MAAOkE,EAAIzC,GAAIyC,EAAIxC,IACvDtB,EAAQ6D,EAAItD,IAAIuD,GAChBG,EAAOE,EAAI5D,IAAI6D,EACjB,KAAO,CACL,MAAiB7C,KAAK2C,KAAKzP,GAC3BuL,EADS,EAAD3D,EAER4H,EAFY,EAAD7H,CAGb,CAEA,OAAO+E,EAAMmD,WAAW,CAACtE,EAAOiE,IAAO,EACzC,GAEA,kCAMA,SAAqBjJ,EAAU7I,EAAWoD,GACxC,IAAMgP,EAAIpD,EAAMqD,KACV5J,EAAM,SACVN,EACAnI,GAAU,OACNA,IAAML,IAAOK,IAAMH,IAAQsI,EAAE0I,OAAOuB,GAA2BjK,EAAEmK,SAAStS,GAAjCmI,EAAEoK,eAAevS,EAAkB,EAC5EgD,EAAMyF,EAAI2G,KAAMpP,GAAGoO,IAAI3F,EAAII,EAAGzF,IACpC,OAAOJ,EAAIyH,WAAQxI,EAAYe,CACjC,GAIA,sBACA,SAASwP,GACP,IAAY9K,EAAoB0H,KAAxBH,GAAWpH,EAAauH,KAAjBF,GAAWuD,EAAMrD,KAAVD,GAChB1E,EAAM2E,KAAK3E,MAGP,MAAN+H,IAAYA,EAAK/H,EAAMxE,EAAG2C,IAAM3C,EAAG0E,IAAI8H,IAC3C,IAAMC,EAAKzM,EAAGwC,IAAIf,EAAG8K,GACfG,EAAK1M,EAAGwC,IAAIZ,EAAG2K,GACfI,EAAK3M,EAAGwC,IAAIgK,EAAGD,GACrB,GAAI/H,EAAK,MAAO,CAAE/C,EAAGzB,EAAGmD,KAAMvB,EAAG5B,EAAGmD,MACpC,IAAKnD,EAAGqC,IAAIsK,EAAI3M,EAAG2C,KAAM,MAAM,IAAItI,MAAM,oBACzC,MAAO,CAAEoH,EAAGgL,EAAI7K,EAAG8K,EACrB,GAAC,2BACD,WACE,IAAWE,EAA4B7F,EAA/BpI,EAAauI,EAAkBH,EAAlBG,cACrB,GAAI0F,IAAahT,GAAK,OAAO,EAC7B,GAAIsN,EAAe,OAAOA,EAAc6B,EAAOI,MAC/C,MAAM,IAAI9O,MAAM,+DAClB,GAAC,2BACD,WACE,IAAWuS,EAA4B7F,EAA/BpI,EAAawI,EAAkBJ,EAAlBI,cACrB,OAAIyF,IAAahT,GAAYuP,KACzBhC,EAAsBA,EAAc4B,EAAOI,MACxCA,KAAKmD,eAAevF,EAAMpI,EACnC,GAAC,wBAED,WAA8B,IAAnBkO,IAAe,UAAH,+CAErB,OADA1D,KAAK2D,iBACExF,EAAQyB,EAAOI,KAAM0D,EAC9B,GAAC,mBAED,WAAyB,IAAnBA,IAAe,UAAH,+CAChB,OAAOjH,EAAcuD,KAAK4D,WAAWF,GACvC,IAAC,yBAnUD,SAAkB5I,GAChB,MAAiBA,GAAK,CAAC,EAAfxC,EAAC,EAADA,EAAGG,EAAC,EAADA,EACX,IAAKqC,IAAMjE,EAAGC,QAAQwB,KAAOzB,EAAGC,QAAQ2B,GAAI,MAAM,IAAIvH,MAAM,wBAC5D,GAAI4J,aAAa8E,EAAO,MAAM,IAAI1O,MAAM,gCACxC,IAAMmK,EAAM,SAAC7J,GAAI,OAAKqF,EAAGqC,IAAI1H,EAAGqF,EAAGmD,KAAK,EAExC,OAAIqB,EAAI/C,IAAM+C,EAAI5C,GAAWmH,EAAM5F,KAC5B,IAAI4F,EAAMtH,EAAGG,EAAG5B,EAAG2C,IAC5B,GAAC,wBAeD,SAAkBqK,GAChB,IAAMhC,EAAQhL,EAAGiL,YAAY+B,EAAOtJ,KAAI,SAACO,GAAC,OAAKA,EAAEiF,EAAE,KACnD,OAAO8D,EAAOtJ,KAAI,SAACO,EAAGtJ,GAAC,OAAKsJ,EAAE6D,SAASkD,EAAMrQ,GAAG,IAAE+I,IAAIqF,EAAMmC,WAC9D,GAEA,qBAIA,SAAelQ,GACb,IAAMkH,EAAI6G,EAAMmC,WAAW7D,EAAU5K,EAAY,WAAYzB,KAE7D,OADAkH,EAAE4K,iBACK5K,CACT,GAEA,4BACA,SAAsB+K,GACpB,OAAOlE,EAAMqD,KAAKC,SAAS/D,EAAuB2E,GACpD,KAAC,EAzDQ,GACOlE,EAAAA,KAAO,IAAIA,EAAMhC,EAAMvB,GAAIuB,EAAMtB,GAAIzF,EAAG2C,KACxCoG,EAAAA,KAAO,IAAIA,EAAM/I,EAAGmD,KAAMnD,EAAG2C,IAAK3C,EAAGmD,MAmVvD,IAAM+J,EAAQnG,EAAMlC,WACdgG,ED5jBF,SAAmCsC,EAAwBC,GAC/D,IAAMnB,EAAkB,SAACoB,EAAoBjT,GAC3C,IAAM6I,EAAM7I,EAAKuQ,SACjB,OAAO0C,EAAYpK,EAAM7I,CAC3B,EACM0M,EAAO,SAACwG,GAGZ,MAAO,CAAEC,QAFOvI,KAAKC,KAAKmI,EAAOE,GAAK,EAEpBlE,WADC,KAAH,IAAG,EAAMkE,EAAI,GAE/B,EACA,MAAO,CACLrB,gBAAAA,EAEAb,aAAY,SAACoC,EAAQnR,GAGnB,IAFA,IAAI4H,EAAIkJ,EAAEhK,KACNe,EAAOsJ,EACJnR,EAAI3C,IACL2C,EAAIzC,KAAKqK,EAAIA,EAAEkE,IAAIjE,IACvBA,EAAIA,EAAEyH,SACNtP,IAAMzC,GAER,OAAOqK,CACT,EAYAwJ,iBAAgB,SAACD,EAAQF,GAKvB,IAJA,MAAgCxG,EAAKwG,GAA7BC,EAAO,EAAPA,QAASnE,EAAU,EAAVA,WACX4D,EAAc,GAChB/I,EAAOuJ,EACPE,EAAOzJ,EACF0J,EAAS,EAAGA,EAASJ,EAASI,IAAU,CAC/CD,EAAOzJ,EACP+I,EAAO9N,KAAKwO,GAEZ,IAAK,IAAI/S,EAAI,EAAGA,EAAIyO,EAAYzO,IAC9B+S,EAAOA,EAAKvF,IAAIlE,GAChB+I,EAAO9N,KAAKwO,GAEdzJ,EAAIyJ,EAAK/B,QACX,CACA,OAAOqB,CACT,EASAlB,KAAI,SAACwB,EAAWM,EAAkBvR,GAYhC,IATA,MAAgCyK,EAAKwG,GAA7BC,EAAO,EAAPA,QAASnE,EAAU,EAAVA,WAEbnF,EAAIkJ,EAAEhK,KACNa,EAAImJ,EAAEf,KAEJyB,EAAOlU,OAAO,WAAK2T,GAAI,GACvBQ,EAAY,KAAH,IAAG,EAAKR,GACjBS,EAAUpU,OAAO2T,GAEdK,EAAS,EAAGA,EAASJ,EAASI,IAAU,CAC/C,IAAMK,EAASL,EAASvE,EAEpB6E,EAAQrO,OAAOvD,EAAIwR,GAGvBxR,IAAM0R,EAIFE,EAAQ7E,IACV6E,GAASH,EACTzR,GAAKzC,IAWP,IAAMsU,EAAUF,EACVG,EAAUH,EAAShJ,KAAKoJ,IAAIH,GAAS,EACrCI,EAAQV,EAAS,IAAM,EACvBW,EAAQL,EAAQ,EACR,IAAVA,EAEFjK,EAAIA,EAAEmE,IAAI8D,EAAgBoC,EAAOT,EAAYM,KAE7CjK,EAAIA,EAAEkE,IAAI8D,EAAgBqC,EAAOV,EAAYO,IAEjD,CAMA,MAAO,CAAElK,EAAAA,EAAGD,EAAAA,EACd,EAEA8G,WAAU,SAAC5I,EAAMqM,EAA6BlS,EAAWmS,GAEvD,IAAMlB,EAAYpL,EAAEmH,cAAgB,EAEhC0B,EAAOwD,EAAeE,IAAIvM,GAO9B,OANK6I,IACHA,EAAO5B,KAAKsE,iBAAiBvL,EAAGoL,GACtB,IAANA,GACFiB,EAAetR,IAAIiF,EAAGsM,EAAUzD,KAG7B5B,KAAK2C,KAAKwB,EAAGvC,EAAM1O,EAC5B,EAEJ,CC6beyP,CAAK/C,EAAOhC,EAAMQ,KAAOvC,KAAKC,KAAKiI,EAAQ,GAAKA,GAE7D,MAAO,CACLnG,MAAAA,EACA2H,gBAAiB3F,EACjBT,uBAAAA,EACAN,oBAAAA,EACAI,mBAAAA,EAEJ,CA0EM,SAAUuG,GAAYC,GAC1B,IAAM7H,EAnCR,SAAsBxB,GACpB,IAAMuB,EAAOxB,GAAcC,GAc3B,OAbAK,EACEkB,EACA,CACE5G,KAAM,OACN2O,KAAM,WACNC,YAAa,YAEf,CACEC,SAAU,WACVC,cAAe,WACfC,KAAM,YAGHpO,OAAO6E,QAAO,SAAEuJ,MAAM,GAASnI,GACxC,CAmBgBoI,CAAaN,GACnB5O,EAAuB+G,EAAvB/G,GAAOmP,EAAgBpI,EAAnB1K,EACN+S,EAAgBpP,EAAG6D,MAAQ,EAC3BwL,EAAkB,EAAIrP,EAAG6D,MAAQ,EAKvC,SAASyL,EAAKvV,GACZ,OAAOoH,EAAQpH,EAAGoV,EACpB,CACA,SAASI,EAAKxV,GACZ,OAAOoH,EAAWpH,EAAGoV,EACvB,CAEA,MAKItI,IAAkB,oBACjBE,GAAK,IACRO,QAAO,SAACK,EAAIC,EAAOiF,GACjB,IAAM9S,EAAI6N,EAAME,WACVrG,EAAIzB,EAAGsH,QAAQvN,EAAE0H,GACjB+N,EAAM5J,EACZ,OAAIiH,EACK2C,EAAIxV,WAAWQ,KAAK,CAACoN,EAAM6H,WAAa,EAAO,IAAQhO,GAEvD+N,EAAIxV,WAAWQ,KAAK,CAAC,IAAQiH,EAAGzB,EAAGsH,QAAQvN,EAAE6H,GAExD,EACAyF,UAAS,SAACtM,GACR,IAAMuB,EAAMvB,EAAMN,OACZiV,EAAO3U,EAAM,GACbgN,EAAOhN,EAAMmL,SAAS,GAE5B,GAAI5J,IAAQ8S,GAA2B,IAATM,GAA0B,IAATA,EAgBxC,IAAIpT,IAAQ+S,GAA4B,IAATK,EAGpC,MAAO,CAAEjO,EAFCzB,EAAGqH,UAAUU,EAAK7B,SAAS,EAAGlG,EAAG6D,QAE/BjC,EADF5B,EAAGqH,UAAUU,EAAK7B,SAASlG,EAAG6D,MAAO,EAAI7D,EAAG6D,SAGtD,MAAM,IAAIxJ,MAAM,mBAAD,OACMiC,EAAG,kCAA0B8S,EAAa,gCAAwBC,EAAe,uBAExG,CAvBE,IAAM5N,EAAImE,EAAmBmC,GAC7B,KAjCGrO,IADoBwB,EAkCEuG,IAjCTvG,EAAM8E,EAAG2D,OAiCI,MAAM,IAAItJ,MAAM,yBAC7C,IACIuH,EApCmB1G,EAmCjByU,EAAK3H,EAAoBvG,GAE/B,IACEG,EAAI5B,EAAG4P,KAAKD,EAId,CAHE,MAAOE,GACP,IAAMC,EAASD,aAAqBxV,MAAQ,KAAOwV,EAAUE,QAAU,GACvE,MAAM,IAAI1V,MAAM,wBAA0ByV,EAC5C,CAKA,OAFiC,KAAP,EAAPJ,OAFH9N,EAAIhI,MAASA,MAGHgI,EAAI5B,EAAGiD,IAAIrB,IAC9B,CAAEH,EAAAA,EAAGG,EAAAA,EAUhB,KA9CiBmH,EAAK,EAAtB2F,gBACApG,EAAsB,EAAtBA,uBACAN,EAAmB,EAAnBA,oBACAI,EAAkB,EAAlBA,mBA6CI4H,EAAgB,SAAC9U,GAAW,OAChC0K,EAAcA,EAAmB1K,EAAK6L,EAAMhC,aAAa,EAE3D,SAASkL,EAAsBtO,GAE7B,OAAOA,EADMwN,GAAevV,EAE9B,CAEA,SAASsW,EAAW5J,GAClB,OAAO2J,EAAsB3J,GAAKgJ,GAAMhJ,GAAKA,CAC/C,CAEA,IAAM6J,EAAS,SAAChT,EAAe3C,EAAc4V,GAAU,OAAKxK,EAAmBzI,EAAE8B,MAAMzE,EAAM4V,GAAI,EAK3FC,EAAS,WACb,WACWtO,EACAuE,EACAgK,IAAiB,gBAFjB,KAAAvO,EAAAA,EACA,KAAAuE,EAAAA,EACA,KAAAgK,SAAAA,EAETnH,KAAK2D,gBACP,CAcC,OAZD,uCAcA,WAEE,IAAK1E,EAAmBe,KAAKpH,GAAI,MAAM,IAAI1H,MAAM,6BACjD,IAAK+N,EAAmBe,KAAK7C,GAAI,MAAM,IAAIjM,MAAM,4BACnD,GAAC,4BAED,SAAeiW,GACb,OAAO,IAAID,EAAUlH,KAAKpH,EAAGoH,KAAK7C,EAAGgK,EACvC,GAAC,8BAED,SAAiBC,GACf,IAAQxO,EAAwBoH,KAAxBpH,EAAGuE,EAAqB6C,KAArB7C,EAAakK,EAAQrH,KAAlBmH,SACR3R,EAAIqQ,EAAcvS,EAAY,UAAW8T,IAC/C,GAAW,MAAPC,IAAgB,CAAC,EAAG,EAAG,EAAG,GAAG/H,SAAS+H,GAAM,MAAM,IAAInW,MAAM,uBAChE,IAAMoW,EAAe,IAARD,GAAqB,IAARA,EAAYzO,EAAIgF,EAAM1K,EAAI0F,EACpD,GAAI0O,GAAQzQ,EAAG2D,MAAO,MAAM,IAAItJ,MAAM,8BACtC,IAAMqW,EAAuB,KAAP,EAANF,GAAiB,KAAO,KAClCG,EAAI5H,EAAM6H,QAAQF,EAASV,EAAcS,IACzCI,EAAKtB,EAAKkB,GACVK,EAAKxB,GAAM3Q,EAAIkS,GACfE,EAAKzB,EAAKhJ,EAAIuK,GACdjO,EAAImG,EAAMqD,KAAK4E,qBAAqBL,EAAGG,EAAIC,GACjD,IAAKnO,EAAG,MAAM,IAAIvI,MAAM,qBAExB,OADAuI,EAAEkK,iBACKlK,CACT,GAEA,sBACA,WACE,OAAOqN,EAAsB9G,KAAK7C,EACpC,GAAC,wBAED,WACE,OAAO6C,KAAK8H,WAAa,IAAIZ,EAAUlH,KAAKpH,EAAGuN,GAAMnG,KAAK7C,GAAI6C,KAAKmH,UAAYnH,IACjF,GAEA,2BACA,WACE,OAAOvD,EAAcuD,KAAK+H,WAC5B,GAAC,sBACD,WACE,OAAOpL,GAAIS,WAAW,CAAExE,EAAGoH,KAAKpH,EAAGuE,EAAG6C,KAAK7C,GAC7C,GAEA,+BACA,WACE,OAAOV,EAAcuD,KAAKgI,eAC5B,GAAC,0BACD,WACE,OAAOnB,EAAc7G,KAAKpH,GAAKiO,EAAc7G,KAAK7C,EACpD,IAAC,0BA/DD,SAAmBtL,GACjB,IAAMmL,EAAIY,EAAMhC,YAEhB,OADA/J,EAAMyB,EAAY,mBAAoBzB,EAAS,EAAJmL,GACpC,IAAIkK,EAAUF,EAAOnV,EAAK,EAAGmL,GAAIgK,EAAOnV,EAAKmL,EAAG,EAAIA,GAC7D,GAGA,qBACA,SAAenL,GACb,MAAiB8K,GAAIM,MAAM3J,EAAY,MAAOzB,IAC9C,OAAO,IAAIqV,EADF,EAADtO,EAAI,EAADuE,EAEb,KAAC,EArBY,GA6ET8K,EAAQ,CACZC,kBAAiB,SAACpE,GAChB,IAEE,OADA3E,EAAuB2E,IAChB,CAGT,CAFE,MAAOvE,GACP,OAAO,CACT,CACF,EACAJ,uBAAwBA,EAMxBgJ,iBAAkB,WAChB,IAAM7W,EAAS0G,GAAqB4F,EAAM1K,GAC1C,OF7YA,SAAyBkM,EAAiBpD,GAAgC,IAAZoM,EAAO,UAAH,8CAChEjV,EAAMiM,EAAI9N,OACV+W,EAAWtM,GAAoBC,GAC/BsM,EAASpM,GAAiBF,GAEhC,GAAI7I,EAAM,IAAMA,EAAMmV,GAAUnV,EAAM,KACpC,MAAM,IAAIjC,MAAM,YAAD,OAAaoX,EAAM,qCAA6BnV,IACjE,IAEMoV,EAAUvQ,EAFJoQ,EAAOtV,EAAgBsM,GAAOrM,EAAgBqM,GAEjCpD,EAAavL,GAAOA,EAC7C,OAAO2X,EAAOhV,EAAgBmV,EAASF,GAAYpV,EAAgBsV,EAASF,EAC9E,CEkYarQ,CAAmB4F,EAAM+H,YAAYrU,GAASsM,EAAM1K,EAC7D,EAUAsV,WAAU,WAAmC,IAAlCvI,EAAa,UAAH,6CAAG,EAAGxB,EAAQ,UAAH,6CAAGmB,EAAMqD,KAGvC,OAFAxE,EAAMgK,eAAexI,GACrBxB,EAAMyE,SAAS1S,OAAO,IACfiO,CACT,GAgBF,SAASiK,EAAUzX,GACjB,IAAM8D,EAAM0H,EAAWxL,GACjBkD,EAAsB,kBAATlD,EACbkC,GAAO4B,GAAOZ,IAASlD,EAAaK,OAC1C,OAAIyD,EAAY5B,IAAQ8S,GAAiB9S,IAAQ+S,EAC7C/R,EAAYhB,IAAQ,EAAI8S,GAAiB9S,IAAQ,EAAI+S,EACrDjV,aAAgB2O,CAEtB,CAuBA,IAAMgG,EACJhI,EAAMgI,UACN,SAAUhU,GAGR,IAAMG,EAAM0K,EAAmB7K,GACzB+W,EAAuB,EAAf/W,EAAMN,OAAasM,EAAMlC,WACvC,OAAOiN,EAAQ,EAAI5W,GAAOvB,OAAOmY,GAAS5W,CAC5C,EACI8T,EACJjI,EAAMiI,eACN,SAAUjU,GACR,OAAOuU,EAAKP,EAAShU,GACvB,EAEIgX,EAAanM,EAAWmB,EAAMlC,YAIpC,SAASmN,EAAW9W,GAClB,GAAmB,kBAARA,EAAkB,MAAM,IAAIb,MAAM,mBAC7C,KAAMX,IAAOwB,GAAOA,EAAM6W,GACxB,MAAM,IAAI1X,MAAM,uBAAD,OAAwB0M,EAAMlC,aAE/C,OAAOe,EAAmB1K,EAAK6L,EAAMhC,YACvC,CAOA,SAASkN,EAAQ1B,EAActD,GAA0C,IAArBnG,EAAO,UAAH,6CAAGoL,EACzD,GAAI,CAAC,YAAa,aAAaC,MAAK,SAAC3T,GAAC,OAAKA,KAAKsI,CAAI,IAClD,MAAM,IAAIzM,MAAM,uCAClB,IAAQ6F,EAAsB6G,EAAtB7G,KAAM4O,EAAgB/H,EAAhB+H,YACRG,EAAqCnI,EAArCmI,KAAMmD,EAA+BtL,EAA/BsL,QAAuBC,EAAQvL,EAAtBwL,aACT,MAARrD,IAAcA,GAAO,GACzBsB,EAAU9T,EAAY,UAAW8T,GAC7B6B,IAAS7B,EAAU9T,EAAY,oBAAqByD,EAAKqQ,KAK7D,IAAMgC,EAAQvD,EAAcuB,GACtBrM,EAAIoE,EAAuB2E,GAC3BuF,EAAW,CAACR,EAAW9N,GAAI8N,EAAWO,IAE5C,GAAW,MAAPF,IAAuB,IAARA,EAAe,CAEhC,IAAMxV,GAAY,IAARwV,EAAevD,EAAY9O,EAAG6D,OAASwO,EACjDG,EAAStT,KAAKzC,EAAY,eAAgBI,GAC5C,CACA,IAAMgC,EAAO+G,EAAAA,MAAAA,EAAkB4M,GACzBxQ,EAAIuQ,EAEV,SAASE,EAAMC,GAEb,IAAMlU,EAAIuQ,EAAS2D,GACnB,GAAKtK,EAAmB5J,GAAxB,CACA,IAAMmU,EAAKpD,EAAK/Q,GACVsD,EAAIiH,EAAMqD,KAAKC,SAAS7N,GAAGsJ,WAC3B/F,EAAIuN,EAAKxN,EAAEL,GACjB,GAAIM,IAAMrI,GAAV,CAIA,IAAM4M,EAAIgJ,EAAKqD,EAAKrD,EAAKtN,EAAID,EAAImC,IACjC,GAAIoC,IAAM5M,GAAV,CACA,IAAI4W,GAAYxO,EAAEL,IAAMM,EAAI,EAAI,GAAKnC,OAAOkC,EAAEF,EAAIhI,IAC9CgZ,EAAQtM,EAKZ,OAJI2I,GAAQgB,EAAsB3J,KAChCsM,EAAQ1C,EAAW5J,GACnBgK,GAAY,GAEP,IAAID,EAAUtO,EAAG6Q,EAAOtC,EAPV,CALA,CAJa,CAiBpC,CACA,MAAO,CAAEzR,KAAAA,EAAM4T,MAAAA,EACjB,CACA,IAAMP,EAA2B,CAAEjD,KAAMlI,EAAMkI,KAAMmD,SAAS,GACxDS,EAA0B,CAAE5D,KAAMlI,EAAMkI,KAAMmD,SAAS,GAuF7D,OAhEArJ,EAAMqD,KAAKwF,eAAe,GAgEnB,CACL7K,MAAAA,EACA+L,aA/MF,SAAsB7F,GAAwC,IAAnBJ,IAAe,UAAH,+CACrD,OAAO9D,EAAMgK,eAAe9F,GAAYF,WAAWF,EACrD,EA8MEmG,gBArLF,SAAyBC,EAAmBC,GAAiC,IAAnBrG,IAAe,UAAH,+CACpE,GAAIgF,EAAUoB,GAAW,MAAM,IAAI5Y,MAAM,iCACzC,IAAKwX,EAAUqB,GAAU,MAAM,IAAI7Y,MAAM,iCACzC,IAAM8C,EAAI4L,EAAM6H,QAAQsC,GACxB,OAAO/V,EAAEkP,SAAS/D,EAAuB2K,IAAWlG,WAAWF,EACjE,EAiLEsG,KA5EF,SAAc5C,EAAc6C,GAAuC,IAArBtM,EAAO,UAAH,6CAAGoL,EACnD,EAAwBD,EAAQ1B,EAAS6C,EAAStM,GAA1CjI,EAAI,EAAJA,KAAM4T,EAAK,EAALA,MACRY,EAAItM,EACJuM,EAAO1N,EAAsCyN,EAAEnT,KAAKC,UAAWkT,EAAEtO,YAAasO,EAAExE,MACtF,OAAOyE,EAAKzU,EAAM4T,EACpB,EAwEEc,OArDF,SACEC,EACAjD,EACAkD,GACqB,MAArB3M,EAAO,UAAH,6CAAG+L,EAEDa,EAAKF,EAGX,GAFAjD,EAAU9T,EAAY,UAAW8T,GACjCkD,EAAYhX,EAAY,YAAagX,GACjC,WAAY3M,EAAM,MAAM,IAAIzM,MAAM,sCACtC,IAGI6H,EAHI+M,EAAkBnI,EAAlBmI,KAAMmD,EAAYtL,EAAZsL,QAEVuB,OAA8B3X,EAElC,IACE,GAAkB,kBAAP0X,GAAmB9N,EAAW8N,GAGvC,IACEC,EAAOtD,EAAUuD,QAAQF,EAI3B,CAHE,MAAOG,GACP,KAAMA,aAAoB/N,GAAIC,KAAM,MAAM8N,EAC1CF,EAAOtD,EAAUyD,YAAYJ,EAC/B,KACK,IAAkB,kBAAPA,GAAmC,kBAATA,EAAG3R,GAAkC,kBAAT2R,EAAGpN,EAIzE,MAAM,IAAIjM,MAAM,SAHhB,IAAQ0H,EAAS2R,EAAT3R,EAAGuE,EAAMoN,EAANpN,EACXqN,EAAO,IAAItD,EAAUtO,EAAGuE,EAG1B,CACApE,EAAI6G,EAAM6H,QAAQ6C,EAKpB,CAJE,MAAO/K,GACP,GAAiC,UAA5BA,EAAgBqH,QACnB,MAAM,IAAI1V,MAAM,kEAClB,OAAO,CACT,CACA,GAAI4U,GAAQ0E,EAAK1C,WAAY,OAAO,EAChCmB,IAAS7B,EAAUxJ,EAAM7G,KAAKqQ,IAClC,MAAiBoD,EAAT5R,EAAC,EAADA,EAAGuE,EAAC,EAADA,EACL3H,EAAIqQ,EAAcuB,GAClBwD,EAAKxE,EAAKjJ,GACVwK,EAAKxB,EAAK3Q,EAAIoV,GACdhD,EAAKzB,EAAKvN,EAAIgS,GACdpD,EAA8C,QAA7C,EAAG5H,EAAMqD,KAAK4E,qBAAqB9O,EAAG4O,EAAIC,UAAG,aAA1C,EAA4CjJ,WACtD,IAAK6I,EAAG,OAAO,EACf,IAAMpS,EAAI+Q,EAAKqB,EAAElP,GACjB,OAAOlD,IAAMwD,CACf,EAOE2M,gBAAiB3F,EACjBsH,UAAAA,EACAe,MAAAA,EAEJ,CAmFM,SAAU4C,GACdhU,EACA8G,GAOA,GADA3F,GAAkBnB,IACbA,EAAGC,QAAQ6G,EAAKmN,KAAOjU,EAAGC,QAAQ6G,EAAKoN,KAAOlU,EAAGC,QAAQ6G,EAAKhE,GACjE,MAAM,IAAIzI,MAAM,qCAClB,IAAM8Z,EAnFF,SAA4BnU,EAAmB8C,GAInD,IAFA,IAAMhB,EAAI9B,EAAG2D,MACTwC,EAAIzM,GACC0a,EAAItS,EAAIlI,GAAKwa,EAAIva,KAAQH,GAAK0a,GAAKva,GAAKsM,GAAKvM,GACtD,IAAM2I,EAAK4D,EAGLkO,EAAexa,IAAQ0I,EAAK3I,GAAMA,GAClC0a,EAAaD,EAAexa,GAC5B0a,GAAMzS,EAAIlI,IAAO0a,EACjBE,GAAMD,EAAK3a,IAAOC,GAClB4a,EAAKH,EAAa1a,GAClB8a,EAAKL,EACLM,EAAK3U,EAAGqB,IAAIyB,EAAGyR,GACfK,EAAK5U,EAAGqB,IAAIyB,GAAIyR,EAAK3a,IAAOC,IAC9Bsa,EAAY,SAACtS,EAAMtD,GACrB,IAAIsW,EAAMF,EACNG,EAAM9U,EAAGqB,IAAI9C,EAAGkW,GAChBM,EAAM/U,EAAGsC,IAAIwS,GACjBC,EAAM/U,EAAGwC,IAAIuS,EAAKxW,GAClB,IAAIyW,EAAMhV,EAAGwC,IAAIX,EAAGkT,GACpBC,EAAMhV,EAAGqB,IAAI2T,EAAKR,GAClBQ,EAAMhV,EAAGwC,IAAIwS,EAAKF,GAClBA,EAAM9U,EAAGwC,IAAIwS,EAAKzW,GAClBwW,EAAM/U,EAAGwC,IAAIwS,EAAKnT,GAClB,IAAIoT,EAAMjV,EAAGwC,IAAIuS,EAAKD,GACtBE,EAAMhV,EAAGqB,IAAI4T,EAAKP,GAClB,IAAIQ,EAAOlV,EAAGqC,IAAI2S,EAAKhV,EAAG2C,KAC1BmS,EAAM9U,EAAGwC,IAAIuS,EAAKH,GAClBI,EAAMhV,EAAGwC,IAAIyS,EAAKJ,GAClBE,EAAM/U,EAAGmV,KAAKL,EAAKC,EAAKG,GACxBD,EAAMjV,EAAGmV,KAAKH,EAAKC,EAAKC,GAExB,IAAK,IAAIva,EAAI4H,EAAI5H,EAAIf,GAAKe,IAAK,CAC7B,IAAIqa,EAAMra,EAAId,GACdmb,EAAMnb,IAAQmb,EAAMpb,GACpB,IAAIwb,EAAOpV,EAAGqB,IAAI4T,EAAKD,GACjBK,EAAKrV,EAAGqC,IAAI+S,EAAMpV,EAAG2C,KAC3BmS,EAAM9U,EAAGwC,IAAIuS,EAAKF,GAClBA,EAAM7U,EAAGwC,IAAIqS,EAAKA,GAClBO,EAAOpV,EAAGwC,IAAIyS,EAAKJ,GACnBE,EAAM/U,EAAGmV,KAAKL,EAAKC,EAAKM,GACxBJ,EAAMjV,EAAGmV,KAAKC,EAAMH,EAAKI,EAC3B,CACA,MAAO,CAAEpV,QAASiV,EAAMrX,MAAOkX,EACjC,EACA,GAAI/U,EAAG2D,MAAQ3C,KAAQD,GAAK,CAE1B,IAAMwB,GAAMvC,EAAG2D,MAAQ5C,IAAOC,GACxBuT,EAAKvU,EAAG4P,KAAK5P,EAAGiD,IAAIH,IAC1BqR,EAAY,SAACtS,EAAMtD,GACjB,IAAIsW,EAAM7U,EAAGsC,IAAI/D,GACXuW,EAAM9U,EAAGwC,IAAIX,EAAGtD,GACtBsW,EAAM7U,EAAGwC,IAAIqS,EAAKC,GAClB,IAAIQ,EAAKtV,EAAGqB,IAAIwT,EAAKtS,GACrB+S,EAAKtV,EAAGwC,IAAI8S,EAAIR,GAChB,IAAMnF,EAAK3P,EAAGwC,IAAI8S,EAAIf,GAChBQ,EAAM/U,EAAGwC,IAAIxC,EAAGsC,IAAIgT,GAAK/W,GACzB2W,EAAOlV,EAAGqC,IAAI0S,EAAKlT,GAEzB,MAAO,CAAE5B,QAASiV,EAAMrX,MADhBmC,EAAGmV,KAAKxF,EAAI2F,EAAIJ,GAE1B,CACF,CAGA,OAAOf,CACT,CAgBoBoB,CAAevV,EAAI8G,EAAKhE,GAC1C,IAAK9C,EAAGyJ,MAAO,MAAM,IAAIpP,MAAM,gCAG/B,OAAO,SAACwH,GAEN,IAAIgT,EAAKC,EAAKC,EAAKE,EAAKD,EAAKQ,EAAK/T,EAAGG,EACrCiT,EAAM7U,EAAGsC,IAAIT,GACbgT,EAAM7U,EAAGwC,IAAIqS,EAAK/N,EAAKhE,GACvBgS,EAAM9U,EAAGsC,IAAIuS,GACbC,EAAM9U,EAAGmI,IAAI2M,EAAKD,GAClBE,EAAM/U,EAAGmI,IAAI2M,EAAK9U,EAAG2C,KACrBoS,EAAM/U,EAAGwC,IAAIuS,EAAKjO,EAAKoN,GACvBe,EAAMjV,EAAGmV,KAAKrO,EAAKhE,EAAG9C,EAAGiD,IAAI6R,IAAO9U,EAAGqC,IAAIyS,EAAK9U,EAAGmD,OACnD8R,EAAMjV,EAAGwC,IAAIyS,EAAKnO,EAAKmN,GACvBa,EAAM9U,EAAGsC,IAAIyS,GACbS,EAAMxV,EAAGsC,IAAI2S,GACbD,EAAMhV,EAAGwC,IAAIgT,EAAK1O,EAAKmN,GACvBa,EAAM9U,EAAGmI,IAAI2M,EAAKE,GAClBF,EAAM9U,EAAGwC,IAAIsS,EAAKC,GAClBS,EAAMxV,EAAGwC,IAAIgT,EAAKP,GAClBD,EAAMhV,EAAGwC,IAAIgT,EAAK1O,EAAKoN,GACvBY,EAAM9U,EAAGmI,IAAI2M,EAAKE,GAClBvT,EAAIzB,EAAGwC,IAAIqS,EAAKE,GAChB,MAA2BZ,EAAUW,EAAKU,GAAlCvV,EAAO,EAAPA,QAASpC,EAAK,EAALA,MACjB+D,EAAI5B,EAAGwC,IAAIqS,EAAKhT,GAChBD,EAAI5B,EAAGwC,IAAIZ,EAAG/D,GACd4D,EAAIzB,EAAGmV,KAAK1T,EAAGsT,EAAK9U,GACpB2B,EAAI5B,EAAGmV,KAAKvT,EAAG/D,EAAOoC,GACtB,IAAMoV,EAAKrV,EAAGyJ,MAAO5H,KAAO7B,EAAGyJ,MAAO7H,GAGtC,OAFAA,EAAI5B,EAAGmV,KAAKnV,EAAGiD,IAAIrB,GAAIA,EAAGyT,GAEnB,CAAE5T,EADTA,EAAIzB,EAAGyV,IAAIhU,EAAGwT,GACFrT,EAAAA,EACd,CACF,CC3rCA,IAAM8T,GAAQzZ,EAGd,SAAS0Z,GAAM9X,EAAepD,GAC5B,GAAIoD,EAAQ,GAAKA,GAAS,GAAM,EAAIpD,EAClC,MAAM,IAAIJ,MAAM,yBAAD,OAA0BwD,EAAK,mBAAWpD,IAG3D,IADA,IAAMmC,EAAMrC,MAAMC,KAAK,CAAEC,OAAAA,IAAUiE,KAAK,GAC/B/D,EAAIF,EAAS,EAAGE,GAAK,EAAGA,IAC/BiC,EAAIjC,GAAa,IAARkD,EACTA,KAAW,EAEb,OAAO,IAAI7D,WAAW4C,EACxB,CAEA,SAASgZ,GAAO7b,EAAeoD,GAE7B,IADA,IAAMe,EAAM,IAAIlE,WAAWD,EAAEU,QACpBE,EAAI,EAAGA,EAAIZ,EAAEU,OAAQE,IAC5BuD,EAAIvD,GAAKZ,EAAEY,GAAKwC,EAAExC,GAEpB,OAAOuD,CACT,CAEA,SAAS2X,GAAKzb,GACZ,IAAKwF,OAAOD,cAAcvF,GAAO,MAAM,IAAIC,MAAM,kBACnD,CA0EM,SAAUyb,GAAcC,EAAiBC,EAAeC,GAC5D7V,EAAe6V,EAAS,CACtBC,IAAK,qBACLjS,EAAG,SACHjC,EAAG,gBACHxD,EAAG,gBACH0B,KAAM,SAER,IAAQ+D,EAAqCgS,EAArChS,EAAGzF,EAAkCyX,EAAlCzX,EAAGwD,EAA+BiU,EAA/BjU,EAAG9B,EAA4B+V,EAA5B/V,KAAMiW,EAAsBF,EAAtBE,OAAaC,EAASH,EAAdC,IAC/B/b,EAAO4b,GACPF,GAAKG,GACL,IAIIK,EAJEH,EAAsB,kBAATE,EAAoB/Y,EAAY+Y,GAAQA,EACrDE,EAAQrS,EAAErJ,SAAS,GAAGH,OACtB8b,EAAIvR,KAAKC,MAAMqR,EAAQ9X,GAAK,GAC5BgY,EAAeR,EAAQhU,EAAIuU,EAEjC,GAAe,QAAXJ,EACFE,EAvFE,SACJN,EACAG,EACAO,EACAC,GAEAvc,EAAO4b,GACP5b,EAAO+b,GACPL,GAAKY,GAEDP,EAAIzb,OAAS,MAAKyb,EAAMQ,EAAE5Z,EAAYO,EAAY,qBAAsB6Y,KAC5E,IAAmBS,EAAqCD,EAAhDvW,UAAiCyW,EAAeF,EAAzBG,SACzBC,EAAM9R,KAAKC,KAAKwR,EAAaE,GACnC,GAAIG,EAAM,IAAK,MAAM,IAAIzc,MAAM,sBAC/B,IAAM0c,EAAYja,EAAYoZ,EAAKP,GAAMO,EAAIzb,OAAQ,IAC/Cuc,EAAQrB,GAAM,EAAGiB,GACjBK,EAAYtB,GAAMc,EAAY,GAC9BtZ,EAAI,IAAI5C,MAAkBuc,GAC1BI,EAAMR,EAAE5Z,EAAYka,EAAOjB,EAAKkB,EAAWtB,GAAM,EAAG,GAAIoB,IAC9D5Z,EAAE,GAAKuZ,EAAE5Z,EAAYoa,EAAKvB,GAAM,EAAG,GAAIoB,IACvC,IAAK,IAAIpc,EAAI,EAAGA,GAAKmc,EAAKnc,IAAK,CAC7B,IAAMwc,EAAO,CAACvB,GAAOsB,EAAK/Z,EAAExC,EAAI,IAAKgb,GAAMhb,EAAI,EAAG,GAAIoc,GACtD5Z,EAAExC,GAAK+b,EAAE5Z,EAAAA,WAAY,EAAGqa,GAC1B,CAEA,OAD4Bra,EAAAA,WAAY,EAAGK,GAChB8B,MAAM,EAAGwX,EACtC,CA6DUW,CAAmBrB,EAAKG,EAAKM,EAActW,QAC5C,GAAe,QAAXiW,EACTE,EAxDE,SACJN,EACAG,EACAO,EACAjY,EACAkY,GAOA,GALAvc,EAAO4b,GACP5b,EAAO+b,GACPL,GAAKY,GAGDP,EAAIzb,OAAS,IAAK,CACpB,IAAM4c,EAAQrS,KAAKC,KAAM,EAAIzG,EAAK,GAClC0X,EAAMQ,EAAEY,OAAO,CAAED,MAAAA,IAASE,OAAOla,EAAY,sBAAsBka,OAAOrB,GAAKsB,QACjF,CACA,GAAIf,EAAa,OAASP,EAAIzb,OAAS,IACrC,MAAM,IAAIJ,MAAM,0CAClB,OACEqc,EAAEY,OAAO,CAAED,MAAOZ,IACfc,OAAOxB,GACPwB,OAAO5B,GAAMc,EAAY,IAEzBc,OAAOrB,GACPqB,OAAO5B,GAAMO,EAAIzb,OAAQ,IACzB+c,QAEP,CA6BUC,CAAmB1B,EAAKG,EAAKM,EAAchY,EAAG0B,OAC/C,IAAe,mBAAXiW,EAIT,MAAM,IAAI9b,MAAM,iCAFhBgc,EAAMN,CAGR,CAEA,IADA,IAAMlU,EAAI,IAAItH,MAAMyb,GACXrb,EAAI,EAAGA,EAAIqb,EAAOrb,IAAK,CAE9B,IADA,IAAMkC,EAAI,IAAItC,MAAMyH,GACX0V,EAAI,EAAGA,EAAI1V,EAAG0V,IAAK,CAC1B,IAAMC,EAAapB,GAAKmB,EAAI/c,EAAIqH,GAC1B4V,EAAKvB,EAAInQ,SAASyR,EAAYA,EAAapB,GACjD1Z,EAAE6a,GAAKvW,EAAIuU,GAAMkC,GAAK3T,EACxB,CACApC,EAAElH,GAAKkC,CACT,CACA,OAAOgF,CACT,iBCvJA,IAAMgW,GAAale,OAAO,sEACpBme,GAAane,OAAO,sEACpBC,GAAMD,OAAO,GACbE,GAAMF,OAAO,GACboe,GAAa,SAAChe,EAAWoD,GAAS,OAAMpD,EAAIoD,EAAItD,IAAOsD,CAAC,EAM9D,SAAS6a,GAAQpW,GACf,IAAMM,EAAI2V,GAEJ9W,EAAMpH,OAAO,GAAIse,EAAMte,OAAO,GAAIue,EAAOve,OAAO,IAAKwe,EAAOxe,OAAO,IAEnEye,EAAOze,OAAO,IAAK0e,EAAO1e,OAAO,IAAK2e,EAAO3e,OAAO,IACpD4e,EAAM3W,EAAIA,EAAIA,EAAKM,EACnBgI,EAAMqO,EAAKA,EAAK3W,EAAKM,EACrBsW,EAAMhX,EAAK0I,EAAInJ,EAAKmB,GAAKgI,EAAMhI,EAC/BuW,EAAMjX,EAAKgX,EAAIzX,EAAKmB,GAAKgI,EAAMhI,EAC/BwW,EAAOlX,EAAKiX,EAAI5e,GAAKqI,GAAKqW,EAAMrW,EAChCyW,EAAOnX,EAAKkX,EAAKR,EAAMhW,GAAKwW,EAAOxW,EACnC0W,EAAOpX,EAAKmX,EAAKR,EAAMjW,GAAKyW,EAAOzW,EACnC2W,EAAOrX,EAAKoX,EAAKP,EAAMnW,GAAK0W,EAAO1W,EACnC4W,EAAQtX,EAAKqX,EAAKP,EAAMpW,GAAK2W,EAAO3W,EACpC6W,EAAQvX,EAAKsX,EAAMT,EAAMnW,GAAK0W,EAAO1W,EACrC8W,EAAQxX,EAAKuX,EAAMhY,EAAKmB,GAAKgI,EAAMhI,EACnCqI,EAAM/I,EAAKwX,EAAMZ,EAAMlW,GAAKyW,EAAOzW,EACnCkB,EAAM5B,EAAK+I,EAAI0N,EAAK/V,GAAKqW,EAAMrW,EAC/BE,EAAOZ,EAAK4B,EAAIvJ,GAAKqI,GAC3B,IAAKlC,GAAGqC,IAAIrC,GAAGsC,IAAIF,GAAOR,GAAI,MAAM,IAAIvH,MAAM,2BAC9C,OAAO+H,CACT,CAEA,IAAMpC,GJ8SA,SACJ2D,EACAlG,GAEmC,IADnC8T,EAAO,UAAH,8CACJ0H,EAAAA,UAAAA,OAAAA,QAAAA,IAAAA,UAAAA,GAAAA,UAAAA,GAAiC,CAAC,EAElC,GAAItV,GAASjK,EAAK,MAAM,IAAIW,MAAM,iCAAD,OAAkCsJ,IACnE,MAAiDiB,GAAQjB,EAAOlG,GAA5CqG,EAAI,EAAhBe,WAA+BhB,EAAK,EAAlBkB,YAC1B,GAAIlB,EAAQ,KAAM,MAAM,IAAIxJ,MAAM,mDAClC,IAAM6e,EAAQjX,EAAO0B,GACfK,EAAuBnD,OAAO6E,OAAO,CACzC/B,MAAAA,EACAG,KAAAA,EACAD,MAAAA,EACAD,KAAM9F,EAAQgG,GACdX,KAAMzJ,EACNiJ,IAAK/I,EACL0d,OAAQ,SAACpc,GAAG,OAAKiG,EAAIjG,EAAKyI,EAAM,EAChC1D,QAAS,SAAC/E,GACR,GAAmB,kBAARA,EACT,MAAM,IAAIb,MAAM,+CAAD,cAAuDa,IACxE,OAAOxB,GAAOwB,GAAOA,EAAMyI,CAC7B,EACAa,IAAK,SAACtJ,GAAG,OAAKA,IAAQxB,CAAG,EACzB+P,MAAO,SAACvO,GAAG,OAAMA,EAAMtB,KAASA,CAAG,EACnCqJ,IAAK,SAAC/H,GAAG,OAAKiG,GAAKjG,EAAKyI,EAAM,EAC9BtB,IAAK,SAAC8W,EAAKC,GAAG,OAAKD,IAAQC,CAAG,EAE9B9W,IAAK,SAACpH,GAAG,OAAKiG,EAAIjG,EAAMA,EAAKyI,EAAM,EACnCwE,IAAK,SAACgR,EAAKC,GAAG,OAAKjY,EAAIgY,EAAMC,EAAKzV,EAAM,EACxCjB,IAAK,SAACyW,EAAKC,GAAG,OAAKjY,EAAIgY,EAAMC,EAAKzV,EAAM,EACxCnB,IAAK,SAAC2W,EAAKC,GAAG,OAAKjY,EAAIgY,EAAMC,EAAKzV,EAAM,EACxCtC,IAAK,SAACnG,EAAKoG,GAAK,OAAKyC,GAAMC,EAAG9I,EAAKoG,EAAM,EACzCmU,IAAK,SAAC0D,EAAKC,GAAG,OAAKjY,EAAIgY,EAAMzX,EAAO0X,EAAKzV,GAAQA,EAAM,EAGvD0V,KAAM,SAACne,GAAG,OAAKA,EAAMA,CAAG,EACxBoe,KAAM,SAACH,EAAKC,GAAG,OAAKD,EAAMC,CAAG,EAC7BG,KAAM,SAACJ,EAAKC,GAAG,OAAKD,EAAMC,CAAG,EAC7BI,KAAM,SAACL,EAAKC,GAAG,OAAKD,EAAMC,CAAG,EAE7B1U,IAAK,SAACxJ,GAAG,OAAKwG,EAAOxG,EAAKyI,EAAM,EAChCiM,KAAMqJ,EAAMrJ,MAAS,SAACvT,GAAC,OAAK6c,EAAMlV,EAAG3H,EAAE,EACvC4O,YAAa,SAACwO,GAAG,OAAKtV,GAAcH,EAAGyV,EAAI,EAG3CtE,KAAM,SAACpb,EAAGoD,EAAGgQ,GAAC,OAAMA,EAAIhQ,EAAIpD,CAAC,EAC7BuN,QAAS,SAACpM,GAAG,OAAMqW,EAAOhV,EAAgBrB,EAAK2I,GAASzH,EAAgBlB,EAAK2I,EAAM,EACnFwD,UAAW,SAACtM,GACV,GAAIA,EAAMN,SAAWoJ,EACnB,MAAM,IAAIxJ,MAAM,0BAAD,OAA2BwJ,EAAK,iBAAS9I,EAAMN,SAChE,OAAO8W,EAAOrV,EAAgBnB,GAASkB,EAAgBlB,EACzD,IAEF,OAAO8F,OAAO6E,OAAO1B,EACvB,CIrWW0V,CAAM7B,QAAY7b,OAAWA,EAAW,CAAE4T,KAAMoI,KAE9C2B,GC9BP,SAAsB/K,EAAoBgL,GAC9C,IAAMtC,EAAS,SAACpX,GAAW,OAAKyO,IAAY,oBAAKC,GAV7C,SAAkB1O,GACtB,MAAO,CACLA,KAAAA,EACA2O,KAAM,SAACtG,GAAe,2BAAKsR,EAAkB,iCAAlBA,EAAkB,yBAAKhL,EAAAA,GAAAA,GAAK3O,EAAMqI,EAAKzL,EAAAA,GAAAA,WAAY,EAAG+c,GAAM,EACvF/K,YAAAA,EAAAA,GAEJ,CAIgEgL,CAAQ5Z,IAAQ,EAC9E,OAAOW,OAAO6E,QAAO,oBAAK4R,EAAOsC,IAAQ,IAAEtC,OAAAA,IAC7C,CD2ByByC,CACvB,CACEhgB,EAAGJ,OAAO,GACVwD,EAAGxD,OAAO,GACVqG,GAAAA,GACA3D,EAAGyb,GAEHtS,GAAI7L,OAAO,iFACX8L,GAAI9L,OAAO,iFACXgF,EAAGhF,OAAO,GACVsV,MAAM,EAON1H,KAAM,CACJC,KAAM7N,OAAO,sEACb8N,YAAa,SAACjJ,GACZ,IAAMnC,EAAIyb,GACJkC,EAAKrgB,OAAO,sCACZsgB,GAAMrgB,GAAMD,OAAO,sCACnBugB,EAAKvgB,OAAO,uCACZ4e,EAAKyB,EACLG,EAAYxgB,OAAO,uCAEnB4I,EAAKwV,GAAWQ,EAAK/Z,EAAGnC,GACxBkY,EAAKwD,IAAYkC,EAAKzb,EAAGnC,GAC3BiP,EAAKnK,EAAI3C,EAAI+D,EAAKyX,EAAKzF,EAAK2F,EAAI7d,GAChCmP,EAAKrK,GAAKoB,EAAK0X,EAAK1F,EAAKgE,EAAIlc,GAC3BgP,EAAQC,EAAK6O,EACb5O,EAAQC,EAAK2O,EAGnB,GAFI9O,IAAOC,EAAKjP,EAAIiP,GAChBC,IAAOC,EAAKnP,EAAImP,GAChBF,EAAK6O,GAAa3O,EAAK2O,EACzB,MAAM,IAAI9f,MAAM,uCAAyCmE,GAE3D,MAAO,CAAE6M,MAAAA,EAAOC,GAAAA,EAAIC,MAAAA,EAAOC,GAAAA,EAC7B,IAGJ4O,EAAAA,GAKI1gB,GAAMC,OAAO,GACb0gB,GAAK,SAAC5Y,GAAS,MAAkB,kBAANA,GAAkB/H,GAAM+H,GAAKA,EAAIoW,EAAU,EAGtEyC,GAAsD,CAAC,EAC7D,SAASC,GAAWC,GAClB,IAAIC,EAAOH,GAAqBE,GAChC,QAAaxe,IAATye,EAAoB,CACtB,IAAMC,GAAON,EAAAA,EAAAA,GAAOpgB,WAAWQ,KAAKggB,GAAK,SAACrN,GAAC,OAAKA,EAAErR,WAAW,EAAE,KAC/D2e,EAAO3d,EAAY4d,EAAMA,GACzBJ,GAAqBE,GAAOC,CAC9B,CAAC,2BANiCE,EAAsB,iCAAtBA,EAAsB,kBAOxD,OAAOP,EAAAA,EAAAA,GAAOtd,EAAAA,WAAY,EAAD,CAAC2d,GAAI,OAAKE,IACrC,CAGA,IAAMC,GAAe,SAAChT,GAAwB,OAAKA,EAAMmF,YAAW,GAAM9N,MAAM,EAAE,EAC5E4b,GAAW,SAACxe,GAAS,OAAKD,EAAgBC,EAAG,GAAG,EAChDye,GAAO,SAACrZ,GAAS,OAAKN,EAAIM,EAAGoW,GAAW,EACxCvI,GAAO,SAAC7N,GAAS,OAAKN,EAAIM,EAAGqW,GAAW,EACxC/O,GAAQ4Q,GAAUjL,gBAKxB,SAASqM,GAAoBC,GAC3B,IAAIC,EAAKtB,GAAUvI,MAAM9I,uBAAuB0S,GAC5C/W,EAAI8E,GAAMgK,eAAekI,GAE7B,MAAO,CAAErP,OADM3H,EAAEwL,WAAawL,EAAK3L,IAAM2L,GAChBlgB,MAAO6f,GAAa3W,GAC/C,CAKA,SAASiX,GAAOzZ,GACd,IAAK4Y,GAAG5Y,GAAI,MAAM,IAAIpH,MAAM,yBAC5B,IAAM8gB,EAAKL,GAAKrZ,EAAIA,GAEhBG,EAAIoW,GADE8C,GAAKK,EAAK1Z,EAAI9H,OAAO,KAE3BiI,EAAI/H,KAAQH,KAAKkI,EAAIkZ,IAAMlZ,IAC/B,IAAMqC,EAAI,IAAI8E,GAAMtH,EAAGG,EAAGhI,IAE1B,OADAqK,EAAE6I,iBACK7I,CACT,CAIA,SAASmX,KAA+B,2BAAlBjE,EAAkB,yBAAlBA,EAAkB,gBACtC,OAAO7H,GAAKrT,EAAgBse,GAAU,cAAC,qBAAmB,OAAKpD,KACjE,CAKA,SAASkE,GAAoBpO,GAC3B,OAAO8N,GAAoB9N,GAAYlS,KACzC,CAMA,SAASugB,GACPvL,EACA9C,GAC8B,IAA9BsO,EAAAA,UAAAA,OAAAA,QAAAA,IAAAA,UAAAA,GAAAA,UAAAA,IAAezM,EAAAA,EAAAA,IAAY,IAErB9M,EAAIvF,EAAY,UAAWsT,GACjC,EAAiCgL,GAAoB9N,GAAtCjE,EAAE,EAATjO,MAAmBmJ,EAAC,EAAT0H,OACb7R,EAAI0C,EAAY,UAAW8e,EAAS,IACpCC,EAAIX,GAAS3W,EAAIjI,EAAgBse,GAAW,cAAexgB,KAC3D0hB,EAAOlB,GAAW,gBAAiBiB,EAAGxS,EAAIhH,GAC1C0Z,EAAKpM,GAAKrT,EAAgBwf,IAChC,GAAIC,IAAOhiB,GAAK,MAAM,IAAIW,MAAM,0BAChC,MAAiC0gB,GAAoBW,GAAtCC,EAAE,EAAT5gB,MAAmByD,EAAC,EAAToN,OACb/O,EAAIue,GAAUO,EAAI3S,EAAIhH,GACtBwE,EAAM,IAAIxM,WAAW,IAI3B,GAHAwM,EAAIvJ,IAAI0e,EAAI,GACZnV,EAAIvJ,IAAI4d,GAASvL,GAAK9Q,EAAI3B,EAAIqH,IAAK,KAE9B0X,GAAcpV,EAAKxE,EAAGgH,GAAK,MAAM,IAAI3O,MAAM,oCAChD,OAAOmM,CACT,CAMA,SAASoV,GAAcpI,EAAgBzD,EAAc0D,GACnD,IArEe7Q,EAAsB7I,EAAWoD,EAnBtCsE,EAwFJ+E,EAAM/J,EAAY,YAAa+W,EAAW,IAC1CxR,EAAIvF,EAAY,UAAWsT,GAC3B8L,EAAMpf,EAAY,YAAagX,EAAW,IAChD,IACE,IAAMvR,EAAIgZ,GAAOjf,EAAgB4f,IAC3B9Z,EAAI9F,EAAgBuK,EAAIN,SAAS,EAAG,KAC1C,IAAKmU,GAAGtY,GAAI,OAAO,EACnB,IAAMuE,EAAIrK,EAAgBuK,EAAIN,SAAS,GAAI,KAC3C,KAhGmC,kBAA3BzE,EAgGA6E,IAhGuC5M,GAAM+H,GAAKA,EAAIqW,IAgGlD,OAAO,EACnB,IAAMjb,EAAIue,GAAUP,GAAS9Y,GAAI6Y,GAAa1Y,GAAIF,GAC5C2O,GA/EO/N,EA+EKV,EA/EiBnI,EA+EduM,EA/EyBnJ,EA+EtBmS,IAAMzS,GA9EhCkM,GAAMqD,KAAK4E,qBAAqBpO,EAAG7I,EAAGoD,IA+EpC,SAAKwT,IAAMA,EAAElB,YAAckB,EAAE7I,WAAWrG,IAAMM,EAIhD,CAFE,MAAO2G,GACP,OAAO,CACT,CACF,CAEO,IAAMoT,GAA2B,iBAAO,CAC7ChJ,aAAcuI,GACdlI,KAAMmI,GACN/H,OAAQqI,GACRxK,MAAO,CACLE,iBAAkBqI,GAAUvI,MAAME,iBAClC4J,OAAAA,GACAN,aAAAA,GACAxe,gBAAAA,EACAH,gBAAAA,EACAse,WAAAA,GACApZ,IAAAA,GAEH,CAbuC,GAelC4a,GAA0B,kBDrD1B,SAA6Cjc,EAAU4D,GAE3D,IAAMsY,EAAQtY,EAAIA,KAAI,SAAC/I,GAAC,OAAKJ,MAAMC,KAAKG,GAAGwB,SAAS,IACpD,OAAO,SAACsF,EAAMG,GACZ,MAAiCoa,EAAMtY,KAAI,SAACpE,GAAG,OAC7CA,EAAImE,QAAO,SAACc,EAAK5J,GAAC,OAAKmF,EAAMqI,IAAIrI,EAAM0C,IAAI+B,EAAK9C,GAAI9G,EAAE,GAAC,IACxD,eAFMshB,EAAI,KAAEC,EAAI,KAAEC,EAAI,KAAEC,EAAI,KAK7B,OAFA3a,EAAI3B,EAAM2V,IAAIwG,EAAMC,GACpBta,EAAI9B,EAAM0C,IAAIZ,EAAG9B,EAAM2V,IAAI0G,EAAMC,IAC1B,CAAE3a,EAAAA,EAAGG,EAAAA,EACd,CACF,CC2CEya,CACErc,GACA,CAEE,CACE,qEACA,oEACA,qEACA,sEAGF,CACE,qEACA,qEACA,sEAGF,CACE,qEACA,qEACA,qEACA,sEAGF,CACE,qEACA,qEACA,qEACA,uEAEF0D,KAAI,SAAC/I,GAAC,OAAKA,EAAE+I,KAAI,SAACgU,GAAC,OAAK/d,OAAO+d,EAAE,GAAC,IACrC,CAhC6B,GAiC1B4E,GAA0B,kBAC9BtI,GAAoBhU,GAAI,CACtBiU,EAAGta,OAAO,sEACVua,EAAGva,OAAO,QACVmJ,EAAG9C,GAAGsX,OAAO3d,OAAO,SACpB,CAL4B,GAM1B4iB,GAAuB,kBD9DvB,SACJxT,EACAyT,EACAC,GAEA,GAA0B,oBAAfD,EAA2B,MAAM,IAAIniB,MAAM,gCACtD,MAAO,CAGLqiB,YAAW,SAAC3G,EAAiBE,GAC3B,IAAMpU,EAAIiU,GAAcC,EAAK,GAAG,oBAAK0G,GAAG,IAAEvG,IAAKuG,EAAIvG,KAAQD,IACrD0G,EAAK5T,EAAMmC,WAAWsR,EAAW3a,EAAE,KACnCiP,EAAK/H,EAAMmC,WAAWsR,EAAW3a,EAAE,KACnCK,EAAIya,EAAGxU,IAAI2I,GAAI3J,gBAErB,OADAjF,EAAE4K,iBACK5K,CACT,EAIA0a,cAAa,SAAC7G,EAAiBE,GAC7B,IAAMpU,EAAIiU,GAAcC,EAAK,GAAG,oBAAK0G,GAAG,IAAEvG,IAAKuG,EAAII,WAAc5G,IAC3D/T,EAAI6G,EAAMmC,WAAWsR,EAAW3a,EAAE,KAAKsF,gBAE7C,OADAjF,EAAE4K,iBACK5K,CACT,EAEJ,CCoCE4a,CACEnD,GAAUjL,iBACV,SAACqO,GACC,MAAiBT,GAAOtc,GAAGsX,OAAOyF,EAAQ,KAAlCtb,EAAC,EAADA,EAAGG,EAAC,EAADA,EACX,OAAOma,GAAOta,EAAGG,EACnB,GACA,CACEsU,IAAK,iCACL2G,UAAW,iCACX5Y,EAAGjE,GAAG2D,MACN3B,EAAG,EACHxD,EAAG,IACH2X,OAAQ,MACRjW,KAAMka,EAAAA,GAET,CAhB0B,GAiBhBsC,GAA+B,kBAAMH,GAAIG,WAAW,CAArB,GAC/BE,GAAiC,kBAAML,GAAIK,aAAa,CAAvB","sources":["../node_modules/viem/node_modules/@noble/curves/src/abstract/utils.ts","../node_modules/viem/node_modules/@noble/curves/src/abstract/modular.ts","../node_modules/viem/node_modules/@noble/curves/src/abstract/curve.ts","../node_modules/viem/node_modules/@noble/curves/src/abstract/weierstrass.ts","../node_modules/viem/node_modules/@noble/curves/src/abstract/hash-to-curve.ts","../node_modules/viem/node_modules/@noble/curves/src/secp256k1.ts","../node_modules/viem/node_modules/@noble/curves/src/_shortw_utils.ts"],"sourcesContent":["/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// 100 lines of code in the file are duplicated from noble-hashes (utils).\n// This is OK: `abstract` directory does not use noble-hashes.\n// User may opt-in into using different hashing library. This way, noble-hashes\n// won't be included into their bundle.\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\nconst _2n = BigInt(2);\nexport type Hex = Uint8Array | string; // hex strings are accepted for simplicity\nexport type PrivKey = Hex | bigint; // bigints are accepted to ease learning curve\nexport type CHash = {\n  (message: Uint8Array | string): Uint8Array;\n  blockLen: number;\n  outputLen: number;\n  create(opts?: { dkLen?: number }): any; // For shake\n};\nexport type FHash = (message: Uint8Array | string) => Uint8Array;\n\nexport function isBytes(a: unknown): a is Uint8Array {\n  return (\n    a instanceof Uint8Array ||\n    (a != null && typeof a === 'object' && a.constructor.name === 'Uint8Array')\n  );\n}\n\nexport function abytes(item: unknown): void {\n  if (!isBytes(item)) throw new Error('Uint8Array expected');\n}\n\n// Array where index 0xf0 (240) is mapped to string 'f0'\nconst hexes = /* @__PURE__ */ Array.from({ length: 256 }, (_, i) =>\n  i.toString(16).padStart(2, '0')\n);\n/**\n * @example bytesToHex(Uint8Array.from([0xca, 0xfe, 0x01, 0x23])) // 'cafe0123'\n */\nexport function bytesToHex(bytes: Uint8Array): string {\n  abytes(bytes);\n  // pre-caching improves the speed 6x\n  let hex = '';\n  for (let i = 0; i < bytes.length; i++) {\n    hex += hexes[bytes[i]];\n  }\n  return hex;\n}\n\nexport function numberToHexUnpadded(num: number | bigint): string {\n  const hex = num.toString(16);\n  return hex.length & 1 ? `0${hex}` : hex;\n}\n\nexport function hexToNumber(hex: string): bigint {\n  if (typeof hex !== 'string') throw new Error('hex string expected, got ' + typeof hex);\n  // Big Endian\n  return BigInt(hex === '' ? '0' : `0x${hex}`);\n}\n\n// We use optimized technique to convert hex string to byte array\nconst asciis = { _0: 48, _9: 57, _A: 65, _F: 70, _a: 97, _f: 102 } as const;\nfunction asciiToBase16(char: number): number | undefined {\n  if (char >= asciis._0 && char <= asciis._9) return char - asciis._0;\n  if (char >= asciis._A && char <= asciis._F) return char - (asciis._A - 10);\n  if (char >= asciis._a && char <= asciis._f) return char - (asciis._a - 10);\n  return;\n}\n\n/**\n * @example hexToBytes('cafe0123') // Uint8Array.from([0xca, 0xfe, 0x01, 0x23])\n */\nexport function hexToBytes(hex: string): Uint8Array {\n  if (typeof hex !== 'string') throw new Error('hex string expected, got ' + typeof hex);\n  const hl = hex.length;\n  const al = hl / 2;\n  if (hl % 2) throw new Error('padded hex string expected, got unpadded hex of length ' + hl);\n  const array = new Uint8Array(al);\n  for (let ai = 0, hi = 0; ai < al; ai++, hi += 2) {\n    const n1 = asciiToBase16(hex.charCodeAt(hi));\n    const n2 = asciiToBase16(hex.charCodeAt(hi + 1));\n    if (n1 === undefined || n2 === undefined) {\n      const char = hex[hi] + hex[hi + 1];\n      throw new Error('hex string expected, got non-hex character \"' + char + '\" at index ' + hi);\n    }\n    array[ai] = n1 * 16 + n2;\n  }\n  return array;\n}\n\n// BE: Big Endian, LE: Little Endian\nexport function bytesToNumberBE(bytes: Uint8Array): bigint {\n  return hexToNumber(bytesToHex(bytes));\n}\nexport function bytesToNumberLE(bytes: Uint8Array): bigint {\n  abytes(bytes);\n  return hexToNumber(bytesToHex(Uint8Array.from(bytes).reverse()));\n}\n\nexport function numberToBytesBE(n: number | bigint, len: number): Uint8Array {\n  return hexToBytes(n.toString(16).padStart(len * 2, '0'));\n}\nexport function numberToBytesLE(n: number | bigint, len: number): Uint8Array {\n  return numberToBytesBE(n, len).reverse();\n}\n// Unpadded, rarely used\nexport function numberToVarBytesBE(n: number | bigint): Uint8Array {\n  return hexToBytes(numberToHexUnpadded(n));\n}\n\n/**\n * Takes hex string or Uint8Array, converts to Uint8Array.\n * Validates output length.\n * Will throw error for other types.\n * @param title descriptive title for an error e.g. 'private key'\n * @param hex hex string or Uint8Array\n * @param expectedLength optional, will compare to result array's length\n * @returns\n */\nexport function ensureBytes(title: string, hex: Hex, expectedLength?: number): Uint8Array {\n  let res: Uint8Array;\n  if (typeof hex === 'string') {\n    try {\n      res = hexToBytes(hex);\n    } catch (e) {\n      throw new Error(`${title} must be valid hex string, got \"${hex}\". Cause: ${e}`);\n    }\n  } else if (isBytes(hex)) {\n    // Uint8Array.from() instead of hash.slice() because node.js Buffer\n    // is instance of Uint8Array, and its slice() creates **mutable** copy\n    res = Uint8Array.from(hex);\n  } else {\n    throw new Error(`${title} must be hex string or Uint8Array`);\n  }\n  const len = res.length;\n  if (typeof expectedLength === 'number' && len !== expectedLength)\n    throw new Error(`${title} expected ${expectedLength} bytes, got ${len}`);\n  return res;\n}\n\n/**\n * Copies several Uint8Arrays into one.\n */\nexport function concatBytes(...arrays: Uint8Array[]): Uint8Array {\n  let sum = 0;\n  for (let i = 0; i < arrays.length; i++) {\n    const a = arrays[i];\n    abytes(a);\n    sum += a.length;\n  }\n  const res = new Uint8Array(sum);\n  for (let i = 0, pad = 0; i < arrays.length; i++) {\n    const a = arrays[i];\n    res.set(a, pad);\n    pad += a.length;\n  }\n  return res;\n}\n\n// Compares 2 u8a-s in kinda constant time\nexport function equalBytes(a: Uint8Array, b: Uint8Array) {\n  if (a.length !== b.length) return false;\n  let diff = 0;\n  for (let i = 0; i < a.length; i++) diff |= a[i] ^ b[i];\n  return diff === 0;\n}\n\n// Global symbols in both browsers and Node.js since v11\n// See https://github.com/microsoft/TypeScript/issues/31535\ndeclare const TextEncoder: any;\n\n/**\n * @example utf8ToBytes('abc') // new Uint8Array([97, 98, 99])\n */\nexport function utf8ToBytes(str: string): Uint8Array {\n  if (typeof str !== 'string') throw new Error(`utf8ToBytes expected string, got ${typeof str}`);\n  return new Uint8Array(new TextEncoder().encode(str)); // https://bugzil.la/1681809\n}\n\n// Bit operations\n\n/**\n * Calculates amount of bits in a bigint.\n * Same as `n.toString(2).length`\n */\nexport function bitLen(n: bigint) {\n  let len;\n  for (len = 0; n > _0n; n >>= _1n, len += 1);\n  return len;\n}\n\n/**\n * Gets single bit at position.\n * NOTE: first bit position is 0 (same as arrays)\n * Same as `!!+Array.from(n.toString(2)).reverse()[pos]`\n */\nexport function bitGet(n: bigint, pos: number) {\n  return (n >> BigInt(pos)) & _1n;\n}\n\n/**\n * Sets single bit at position.\n */\nexport function bitSet(n: bigint, pos: number, value: boolean) {\n  return n | ((value ? _1n : _0n) << BigInt(pos));\n}\n\n/**\n * Calculate mask for N bits. Not using ** operator with bigints because of old engines.\n * Same as BigInt(`0b${Array(i).fill('1').join('')}`)\n */\nexport const bitMask = (n: number) => (_2n << BigInt(n - 1)) - _1n;\n\n// DRBG\n\nconst u8n = (data?: any) => new Uint8Array(data); // creates Uint8Array\nconst u8fr = (arr: any) => Uint8Array.from(arr); // another shortcut\ntype Pred<T> = (v: Uint8Array) => T | undefined;\n/**\n * Minimal HMAC-DRBG from NIST 800-90 for RFC6979 sigs.\n * @returns function that will call DRBG until 2nd arg returns something meaningful\n * @example\n *   const drbg = createHmacDRBG<Key>(32, 32, hmac);\n *   drbg(seed, bytesToKey); // bytesToKey must return Key or undefined\n */\nexport function createHmacDrbg<T>(\n  hashLen: number,\n  qByteLen: number,\n  hmacFn: (key: Uint8Array, ...messages: Uint8Array[]) => Uint8Array\n): (seed: Uint8Array, predicate: Pred<T>) => T {\n  if (typeof hashLen !== 'number' || hashLen < 2) throw new Error('hashLen must be a number');\n  if (typeof qByteLen !== 'number' || qByteLen < 2) throw new Error('qByteLen must be a number');\n  if (typeof hmacFn !== 'function') throw new Error('hmacFn must be a function');\n  // Step B, Step C: set hashLen to 8*ceil(hlen/8)\n  let v = u8n(hashLen); // Minimal non-full-spec HMAC-DRBG from NIST 800-90 for RFC6979 sigs.\n  let k = u8n(hashLen); // Steps B and C of RFC6979 3.2: set hashLen, in our case always same\n  let i = 0; // Iterations counter, will throw when over 1000\n  const reset = () => {\n    v.fill(1);\n    k.fill(0);\n    i = 0;\n  };\n  const h = (...b: Uint8Array[]) => hmacFn(k, v, ...b); // hmac(k)(v, ...values)\n  const reseed = (seed = u8n()) => {\n    // HMAC-DRBG reseed() function. Steps D-G\n    k = h(u8fr([0x00]), seed); // k = hmac(k || v || 0x00 || seed)\n    v = h(); // v = hmac(k || v)\n    if (seed.length === 0) return;\n    k = h(u8fr([0x01]), seed); // k = hmac(k || v || 0x01 || seed)\n    v = h(); // v = hmac(k || v)\n  };\n  const gen = () => {\n    // HMAC-DRBG generate() function\n    if (i++ >= 1000) throw new Error('drbg: tried 1000 values');\n    let len = 0;\n    const out: Uint8Array[] = [];\n    while (len < qByteLen) {\n      v = h();\n      const sl = v.slice();\n      out.push(sl);\n      len += v.length;\n    }\n    return concatBytes(...out);\n  };\n  const genUntil = (seed: Uint8Array, pred: Pred<T>): T => {\n    reset();\n    reseed(seed); // Steps D-G\n    let res: T | undefined = undefined; // Step H: grind until k is in [1..n-1]\n    while (!(res = pred(gen()))) reseed();\n    reset();\n    return res;\n  };\n  return genUntil;\n}\n\n// Validating curves and fields\n\nconst validatorFns = {\n  bigint: (val: any) => typeof val === 'bigint',\n  function: (val: any) => typeof val === 'function',\n  boolean: (val: any) => typeof val === 'boolean',\n  string: (val: any) => typeof val === 'string',\n  stringOrUint8Array: (val: any) => typeof val === 'string' || isBytes(val),\n  isSafeInteger: (val: any) => Number.isSafeInteger(val),\n  array: (val: any) => Array.isArray(val),\n  field: (val: any, object: any) => (object as any).Fp.isValid(val),\n  hash: (val: any) => typeof val === 'function' && Number.isSafeInteger(val.outputLen),\n} as const;\ntype Validator = keyof typeof validatorFns;\ntype ValMap<T extends Record<string, any>> = { [K in keyof T]?: Validator };\n// type Record<K extends string | number | symbol, T> = { [P in K]: T; }\n\nexport function validateObject<T extends Record<string, any>>(\n  object: T,\n  validators: ValMap<T>,\n  optValidators: ValMap<T> = {}\n) {\n  const checkField = (fieldName: keyof T, type: Validator, isOptional: boolean) => {\n    const checkVal = validatorFns[type];\n    if (typeof checkVal !== 'function')\n      throw new Error(`Invalid validator \"${type}\", expected function`);\n\n    const val = object[fieldName as keyof typeof object];\n    if (isOptional && val === undefined) return;\n    if (!checkVal(val, object)) {\n      throw new Error(\n        `Invalid param ${String(fieldName)}=${val} (${typeof val}), expected ${type}`\n      );\n    }\n  };\n  for (const [fieldName, type] of Object.entries(validators)) checkField(fieldName, type!, false);\n  for (const [fieldName, type] of Object.entries(optValidators)) checkField(fieldName, type!, true);\n  return object;\n}\n// validate type tests\n// const o: { a: number; b: number; c: number } = { a: 1, b: 5, c: 6 };\n// const z0 = validateObject(o, { a: 'isSafeInteger' }, { c: 'bigint' }); // Ok!\n// // Should fail type-check\n// const z1 = validateObject(o, { a: 'tmp' }, { c: 'zz' });\n// const z2 = validateObject(o, { a: 'isSafeInteger' }, { c: 'zz' });\n// const z3 = validateObject(o, { test: 'boolean', z: 'bug' });\n// const z4 = validateObject(o, { a: 'boolean', z: 'bug' });\n","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// Utilities for modular arithmetics and finite fields\nimport {\n  bitMask,\n  numberToBytesBE,\n  numberToBytesLE,\n  bytesToNumberBE,\n  bytesToNumberLE,\n  ensureBytes,\n  validateObject,\n} from './utils.js';\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _3n = BigInt(3);\n// prettier-ignore\nconst _4n = BigInt(4), _5n = BigInt(5), _8n = BigInt(8);\n// prettier-ignore\nconst _9n = BigInt(9), _16n = BigInt(16);\n\n// Calculates a modulo b\nexport function mod(a: bigint, b: bigint): bigint {\n  const result = a % b;\n  return result >= _0n ? result : b + result;\n}\n/**\n * Efficiently raise num to power and do modular division.\n * Unsafe in some contexts: uses ladder, so can expose bigint bits.\n * @example\n * pow(2n, 6n, 11n) // 64n % 11n == 9n\n */\n// TODO: use field version && remove\nexport function pow(num: bigint, power: bigint, modulo: bigint): bigint {\n  if (modulo <= _0n || power < _0n) throw new Error('Expected power/modulo > 0');\n  if (modulo === _1n) return _0n;\n  let res = _1n;\n  while (power > _0n) {\n    if (power & _1n) res = (res * num) % modulo;\n    num = (num * num) % modulo;\n    power >>= _1n;\n  }\n  return res;\n}\n\n// Does x ^ (2 ^ power) mod p. pow2(30, 4) == 30 ^ (2 ^ 4)\nexport function pow2(x: bigint, power: bigint, modulo: bigint): bigint {\n  let res = x;\n  while (power-- > _0n) {\n    res *= res;\n    res %= modulo;\n  }\n  return res;\n}\n\n// Inverses number over modulo\nexport function invert(number: bigint, modulo: bigint): bigint {\n  if (number === _0n || modulo <= _0n) {\n    throw new Error(`invert: expected positive integers, got n=${number} mod=${modulo}`);\n  }\n  // Euclidean GCD https://brilliant.org/wiki/extended-euclidean-algorithm/\n  // Fermat's little theorem \"CT-like\" version inv(n) = n^(m-2) mod m is 30x slower.\n  let a = mod(number, modulo);\n  let b = modulo;\n  // prettier-ignore\n  let x = _0n, y = _1n, u = _1n, v = _0n;\n  while (a !== _0n) {\n    // JIT applies optimization if those two lines follow each other\n    const q = b / a;\n    const r = b % a;\n    const m = x - u * q;\n    const n = y - v * q;\n    // prettier-ignore\n    b = a, a = r, x = u, y = v, u = m, v = n;\n  }\n  const gcd = b;\n  if (gcd !== _1n) throw new Error('invert: does not exist');\n  return mod(x, modulo);\n}\n\n/**\n * Tonelli-Shanks square root search algorithm.\n * 1. https://eprint.iacr.org/2012/685.pdf (page 12)\n * 2. Square Roots from 1; 24, 51, 10 to Dan Shanks\n * Will start an infinite loop if field order P is not prime.\n * @param P field order\n * @returns function that takes field Fp (created from P) and number n\n */\nexport function tonelliShanks(P: bigint) {\n  // Legendre constant: used to calculate Legendre symbol (a | p),\n  // which denotes the value of a^((p-1)/2) (mod p).\n  // (a | p) ≡ 1    if a is a square (mod p)\n  // (a | p) ≡ -1   if a is not a square (mod p)\n  // (a | p) ≡ 0    if a ≡ 0 (mod p)\n  const legendreC = (P - _1n) / _2n;\n\n  let Q: bigint, S: number, Z: bigint;\n  // Step 1: By factoring out powers of 2 from p - 1,\n  // find q and s such that p - 1 = q*(2^s) with q odd\n  for (Q = P - _1n, S = 0; Q % _2n === _0n; Q /= _2n, S++);\n\n  // Step 2: Select a non-square z such that (z | p) ≡ -1 and set c ≡ zq\n  for (Z = _2n; Z < P && pow(Z, legendreC, P) !== P - _1n; Z++);\n\n  // Fast-path\n  if (S === 1) {\n    const p1div4 = (P + _1n) / _4n;\n    return function tonelliFast<T>(Fp: IField<T>, n: T) {\n      const root = Fp.pow(n, p1div4);\n      if (!Fp.eql(Fp.sqr(root), n)) throw new Error('Cannot find square root');\n      return root;\n    };\n  }\n\n  // Slow-path\n  const Q1div2 = (Q + _1n) / _2n;\n  return function tonelliSlow<T>(Fp: IField<T>, n: T): T {\n    // Step 0: Check that n is indeed a square: (n | p) should not be ≡ -1\n    if (Fp.pow(n, legendreC) === Fp.neg(Fp.ONE)) throw new Error('Cannot find square root');\n    let r = S;\n    // TODO: will fail at Fp2/etc\n    let g = Fp.pow(Fp.mul(Fp.ONE, Z), Q); // will update both x and b\n    let x = Fp.pow(n, Q1div2); // first guess at the square root\n    let b = Fp.pow(n, Q); // first guess at the fudge factor\n\n    while (!Fp.eql(b, Fp.ONE)) {\n      if (Fp.eql(b, Fp.ZERO)) return Fp.ZERO; // https://en.wikipedia.org/wiki/Tonelli%E2%80%93Shanks_algorithm (4. If t = 0, return r = 0)\n      // Find m such b^(2^m)==1\n      let m = 1;\n      for (let t2 = Fp.sqr(b); m < r; m++) {\n        if (Fp.eql(t2, Fp.ONE)) break;\n        t2 = Fp.sqr(t2); // t2 *= t2\n      }\n      // NOTE: r-m-1 can be bigger than 32, need to convert to bigint before shift, otherwise there will be overflow\n      const ge = Fp.pow(g, _1n << BigInt(r - m - 1)); // ge = 2^(r-m-1)\n      g = Fp.sqr(ge); // g = ge * ge\n      x = Fp.mul(x, ge); // x *= ge\n      b = Fp.mul(b, g); // b *= g\n      r = m;\n    }\n    return x;\n  };\n}\n\nexport function FpSqrt(P: bigint) {\n  // NOTE: different algorithms can give different roots, it is up to user to decide which one they want.\n  // For example there is FpSqrtOdd/FpSqrtEven to choice root based on oddness (used for hash-to-curve).\n\n  // P ≡ 3 (mod 4)\n  // √n = n^((P+1)/4)\n  if (P % _4n === _3n) {\n    // Not all roots possible!\n    // const ORDER =\n    //   0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaaabn;\n    // const NUM = 72057594037927816n;\n    const p1div4 = (P + _1n) / _4n;\n    return function sqrt3mod4<T>(Fp: IField<T>, n: T) {\n      const root = Fp.pow(n, p1div4);\n      // Throw if root**2 != n\n      if (!Fp.eql(Fp.sqr(root), n)) throw new Error('Cannot find square root');\n      return root;\n    };\n  }\n\n  // Atkin algorithm for q ≡ 5 (mod 8), https://eprint.iacr.org/2012/685.pdf (page 10)\n  if (P % _8n === _5n) {\n    const c1 = (P - _5n) / _8n;\n    return function sqrt5mod8<T>(Fp: IField<T>, n: T) {\n      const n2 = Fp.mul(n, _2n);\n      const v = Fp.pow(n2, c1);\n      const nv = Fp.mul(n, v);\n      const i = Fp.mul(Fp.mul(nv, _2n), v);\n      const root = Fp.mul(nv, Fp.sub(i, Fp.ONE));\n      if (!Fp.eql(Fp.sqr(root), n)) throw new Error('Cannot find square root');\n      return root;\n    };\n  }\n\n  // P ≡ 9 (mod 16)\n  if (P % _16n === _9n) {\n    // NOTE: tonelli is too slow for bls-Fp2 calculations even on start\n    // Means we cannot use sqrt for constants at all!\n    //\n    // const c1 = Fp.sqrt(Fp.negate(Fp.ONE)); //  1. c1 = sqrt(-1) in F, i.e., (c1^2) == -1 in F\n    // const c2 = Fp.sqrt(c1);                //  2. c2 = sqrt(c1) in F, i.e., (c2^2) == c1 in F\n    // const c3 = Fp.sqrt(Fp.negate(c1));     //  3. c3 = sqrt(-c1) in F, i.e., (c3^2) == -c1 in F\n    // const c4 = (P + _7n) / _16n;           //  4. c4 = (q + 7) / 16        # Integer arithmetic\n    // sqrt = (x) => {\n    //   let tv1 = Fp.pow(x, c4);             //  1. tv1 = x^c4\n    //   let tv2 = Fp.mul(c1, tv1);           //  2. tv2 = c1 * tv1\n    //   const tv3 = Fp.mul(c2, tv1);         //  3. tv3 = c2 * tv1\n    //   let tv4 = Fp.mul(c3, tv1);           //  4. tv4 = c3 * tv1\n    //   const e1 = Fp.equals(Fp.square(tv2), x); //  5.  e1 = (tv2^2) == x\n    //   const e2 = Fp.equals(Fp.square(tv3), x); //  6.  e2 = (tv3^2) == x\n    //   tv1 = Fp.cmov(tv1, tv2, e1); //  7. tv1 = CMOV(tv1, tv2, e1)  # Select tv2 if (tv2^2) == x\n    //   tv2 = Fp.cmov(tv4, tv3, e2); //  8. tv2 = CMOV(tv4, tv3, e2)  # Select tv3 if (tv3^2) == x\n    //   const e3 = Fp.equals(Fp.square(tv2), x); //  9.  e3 = (tv2^2) == x\n    //   return Fp.cmov(tv1, tv2, e3); //  10.  z = CMOV(tv1, tv2, e3)  # Select the sqrt from tv1 and tv2\n    // }\n  }\n\n  // Other cases: Tonelli-Shanks algorithm\n  return tonelliShanks(P);\n}\n\n// Little-endian check for first LE bit (last BE bit);\nexport const isNegativeLE = (num: bigint, modulo: bigint) => (mod(num, modulo) & _1n) === _1n;\n\n// Field is not always over prime: for example, Fp2 has ORDER(q)=p^m\nexport interface IField<T> {\n  ORDER: bigint;\n  BYTES: number;\n  BITS: number;\n  MASK: bigint;\n  ZERO: T;\n  ONE: T;\n  // 1-arg\n  create: (num: T) => T;\n  isValid: (num: T) => boolean;\n  is0: (num: T) => boolean;\n  neg(num: T): T;\n  inv(num: T): T;\n  sqrt(num: T): T;\n  sqr(num: T): T;\n  // 2-args\n  eql(lhs: T, rhs: T): boolean;\n  add(lhs: T, rhs: T): T;\n  sub(lhs: T, rhs: T): T;\n  mul(lhs: T, rhs: T | bigint): T;\n  pow(lhs: T, power: bigint): T;\n  div(lhs: T, rhs: T | bigint): T;\n  // N for NonNormalized (for now)\n  addN(lhs: T, rhs: T): T;\n  subN(lhs: T, rhs: T): T;\n  mulN(lhs: T, rhs: T | bigint): T;\n  sqrN(num: T): T;\n\n  // Optional\n  // Should be same as sgn0 function in\n  // [RFC9380](https://www.rfc-editor.org/rfc/rfc9380#section-4.1).\n  // NOTE: sgn0 is 'negative in LE', which is same as odd. And negative in LE is kinda strange definition anyway.\n  isOdd?(num: T): boolean; // Odd instead of even since we have it for Fp2\n  // legendre?(num: T): T;\n  pow(lhs: T, power: bigint): T;\n  invertBatch: (lst: T[]) => T[];\n  toBytes(num: T): Uint8Array;\n  fromBytes(bytes: Uint8Array): T;\n  // If c is False, CMOV returns a, otherwise it returns b.\n  cmov(a: T, b: T, c: boolean): T;\n}\n// prettier-ignore\nconst FIELD_FIELDS = [\n  'create', 'isValid', 'is0', 'neg', 'inv', 'sqrt', 'sqr',\n  'eql', 'add', 'sub', 'mul', 'pow', 'div',\n  'addN', 'subN', 'mulN', 'sqrN'\n] as const;\nexport function validateField<T>(field: IField<T>) {\n  const initial = {\n    ORDER: 'bigint',\n    MASK: 'bigint',\n    BYTES: 'isSafeInteger',\n    BITS: 'isSafeInteger',\n  } as Record<string, string>;\n  const opts = FIELD_FIELDS.reduce((map, val: string) => {\n    map[val] = 'function';\n    return map;\n  }, initial);\n  return validateObject(field, opts);\n}\n\n// Generic field functions\n\n/**\n * Same as `pow` but for Fp: non-constant-time.\n * Unsafe in some contexts: uses ladder, so can expose bigint bits.\n */\nexport function FpPow<T>(f: IField<T>, num: T, power: bigint): T {\n  // Should have same speed as pow for bigints\n  // TODO: benchmark!\n  if (power < _0n) throw new Error('Expected power > 0');\n  if (power === _0n) return f.ONE;\n  if (power === _1n) return num;\n  let p = f.ONE;\n  let d = num;\n  while (power > _0n) {\n    if (power & _1n) p = f.mul(p, d);\n    d = f.sqr(d);\n    power >>= _1n;\n  }\n  return p;\n}\n\n/**\n * Efficiently invert an array of Field elements.\n * `inv(0)` will return `undefined` here: make sure to throw an error.\n */\nexport function FpInvertBatch<T>(f: IField<T>, nums: T[]): T[] {\n  const tmp = new Array(nums.length);\n  // Walk from first to last, multiply them by each other MOD p\n  const lastMultiplied = nums.reduce((acc, num, i) => {\n    if (f.is0(num)) return acc;\n    tmp[i] = acc;\n    return f.mul(acc, num);\n  }, f.ONE);\n  // Invert last element\n  const inverted = f.inv(lastMultiplied);\n  // Walk from last to first, multiply them by inverted each other MOD p\n  nums.reduceRight((acc, num, i) => {\n    if (f.is0(num)) return acc;\n    tmp[i] = f.mul(acc, tmp[i]);\n    return f.mul(acc, num);\n  }, inverted);\n  return tmp;\n}\n\nexport function FpDiv<T>(f: IField<T>, lhs: T, rhs: T | bigint): T {\n  return f.mul(lhs, typeof rhs === 'bigint' ? invert(rhs, f.ORDER) : f.inv(rhs));\n}\n\n// This function returns True whenever the value x is a square in the field F.\nexport function FpIsSquare<T>(f: IField<T>) {\n  const legendreConst = (f.ORDER - _1n) / _2n; // Integer arithmetic\n  return (x: T): boolean => {\n    const p = f.pow(x, legendreConst);\n    return f.eql(p, f.ZERO) || f.eql(p, f.ONE);\n  };\n}\n\n// CURVE.n lengths\nexport function nLength(n: bigint, nBitLength?: number) {\n  // Bit size, byte size of CURVE.n\n  const _nBitLength = nBitLength !== undefined ? nBitLength : n.toString(2).length;\n  const nByteLength = Math.ceil(_nBitLength / 8);\n  return { nBitLength: _nBitLength, nByteLength };\n}\n\ntype FpField = IField<bigint> & Required<Pick<IField<bigint>, 'isOdd'>>;\n/**\n * Initializes a finite field over prime. **Non-primes are not supported.**\n * Do not init in loop: slow. Very fragile: always run a benchmark on a change.\n * Major performance optimizations:\n * * a) denormalized operations like mulN instead of mul\n * * b) same object shape: never add or remove keys\n * * c) Object.freeze\n * @param ORDER prime positive bigint\n * @param bitLen how many bits the field consumes\n * @param isLE (def: false) if encoding / decoding should be in little-endian\n * @param redef optional faster redefinitions of sqrt and other methods\n */\nexport function Field(\n  ORDER: bigint,\n  bitLen?: number,\n  isLE = false,\n  redef: Partial<IField<bigint>> = {}\n): Readonly<FpField> {\n  if (ORDER <= _0n) throw new Error(`Expected Field ORDER > 0, got ${ORDER}`);\n  const { nBitLength: BITS, nByteLength: BYTES } = nLength(ORDER, bitLen);\n  if (BYTES > 2048) throw new Error('Field lengths over 2048 bytes are not supported');\n  const sqrtP = FpSqrt(ORDER);\n  const f: Readonly<FpField> = Object.freeze({\n    ORDER,\n    BITS,\n    BYTES,\n    MASK: bitMask(BITS),\n    ZERO: _0n,\n    ONE: _1n,\n    create: (num) => mod(num, ORDER),\n    isValid: (num) => {\n      if (typeof num !== 'bigint')\n        throw new Error(`Invalid field element: expected bigint, got ${typeof num}`);\n      return _0n <= num && num < ORDER; // 0 is valid element, but it's not invertible\n    },\n    is0: (num) => num === _0n,\n    isOdd: (num) => (num & _1n) === _1n,\n    neg: (num) => mod(-num, ORDER),\n    eql: (lhs, rhs) => lhs === rhs,\n\n    sqr: (num) => mod(num * num, ORDER),\n    add: (lhs, rhs) => mod(lhs + rhs, ORDER),\n    sub: (lhs, rhs) => mod(lhs - rhs, ORDER),\n    mul: (lhs, rhs) => mod(lhs * rhs, ORDER),\n    pow: (num, power) => FpPow(f, num, power),\n    div: (lhs, rhs) => mod(lhs * invert(rhs, ORDER), ORDER),\n\n    // Same as above, but doesn't normalize\n    sqrN: (num) => num * num,\n    addN: (lhs, rhs) => lhs + rhs,\n    subN: (lhs, rhs) => lhs - rhs,\n    mulN: (lhs, rhs) => lhs * rhs,\n\n    inv: (num) => invert(num, ORDER),\n    sqrt: redef.sqrt || ((n) => sqrtP(f, n)),\n    invertBatch: (lst) => FpInvertBatch(f, lst),\n    // TODO: do we really need constant cmov?\n    // We don't have const-time bigints anyway, so probably will be not very useful\n    cmov: (a, b, c) => (c ? b : a),\n    toBytes: (num) => (isLE ? numberToBytesLE(num, BYTES) : numberToBytesBE(num, BYTES)),\n    fromBytes: (bytes) => {\n      if (bytes.length !== BYTES)\n        throw new Error(`Fp.fromBytes: expected ${BYTES}, got ${bytes.length}`);\n      return isLE ? bytesToNumberLE(bytes) : bytesToNumberBE(bytes);\n    },\n  } as FpField);\n  return Object.freeze(f);\n}\n\nexport function FpSqrtOdd<T>(Fp: IField<T>, elm: T) {\n  if (!Fp.isOdd) throw new Error(`Field doesn't have isOdd`);\n  const root = Fp.sqrt(elm);\n  return Fp.isOdd(root) ? root : Fp.neg(root);\n}\n\nexport function FpSqrtEven<T>(Fp: IField<T>, elm: T) {\n  if (!Fp.isOdd) throw new Error(`Field doesn't have isOdd`);\n  const root = Fp.sqrt(elm);\n  return Fp.isOdd(root) ? Fp.neg(root) : root;\n}\n\n/**\n * \"Constant-time\" private key generation utility.\n * Same as mapKeyToField, but accepts less bytes (40 instead of 48 for 32-byte field).\n * Which makes it slightly more biased, less secure.\n * @deprecated use mapKeyToField instead\n */\nexport function hashToPrivateScalar(\n  hash: string | Uint8Array,\n  groupOrder: bigint,\n  isLE = false\n): bigint {\n  hash = ensureBytes('privateHash', hash);\n  const hashLen = hash.length;\n  const minLen = nLength(groupOrder).nByteLength + 8;\n  if (minLen < 24 || hashLen < minLen || hashLen > 1024)\n    throw new Error(`hashToPrivateScalar: expected ${minLen}-1024 bytes of input, got ${hashLen}`);\n  const num = isLE ? bytesToNumberLE(hash) : bytesToNumberBE(hash);\n  return mod(num, groupOrder - _1n) + _1n;\n}\n\n/**\n * Returns total number of bytes consumed by the field element.\n * For example, 32 bytes for usual 256-bit weierstrass curve.\n * @param fieldOrder number of field elements, usually CURVE.n\n * @returns byte length of field\n */\nexport function getFieldBytesLength(fieldOrder: bigint): number {\n  if (typeof fieldOrder !== 'bigint') throw new Error('field order must be bigint');\n  const bitLength = fieldOrder.toString(2).length;\n  return Math.ceil(bitLength / 8);\n}\n\n/**\n * Returns minimal amount of bytes that can be safely reduced\n * by field order.\n * Should be 2^-128 for 128-bit curve such as P256.\n * @param fieldOrder number of field elements, usually CURVE.n\n * @returns byte length of target hash\n */\nexport function getMinHashLength(fieldOrder: bigint): number {\n  const length = getFieldBytesLength(fieldOrder);\n  return length + Math.ceil(length / 2);\n}\n\n/**\n * \"Constant-time\" private key generation utility.\n * Can take (n + n/2) or more bytes of uniform input e.g. from CSPRNG or KDF\n * and convert them into private scalar, with the modulo bias being negligible.\n * Needs at least 48 bytes of input for 32-byte private key.\n * https://research.kudelskisecurity.com/2020/07/28/the-definitive-guide-to-modulo-bias-and-how-to-avoid-it/\n * FIPS 186-5, A.2 https://csrc.nist.gov/publications/detail/fips/186/5/final\n * RFC 9380, https://www.rfc-editor.org/rfc/rfc9380#section-5\n * @param hash hash output from SHA3 or a similar function\n * @param groupOrder size of subgroup - (e.g. secp256k1.CURVE.n)\n * @param isLE interpret hash bytes as LE num\n * @returns valid private scalar\n */\nexport function mapHashToField(key: Uint8Array, fieldOrder: bigint, isLE = false): Uint8Array {\n  const len = key.length;\n  const fieldLen = getFieldBytesLength(fieldOrder);\n  const minLen = getMinHashLength(fieldOrder);\n  // No small numbers: need to understand bias story. No huge numbers: easier to detect JS timings.\n  if (len < 16 || len < minLen || len > 1024)\n    throw new Error(`expected ${minLen}-1024 bytes of input, got ${len}`);\n  const num = isLE ? bytesToNumberBE(key) : bytesToNumberLE(key);\n  // `mod(x, 11)` can sometimes produce 0. `mod(x, 10) + 1` is the same, but no 0\n  const reduced = mod(num, fieldOrder - _1n) + _1n;\n  return isLE ? numberToBytesLE(reduced, fieldLen) : numberToBytesBE(reduced, fieldLen);\n}\n","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// Abelian group utilities\nimport { IField, validateField, nLength } from './modular.js';\nimport { validateObject } from './utils.js';\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\n\nexport type AffinePoint<T> = {\n  x: T;\n  y: T;\n} & { z?: never; t?: never };\n\nexport interface Group<T extends Group<T>> {\n  double(): T;\n  negate(): T;\n  add(other: T): T;\n  subtract(other: T): T;\n  equals(other: T): boolean;\n  multiply(scalar: bigint): T;\n}\n\nexport type GroupConstructor<T> = {\n  BASE: T;\n  ZERO: T;\n};\nexport type Mapper<T> = (i: T[]) => T[];\n\n// Elliptic curve multiplication of Point by scalar. Fragile.\n// Scalars should always be less than curve order: this should be checked inside of a curve itself.\n// Creates precomputation tables for fast multiplication:\n// - private scalar is split by fixed size windows of W bits\n// - every window point is collected from window's table & added to accumulator\n// - since windows are different, same point inside tables won't be accessed more than once per calc\n// - each multiplication is 'Math.ceil(CURVE_ORDER / 𝑊) + 1' point additions (fixed for any scalar)\n// - +1 window is neccessary for wNAF\n// - wNAF reduces table size: 2x less memory + 2x faster generation, but 10% slower multiplication\n// TODO: Research returning 2d JS array of windows, instead of a single window. This would allow\n// windows to be in different memory locations\nexport function wNAF<T extends Group<T>>(c: GroupConstructor<T>, bits: number) {\n  const constTimeNegate = (condition: boolean, item: T): T => {\n    const neg = item.negate();\n    return condition ? neg : item;\n  };\n  const opts = (W: number) => {\n    const windows = Math.ceil(bits / W) + 1; // +1, because\n    const windowSize = 2 ** (W - 1); // -1 because we skip zero\n    return { windows, windowSize };\n  };\n  return {\n    constTimeNegate,\n    // non-const time multiplication ladder\n    unsafeLadder(elm: T, n: bigint) {\n      let p = c.ZERO;\n      let d: T = elm;\n      while (n > _0n) {\n        if (n & _1n) p = p.add(d);\n        d = d.double();\n        n >>= _1n;\n      }\n      return p;\n    },\n\n    /**\n     * Creates a wNAF precomputation window. Used for caching.\n     * Default window size is set by `utils.precompute()` and is equal to 8.\n     * Number of precomputed points depends on the curve size:\n     * 2^(𝑊−1) * (Math.ceil(𝑛 / 𝑊) + 1), where:\n     * - 𝑊 is the window size\n     * - 𝑛 is the bitlength of the curve order.\n     * For a 256-bit curve and window size 8, the number of precomputed points is 128 * 33 = 4224.\n     * @returns precomputed point tables flattened to a single array\n     */\n    precomputeWindow(elm: T, W: number): Group<T>[] {\n      const { windows, windowSize } = opts(W);\n      const points: T[] = [];\n      let p: T = elm;\n      let base = p;\n      for (let window = 0; window < windows; window++) {\n        base = p;\n        points.push(base);\n        // =1, because we skip zero\n        for (let i = 1; i < windowSize; i++) {\n          base = base.add(p);\n          points.push(base);\n        }\n        p = base.double();\n      }\n      return points;\n    },\n\n    /**\n     * Implements ec multiplication using precomputed tables and w-ary non-adjacent form.\n     * @param W window size\n     * @param precomputes precomputed tables\n     * @param n scalar (we don't check here, but should be less than curve order)\n     * @returns real and fake (for const-time) points\n     */\n    wNAF(W: number, precomputes: T[], n: bigint): { p: T; f: T } {\n      // TODO: maybe check that scalar is less than group order? wNAF behavious is undefined otherwise\n      // But need to carefully remove other checks before wNAF. ORDER == bits here\n      const { windows, windowSize } = opts(W);\n\n      let p = c.ZERO;\n      let f = c.BASE;\n\n      const mask = BigInt(2 ** W - 1); // Create mask with W ones: 0b1111 for W=4 etc.\n      const maxNumber = 2 ** W;\n      const shiftBy = BigInt(W);\n\n      for (let window = 0; window < windows; window++) {\n        const offset = window * windowSize;\n        // Extract W bits.\n        let wbits = Number(n & mask);\n\n        // Shift number by W bits.\n        n >>= shiftBy;\n\n        // If the bits are bigger than max size, we'll split those.\n        // +224 => 256 - 32\n        if (wbits > windowSize) {\n          wbits -= maxNumber;\n          n += _1n;\n        }\n\n        // This code was first written with assumption that 'f' and 'p' will never be infinity point:\n        // since each addition is multiplied by 2 ** W, it cannot cancel each other. However,\n        // there is negate now: it is possible that negated element from low value\n        // would be the same as high element, which will create carry into next window.\n        // It's not obvious how this can fail, but still worth investigating later.\n\n        // Check if we're onto Zero point.\n        // Add random point inside current window to f.\n        const offset1 = offset;\n        const offset2 = offset + Math.abs(wbits) - 1; // -1 because we skip zero\n        const cond1 = window % 2 !== 0;\n        const cond2 = wbits < 0;\n        if (wbits === 0) {\n          // The most important part for const-time getPublicKey\n          f = f.add(constTimeNegate(cond1, precomputes[offset1]));\n        } else {\n          p = p.add(constTimeNegate(cond2, precomputes[offset2]));\n        }\n      }\n      // JIT-compiler should not eliminate f here, since it will later be used in normalizeZ()\n      // Even if the variable is still unused, there are some checks which will\n      // throw an exception, so compiler needs to prove they won't happen, which is hard.\n      // At this point there is a way to F be infinity-point even if p is not,\n      // which makes it less const-time: around 1 bigint multiply.\n      return { p, f };\n    },\n\n    wNAFCached(P: T, precomputesMap: Map<T, T[]>, n: bigint, transform: Mapper<T>): { p: T; f: T } {\n      // @ts-ignore\n      const W: number = P._WINDOW_SIZE || 1;\n      // Calculate precomputes on a first run, reuse them after\n      let comp = precomputesMap.get(P);\n      if (!comp) {\n        comp = this.precomputeWindow(P, W) as T[];\n        if (W !== 1) {\n          precomputesMap.set(P, transform(comp));\n        }\n      }\n      return this.wNAF(W, comp, n);\n    },\n  };\n}\n\n// Generic BasicCurve interface: works even for polynomial fields (BLS): P, n, h would be ok.\n// Though generator can be different (Fp2 / Fp6 for BLS).\nexport type BasicCurve<T> = {\n  Fp: IField<T>; // Field over which we'll do calculations (Fp)\n  n: bigint; // Curve order, total count of valid points in the field\n  nBitLength?: number; // bit length of curve order\n  nByteLength?: number; // byte length of curve order\n  h: bigint; // cofactor. we can assign default=1, but users will just ignore it w/o validation\n  hEff?: bigint; // Number to multiply to clear cofactor\n  Gx: T; // base point X coordinate\n  Gy: T; // base point Y coordinate\n  allowInfinityPoint?: boolean; // bls12-381 requires it. ZERO point is valid, but invalid pubkey\n};\n\nexport function validateBasic<FP, T>(curve: BasicCurve<FP> & T) {\n  validateField(curve.Fp);\n  validateObject(\n    curve,\n    {\n      n: 'bigint',\n      h: 'bigint',\n      Gx: 'field',\n      Gy: 'field',\n    },\n    {\n      nBitLength: 'isSafeInteger',\n      nByteLength: 'isSafeInteger',\n    }\n  );\n  // Set defaults\n  return Object.freeze({\n    ...nLength(curve.n, curve.nBitLength),\n    ...curve,\n    ...{ p: curve.Fp.ORDER },\n  } as const);\n}\n","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// Short Weierstrass curve. The formula is: y² = x³ + ax + b\nimport * as mod from './modular.js';\nimport * as ut from './utils.js';\nimport { CHash, Hex, PrivKey, ensureBytes } from './utils.js';\nimport { Group, GroupConstructor, wNAF, BasicCurve, validateBasic, AffinePoint } from './curve.js';\n\nexport type { AffinePoint };\ntype HmacFnSync = (key: Uint8Array, ...messages: Uint8Array[]) => Uint8Array;\ntype EndomorphismOpts = {\n  beta: bigint;\n  splitScalar: (k: bigint) => { k1neg: boolean; k1: bigint; k2neg: boolean; k2: bigint };\n};\nexport type BasicWCurve<T> = BasicCurve<T> & {\n  // Params: a, b\n  a: T;\n  b: T;\n\n  // Optional params\n  allowedPrivateKeyLengths?: readonly number[]; // for P521\n  wrapPrivateKey?: boolean; // bls12-381 requires mod(n) instead of rejecting keys >= n\n  endo?: EndomorphismOpts; // Endomorphism options for Koblitz curves\n  // When a cofactor != 1, there can be an effective methods to:\n  // 1. Determine whether a point is torsion-free\n  isTorsionFree?: (c: ProjConstructor<T>, point: ProjPointType<T>) => boolean;\n  // 2. Clear torsion component\n  clearCofactor?: (c: ProjConstructor<T>, point: ProjPointType<T>) => ProjPointType<T>;\n};\n\ntype Entropy = Hex | boolean;\nexport type SignOpts = { lowS?: boolean; extraEntropy?: Entropy; prehash?: boolean };\nexport type VerOpts = { lowS?: boolean; prehash?: boolean };\n\n/**\n * ### Design rationale for types\n *\n * * Interaction between classes from different curves should fail:\n *   `k256.Point.BASE.add(p256.Point.BASE)`\n * * For this purpose we want to use `instanceof` operator, which is fast and works during runtime\n * * Different calls of `curve()` would return different classes -\n *   `curve(params) !== curve(params)`: if somebody decided to monkey-patch their curve,\n *   it won't affect others\n *\n * TypeScript can't infer types for classes created inside a function. Classes is one instance of nominative types in TypeScript and interfaces only check for shape, so it's hard to create unique type for every function call.\n *\n * We can use generic types via some param, like curve opts, but that would:\n *     1. Enable interaction between `curve(params)` and `curve(params)` (curves of same params)\n *     which is hard to debug.\n *     2. Params can be generic and we can't enforce them to be constant value:\n *     if somebody creates curve from non-constant params,\n *     it would be allowed to interact with other curves with non-constant params\n *\n * TODO: https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-7.html#unique-symbol\n */\n\n// Instance for 3d XYZ points\nexport interface ProjPointType<T> extends Group<ProjPointType<T>> {\n  readonly px: T;\n  readonly py: T;\n  readonly pz: T;\n  get x(): T;\n  get y(): T;\n  multiply(scalar: bigint): ProjPointType<T>;\n  toAffine(iz?: T): AffinePoint<T>;\n  isTorsionFree(): boolean;\n  clearCofactor(): ProjPointType<T>;\n  assertValidity(): void;\n  hasEvenY(): boolean;\n  toRawBytes(isCompressed?: boolean): Uint8Array;\n  toHex(isCompressed?: boolean): string;\n\n  multiplyUnsafe(scalar: bigint): ProjPointType<T>;\n  multiplyAndAddUnsafe(Q: ProjPointType<T>, a: bigint, b: bigint): ProjPointType<T> | undefined;\n  _setWindowSize(windowSize: number): void;\n}\n// Static methods for 3d XYZ points\nexport interface ProjConstructor<T> extends GroupConstructor<ProjPointType<T>> {\n  new (x: T, y: T, z: T): ProjPointType<T>;\n  fromAffine(p: AffinePoint<T>): ProjPointType<T>;\n  fromHex(hex: Hex): ProjPointType<T>;\n  fromPrivateKey(privateKey: PrivKey): ProjPointType<T>;\n  normalizeZ(points: ProjPointType<T>[]): ProjPointType<T>[];\n}\n\nexport type CurvePointsType<T> = BasicWCurve<T> & {\n  // Bytes\n  fromBytes?: (bytes: Uint8Array) => AffinePoint<T>;\n  toBytes?: (c: ProjConstructor<T>, point: ProjPointType<T>, isCompressed: boolean) => Uint8Array;\n};\n\nfunction validatePointOpts<T>(curve: CurvePointsType<T>) {\n  const opts = validateBasic(curve);\n  ut.validateObject(\n    opts,\n    {\n      a: 'field',\n      b: 'field',\n    },\n    {\n      allowedPrivateKeyLengths: 'array',\n      wrapPrivateKey: 'boolean',\n      isTorsionFree: 'function',\n      clearCofactor: 'function',\n      allowInfinityPoint: 'boolean',\n      fromBytes: 'function',\n      toBytes: 'function',\n    }\n  );\n  const { endo, Fp, a } = opts;\n  if (endo) {\n    if (!Fp.eql(a, Fp.ZERO)) {\n      throw new Error('Endomorphism can only be defined for Koblitz curves that have a=0');\n    }\n    if (\n      typeof endo !== 'object' ||\n      typeof endo.beta !== 'bigint' ||\n      typeof endo.splitScalar !== 'function'\n    ) {\n      throw new Error('Expected endomorphism with beta: bigint and splitScalar: function');\n    }\n  }\n  return Object.freeze({ ...opts } as const);\n}\n\nexport type CurvePointsRes<T> = {\n  CURVE: ReturnType<typeof validatePointOpts<T>>;\n  ProjectivePoint: ProjConstructor<T>;\n  normPrivateKeyToScalar: (key: PrivKey) => bigint;\n  weierstrassEquation: (x: T) => T;\n  isWithinCurveOrder: (num: bigint) => boolean;\n};\n\n// ASN.1 DER encoding utilities\nconst { bytesToNumberBE: b2n, hexToBytes: h2b } = ut;\nexport const DER = {\n  // asn.1 DER encoding utils\n  Err: class DERErr extends Error {\n    constructor(m = '') {\n      super(m);\n    }\n  },\n  _parseInt(data: Uint8Array): { d: bigint; l: Uint8Array } {\n    const { Err: E } = DER;\n    if (data.length < 2 || data[0] !== 0x02) throw new E('Invalid signature integer tag');\n    const len = data[1];\n    const res = data.subarray(2, len + 2);\n    if (!len || res.length !== len) throw new E('Invalid signature integer: wrong length');\n    // https://crypto.stackexchange.com/a/57734 Leftmost bit of first byte is 'negative' flag,\n    // since we always use positive integers here. It must always be empty:\n    // - add zero byte if exists\n    // - if next byte doesn't have a flag, leading zero is not allowed (minimal encoding)\n    if (res[0] & 0b10000000) throw new E('Invalid signature integer: negative');\n    if (res[0] === 0x00 && !(res[1] & 0b10000000))\n      throw new E('Invalid signature integer: unnecessary leading zero');\n    return { d: b2n(res), l: data.subarray(len + 2) }; // d is data, l is left\n  },\n  toSig(hex: string | Uint8Array): { r: bigint; s: bigint } {\n    // parse DER signature\n    const { Err: E } = DER;\n    const data = typeof hex === 'string' ? h2b(hex) : hex;\n    ut.abytes(data);\n    let l = data.length;\n    if (l < 2 || data[0] != 0x30) throw new E('Invalid signature tag');\n    if (data[1] !== l - 2) throw new E('Invalid signature: incorrect length');\n    const { d: r, l: sBytes } = DER._parseInt(data.subarray(2));\n    const { d: s, l: rBytesLeft } = DER._parseInt(sBytes);\n    if (rBytesLeft.length) throw new E('Invalid signature: left bytes after parsing');\n    return { r, s };\n  },\n  hexFromSig(sig: { r: bigint; s: bigint }): string {\n    // Add leading zero if first byte has negative bit enabled. More details in '_parseInt'\n    const slice = (s: string): string => (Number.parseInt(s[0], 16) & 0b1000 ? '00' + s : s);\n    const h = (num: number | bigint) => {\n      const hex = num.toString(16);\n      return hex.length & 1 ? `0${hex}` : hex;\n    };\n    const s = slice(h(sig.s));\n    const r = slice(h(sig.r));\n    const shl = s.length / 2;\n    const rhl = r.length / 2;\n    const sl = h(shl);\n    const rl = h(rhl);\n    return `30${h(rhl + shl + 4)}02${rl}${r}02${sl}${s}`;\n  },\n};\n\n// Be friendly to bad ECMAScript parsers by not using bigint literals\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _3n = BigInt(3), _4n = BigInt(4);\n\nexport function weierstrassPoints<T>(opts: CurvePointsType<T>): CurvePointsRes<T> {\n  const CURVE = validatePointOpts(opts);\n  const { Fp } = CURVE; // All curves has same field / group length as for now, but they can differ\n\n  const toBytes =\n    CURVE.toBytes ||\n    ((_c: ProjConstructor<T>, point: ProjPointType<T>, _isCompressed: boolean) => {\n      const a = point.toAffine();\n      return ut.concatBytes(Uint8Array.from([0x04]), Fp.toBytes(a.x), Fp.toBytes(a.y));\n    });\n  const fromBytes =\n    CURVE.fromBytes ||\n    ((bytes: Uint8Array) => {\n      // const head = bytes[0];\n      const tail = bytes.subarray(1);\n      // if (head !== 0x04) throw new Error('Only non-compressed encoding is supported');\n      const x = Fp.fromBytes(tail.subarray(0, Fp.BYTES));\n      const y = Fp.fromBytes(tail.subarray(Fp.BYTES, 2 * Fp.BYTES));\n      return { x, y };\n    });\n\n  /**\n   * y² = x³ + ax + b: Short weierstrass curve formula\n   * @returns y²\n   */\n  function weierstrassEquation(x: T): T {\n    const { a, b } = CURVE;\n    const x2 = Fp.sqr(x); // x * x\n    const x3 = Fp.mul(x2, x); // x2 * x\n    return Fp.add(Fp.add(x3, Fp.mul(x, a)), b); // x3 + a * x + b\n  }\n  // Validate whether the passed curve params are valid.\n  // We check if curve equation works for generator point.\n  // `assertValidity()` won't work: `isTorsionFree()` is not available at this point in bls12-381.\n  // ProjectivePoint class has not been initialized yet.\n  if (!Fp.eql(Fp.sqr(CURVE.Gy), weierstrassEquation(CURVE.Gx)))\n    throw new Error('bad generator point: equation left != right');\n\n  // Valid group elements reside in range 1..n-1\n  function isWithinCurveOrder(num: bigint): boolean {\n    return typeof num === 'bigint' && _0n < num && num < CURVE.n;\n  }\n  function assertGE(num: bigint) {\n    if (!isWithinCurveOrder(num)) throw new Error('Expected valid bigint: 0 < bigint < curve.n');\n  }\n  // Validates if priv key is valid and converts it to bigint.\n  // Supports options allowedPrivateKeyLengths and wrapPrivateKey.\n  function normPrivateKeyToScalar(key: PrivKey): bigint {\n    const { allowedPrivateKeyLengths: lengths, nByteLength, wrapPrivateKey, n } = CURVE;\n    if (lengths && typeof key !== 'bigint') {\n      if (ut.isBytes(key)) key = ut.bytesToHex(key);\n      // Normalize to hex string, pad. E.g. P521 would norm 130-132 char hex to 132-char bytes\n      if (typeof key !== 'string' || !lengths.includes(key.length)) throw new Error('Invalid key');\n      key = key.padStart(nByteLength * 2, '0');\n    }\n    let num: bigint;\n    try {\n      num =\n        typeof key === 'bigint'\n          ? key\n          : ut.bytesToNumberBE(ensureBytes('private key', key, nByteLength));\n    } catch (error) {\n      throw new Error(`private key must be ${nByteLength} bytes, hex or bigint, not ${typeof key}`);\n    }\n    if (wrapPrivateKey) num = mod.mod(num, n); // disabled by default, enabled for BLS\n    assertGE(num); // num in range [1..N-1]\n    return num;\n  }\n\n  const pointPrecomputes = new Map<Point, Point[]>();\n  function assertPrjPoint(other: unknown) {\n    if (!(other instanceof Point)) throw new Error('ProjectivePoint expected');\n  }\n  /**\n   * Projective Point works in 3d / projective (homogeneous) coordinates: (x, y, z) ∋ (x=x/z, y=y/z)\n   * Default Point works in 2d / affine coordinates: (x, y)\n   * We're doing calculations in projective, because its operations don't require costly inversion.\n   */\n  class Point implements ProjPointType<T> {\n    static readonly BASE = new Point(CURVE.Gx, CURVE.Gy, Fp.ONE);\n    static readonly ZERO = new Point(Fp.ZERO, Fp.ONE, Fp.ZERO);\n\n    constructor(\n      readonly px: T,\n      readonly py: T,\n      readonly pz: T\n    ) {\n      if (px == null || !Fp.isValid(px)) throw new Error('x required');\n      if (py == null || !Fp.isValid(py)) throw new Error('y required');\n      if (pz == null || !Fp.isValid(pz)) throw new Error('z required');\n    }\n\n    // Does not validate if the point is on-curve.\n    // Use fromHex instead, or call assertValidity() later.\n    static fromAffine(p: AffinePoint<T>): Point {\n      const { x, y } = p || {};\n      if (!p || !Fp.isValid(x) || !Fp.isValid(y)) throw new Error('invalid affine point');\n      if (p instanceof Point) throw new Error('projective point not allowed');\n      const is0 = (i: T) => Fp.eql(i, Fp.ZERO);\n      // fromAffine(x:0, y:0) would produce (x:0, y:0, z:1), but we need (x:0, y:1, z:0)\n      if (is0(x) && is0(y)) return Point.ZERO;\n      return new Point(x, y, Fp.ONE);\n    }\n\n    get x(): T {\n      return this.toAffine().x;\n    }\n    get y(): T {\n      return this.toAffine().y;\n    }\n\n    /**\n     * Takes a bunch of Projective Points but executes only one\n     * inversion on all of them. Inversion is very slow operation,\n     * so this improves performance massively.\n     * Optimization: converts a list of projective points to a list of identical points with Z=1.\n     */\n    static normalizeZ(points: Point[]): Point[] {\n      const toInv = Fp.invertBatch(points.map((p) => p.pz));\n      return points.map((p, i) => p.toAffine(toInv[i])).map(Point.fromAffine);\n    }\n\n    /**\n     * Converts hash string or Uint8Array to Point.\n     * @param hex short/long ECDSA hex\n     */\n    static fromHex(hex: Hex): Point {\n      const P = Point.fromAffine(fromBytes(ensureBytes('pointHex', hex)));\n      P.assertValidity();\n      return P;\n    }\n\n    // Multiplies generator point by privateKey.\n    static fromPrivateKey(privateKey: PrivKey) {\n      return Point.BASE.multiply(normPrivateKeyToScalar(privateKey));\n    }\n\n    // We calculate precomputes for elliptic curve point multiplication\n    // using windowed method. This specifies window size and\n    // stores precomputed values. Usually only base point would be precomputed.\n    _WINDOW_SIZE?: number;\n\n    // \"Private method\", don't use it directly\n    _setWindowSize(windowSize: number) {\n      this._WINDOW_SIZE = windowSize;\n      pointPrecomputes.delete(this);\n    }\n\n    // A point on curve is valid if it conforms to equation.\n    assertValidity(): void {\n      if (this.is0()) {\n        // (0, 1, 0) aka ZERO is invalid in most contexts.\n        // In BLS, ZERO can be serialized, so we allow it.\n        // (0, 0, 0) is wrong representation of ZERO and is always invalid.\n        if (CURVE.allowInfinityPoint && !Fp.is0(this.py)) return;\n        throw new Error('bad point: ZERO');\n      }\n      // Some 3rd-party test vectors require different wording between here & `fromCompressedHex`\n      const { x, y } = this.toAffine();\n      // Check if x, y are valid field elements\n      if (!Fp.isValid(x) || !Fp.isValid(y)) throw new Error('bad point: x or y not FE');\n      const left = Fp.sqr(y); // y²\n      const right = weierstrassEquation(x); // x³ + ax + b\n      if (!Fp.eql(left, right)) throw new Error('bad point: equation left != right');\n      if (!this.isTorsionFree()) throw new Error('bad point: not in prime-order subgroup');\n    }\n    hasEvenY(): boolean {\n      const { y } = this.toAffine();\n      if (Fp.isOdd) return !Fp.isOdd(y);\n      throw new Error(\"Field doesn't support isOdd\");\n    }\n\n    /**\n     * Compare one point to another.\n     */\n    equals(other: Point): boolean {\n      assertPrjPoint(other);\n      const { px: X1, py: Y1, pz: Z1 } = this;\n      const { px: X2, py: Y2, pz: Z2 } = other;\n      const U1 = Fp.eql(Fp.mul(X1, Z2), Fp.mul(X2, Z1));\n      const U2 = Fp.eql(Fp.mul(Y1, Z2), Fp.mul(Y2, Z1));\n      return U1 && U2;\n    }\n\n    /**\n     * Flips point to one corresponding to (x, -y) in Affine coordinates.\n     */\n    negate(): Point {\n      return new Point(this.px, Fp.neg(this.py), this.pz);\n    }\n\n    // Renes-Costello-Batina exception-free doubling formula.\n    // There is 30% faster Jacobian formula, but it is not complete.\n    // https://eprint.iacr.org/2015/1060, algorithm 3\n    // Cost: 8M + 3S + 3*a + 2*b3 + 15add.\n    double() {\n      const { a, b } = CURVE;\n      const b3 = Fp.mul(b, _3n);\n      const { px: X1, py: Y1, pz: Z1 } = this;\n      let X3 = Fp.ZERO, Y3 = Fp.ZERO, Z3 = Fp.ZERO; // prettier-ignore\n      let t0 = Fp.mul(X1, X1); // step 1\n      let t1 = Fp.mul(Y1, Y1);\n      let t2 = Fp.mul(Z1, Z1);\n      let t3 = Fp.mul(X1, Y1);\n      t3 = Fp.add(t3, t3); // step 5\n      Z3 = Fp.mul(X1, Z1);\n      Z3 = Fp.add(Z3, Z3);\n      X3 = Fp.mul(a, Z3);\n      Y3 = Fp.mul(b3, t2);\n      Y3 = Fp.add(X3, Y3); // step 10\n      X3 = Fp.sub(t1, Y3);\n      Y3 = Fp.add(t1, Y3);\n      Y3 = Fp.mul(X3, Y3);\n      X3 = Fp.mul(t3, X3);\n      Z3 = Fp.mul(b3, Z3); // step 15\n      t2 = Fp.mul(a, t2);\n      t3 = Fp.sub(t0, t2);\n      t3 = Fp.mul(a, t3);\n      t3 = Fp.add(t3, Z3);\n      Z3 = Fp.add(t0, t0); // step 20\n      t0 = Fp.add(Z3, t0);\n      t0 = Fp.add(t0, t2);\n      t0 = Fp.mul(t0, t3);\n      Y3 = Fp.add(Y3, t0);\n      t2 = Fp.mul(Y1, Z1); // step 25\n      t2 = Fp.add(t2, t2);\n      t0 = Fp.mul(t2, t3);\n      X3 = Fp.sub(X3, t0);\n      Z3 = Fp.mul(t2, t1);\n      Z3 = Fp.add(Z3, Z3); // step 30\n      Z3 = Fp.add(Z3, Z3);\n      return new Point(X3, Y3, Z3);\n    }\n\n    // Renes-Costello-Batina exception-free addition formula.\n    // There is 30% faster Jacobian formula, but it is not complete.\n    // https://eprint.iacr.org/2015/1060, algorithm 1\n    // Cost: 12M + 0S + 3*a + 3*b3 + 23add.\n    add(other: Point): Point {\n      assertPrjPoint(other);\n      const { px: X1, py: Y1, pz: Z1 } = this;\n      const { px: X2, py: Y2, pz: Z2 } = other;\n      let X3 = Fp.ZERO, Y3 = Fp.ZERO, Z3 = Fp.ZERO; // prettier-ignore\n      const a = CURVE.a;\n      const b3 = Fp.mul(CURVE.b, _3n);\n      let t0 = Fp.mul(X1, X2); // step 1\n      let t1 = Fp.mul(Y1, Y2);\n      let t2 = Fp.mul(Z1, Z2);\n      let t3 = Fp.add(X1, Y1);\n      let t4 = Fp.add(X2, Y2); // step 5\n      t3 = Fp.mul(t3, t4);\n      t4 = Fp.add(t0, t1);\n      t3 = Fp.sub(t3, t4);\n      t4 = Fp.add(X1, Z1);\n      let t5 = Fp.add(X2, Z2); // step 10\n      t4 = Fp.mul(t4, t5);\n      t5 = Fp.add(t0, t2);\n      t4 = Fp.sub(t4, t5);\n      t5 = Fp.add(Y1, Z1);\n      X3 = Fp.add(Y2, Z2); // step 15\n      t5 = Fp.mul(t5, X3);\n      X3 = Fp.add(t1, t2);\n      t5 = Fp.sub(t5, X3);\n      Z3 = Fp.mul(a, t4);\n      X3 = Fp.mul(b3, t2); // step 20\n      Z3 = Fp.add(X3, Z3);\n      X3 = Fp.sub(t1, Z3);\n      Z3 = Fp.add(t1, Z3);\n      Y3 = Fp.mul(X3, Z3);\n      t1 = Fp.add(t0, t0); // step 25\n      t1 = Fp.add(t1, t0);\n      t2 = Fp.mul(a, t2);\n      t4 = Fp.mul(b3, t4);\n      t1 = Fp.add(t1, t2);\n      t2 = Fp.sub(t0, t2); // step 30\n      t2 = Fp.mul(a, t2);\n      t4 = Fp.add(t4, t2);\n      t0 = Fp.mul(t1, t4);\n      Y3 = Fp.add(Y3, t0);\n      t0 = Fp.mul(t5, t4); // step 35\n      X3 = Fp.mul(t3, X3);\n      X3 = Fp.sub(X3, t0);\n      t0 = Fp.mul(t3, t1);\n      Z3 = Fp.mul(t5, Z3);\n      Z3 = Fp.add(Z3, t0); // step 40\n      return new Point(X3, Y3, Z3);\n    }\n\n    subtract(other: Point) {\n      return this.add(other.negate());\n    }\n\n    private is0() {\n      return this.equals(Point.ZERO);\n    }\n    private wNAF(n: bigint): { p: Point; f: Point } {\n      return wnaf.wNAFCached(this, pointPrecomputes, n, (comp: Point[]) => {\n        const toInv = Fp.invertBatch(comp.map((p) => p.pz));\n        return comp.map((p, i) => p.toAffine(toInv[i])).map(Point.fromAffine);\n      });\n    }\n\n    /**\n     * Non-constant-time multiplication. Uses double-and-add algorithm.\n     * It's faster, but should only be used when you don't care about\n     * an exposed private key e.g. sig verification, which works over *public* keys.\n     */\n    multiplyUnsafe(n: bigint): Point {\n      const I = Point.ZERO;\n      if (n === _0n) return I;\n      assertGE(n); // Will throw on 0\n      if (n === _1n) return this;\n      const { endo } = CURVE;\n      if (!endo) return wnaf.unsafeLadder(this, n);\n\n      // Apply endomorphism\n      let { k1neg, k1, k2neg, k2 } = endo.splitScalar(n);\n      let k1p = I;\n      let k2p = I;\n      let d: Point = this;\n      while (k1 > _0n || k2 > _0n) {\n        if (k1 & _1n) k1p = k1p.add(d);\n        if (k2 & _1n) k2p = k2p.add(d);\n        d = d.double();\n        k1 >>= _1n;\n        k2 >>= _1n;\n      }\n      if (k1neg) k1p = k1p.negate();\n      if (k2neg) k2p = k2p.negate();\n      k2p = new Point(Fp.mul(k2p.px, endo.beta), k2p.py, k2p.pz);\n      return k1p.add(k2p);\n    }\n\n    /**\n     * Constant time multiplication.\n     * Uses wNAF method. Windowed method may be 10% faster,\n     * but takes 2x longer to generate and consumes 2x memory.\n     * Uses precomputes when available.\n     * Uses endomorphism for Koblitz curves.\n     * @param scalar by which the point would be multiplied\n     * @returns New point\n     */\n    multiply(scalar: bigint): Point {\n      assertGE(scalar);\n      let n = scalar;\n      let point: Point, fake: Point; // Fake point is used to const-time mult\n      const { endo } = CURVE;\n      if (endo) {\n        const { k1neg, k1, k2neg, k2 } = endo.splitScalar(n);\n        let { p: k1p, f: f1p } = this.wNAF(k1);\n        let { p: k2p, f: f2p } = this.wNAF(k2);\n        k1p = wnaf.constTimeNegate(k1neg, k1p);\n        k2p = wnaf.constTimeNegate(k2neg, k2p);\n        k2p = new Point(Fp.mul(k2p.px, endo.beta), k2p.py, k2p.pz);\n        point = k1p.add(k2p);\n        fake = f1p.add(f2p);\n      } else {\n        const { p, f } = this.wNAF(n);\n        point = p;\n        fake = f;\n      }\n      // Normalize `z` for both points, but return only real one\n      return Point.normalizeZ([point, fake])[0];\n    }\n\n    /**\n     * Efficiently calculate `aP + bQ`. Unsafe, can expose private key, if used incorrectly.\n     * Not using Strauss-Shamir trick: precomputation tables are faster.\n     * The trick could be useful if both P and Q are not G (not in our case).\n     * @returns non-zero affine point\n     */\n    multiplyAndAddUnsafe(Q: Point, a: bigint, b: bigint): Point | undefined {\n      const G = Point.BASE; // No Strauss-Shamir trick: we have 10% faster G precomputes\n      const mul = (\n        P: Point,\n        a: bigint // Select faster multiply() method\n      ) => (a === _0n || a === _1n || !P.equals(G) ? P.multiplyUnsafe(a) : P.multiply(a));\n      const sum = mul(this, a).add(mul(Q, b));\n      return sum.is0() ? undefined : sum;\n    }\n\n    // Converts Projective point to affine (x, y) coordinates.\n    // Can accept precomputed Z^-1 - for example, from invertBatch.\n    // (x, y, z) ∋ (x=x/z, y=y/z)\n    toAffine(iz?: T): AffinePoint<T> {\n      const { px: x, py: y, pz: z } = this;\n      const is0 = this.is0();\n      // If invZ was 0, we return zero point. However we still want to execute\n      // all operations, so we replace invZ with a random number, 1.\n      if (iz == null) iz = is0 ? Fp.ONE : Fp.inv(z);\n      const ax = Fp.mul(x, iz);\n      const ay = Fp.mul(y, iz);\n      const zz = Fp.mul(z, iz);\n      if (is0) return { x: Fp.ZERO, y: Fp.ZERO };\n      if (!Fp.eql(zz, Fp.ONE)) throw new Error('invZ was invalid');\n      return { x: ax, y: ay };\n    }\n    isTorsionFree(): boolean {\n      const { h: cofactor, isTorsionFree } = CURVE;\n      if (cofactor === _1n) return true; // No subgroups, always torsion-free\n      if (isTorsionFree) return isTorsionFree(Point, this);\n      throw new Error('isTorsionFree() has not been declared for the elliptic curve');\n    }\n    clearCofactor(): Point {\n      const { h: cofactor, clearCofactor } = CURVE;\n      if (cofactor === _1n) return this; // Fast-path\n      if (clearCofactor) return clearCofactor(Point, this) as Point;\n      return this.multiplyUnsafe(CURVE.h);\n    }\n\n    toRawBytes(isCompressed = true): Uint8Array {\n      this.assertValidity();\n      return toBytes(Point, this, isCompressed);\n    }\n\n    toHex(isCompressed = true): string {\n      return ut.bytesToHex(this.toRawBytes(isCompressed));\n    }\n  }\n  const _bits = CURVE.nBitLength;\n  const wnaf = wNAF(Point, CURVE.endo ? Math.ceil(_bits / 2) : _bits);\n  // Validate if generator point is on curve\n  return {\n    CURVE,\n    ProjectivePoint: Point as ProjConstructor<T>,\n    normPrivateKeyToScalar,\n    weierstrassEquation,\n    isWithinCurveOrder,\n  };\n}\n\n// Instance\nexport interface SignatureType {\n  readonly r: bigint;\n  readonly s: bigint;\n  readonly recovery?: number;\n  assertValidity(): void;\n  addRecoveryBit(recovery: number): RecoveredSignatureType;\n  hasHighS(): boolean;\n  normalizeS(): SignatureType;\n  recoverPublicKey(msgHash: Hex): ProjPointType<bigint>;\n  toCompactRawBytes(): Uint8Array;\n  toCompactHex(): string;\n  // DER-encoded\n  toDERRawBytes(isCompressed?: boolean): Uint8Array;\n  toDERHex(isCompressed?: boolean): string;\n}\nexport type RecoveredSignatureType = SignatureType & {\n  readonly recovery: number;\n};\n// Static methods\nexport type SignatureConstructor = {\n  new (r: bigint, s: bigint): SignatureType;\n  fromCompact(hex: Hex): SignatureType;\n  fromDER(hex: Hex): SignatureType;\n};\ntype SignatureLike = { r: bigint; s: bigint };\n\nexport type PubKey = Hex | ProjPointType<bigint>;\n\nexport type CurveType = BasicWCurve<bigint> & {\n  hash: CHash; // CHash not FHash because we need outputLen for DRBG\n  hmac: HmacFnSync;\n  randomBytes: (bytesLength?: number) => Uint8Array;\n  lowS?: boolean;\n  bits2int?: (bytes: Uint8Array) => bigint;\n  bits2int_modN?: (bytes: Uint8Array) => bigint;\n};\n\nfunction validateOpts(curve: CurveType) {\n  const opts = validateBasic(curve);\n  ut.validateObject(\n    opts,\n    {\n      hash: 'hash',\n      hmac: 'function',\n      randomBytes: 'function',\n    },\n    {\n      bits2int: 'function',\n      bits2int_modN: 'function',\n      lowS: 'boolean',\n    }\n  );\n  return Object.freeze({ lowS: true, ...opts } as const);\n}\n\nexport type CurveFn = {\n  CURVE: ReturnType<typeof validateOpts>;\n  getPublicKey: (privateKey: PrivKey, isCompressed?: boolean) => Uint8Array;\n  getSharedSecret: (privateA: PrivKey, publicB: Hex, isCompressed?: boolean) => Uint8Array;\n  sign: (msgHash: Hex, privKey: PrivKey, opts?: SignOpts) => RecoveredSignatureType;\n  verify: (signature: Hex | SignatureLike, msgHash: Hex, publicKey: Hex, opts?: VerOpts) => boolean;\n  ProjectivePoint: ProjConstructor<bigint>;\n  Signature: SignatureConstructor;\n  utils: {\n    normPrivateKeyToScalar: (key: PrivKey) => bigint;\n    isValidPrivateKey(privateKey: PrivKey): boolean;\n    randomPrivateKey: () => Uint8Array;\n    precompute: (windowSize?: number, point?: ProjPointType<bigint>) => ProjPointType<bigint>;\n  };\n};\n\nexport function weierstrass(curveDef: CurveType): CurveFn {\n  const CURVE = validateOpts(curveDef) as ReturnType<typeof validateOpts>;\n  const { Fp, n: CURVE_ORDER } = CURVE;\n  const compressedLen = Fp.BYTES + 1; // e.g. 33 for 32\n  const uncompressedLen = 2 * Fp.BYTES + 1; // e.g. 65 for 32\n\n  function isValidFieldElement(num: bigint): boolean {\n    return _0n < num && num < Fp.ORDER; // 0 is banned since it's not invertible FE\n  }\n  function modN(a: bigint) {\n    return mod.mod(a, CURVE_ORDER);\n  }\n  function invN(a: bigint) {\n    return mod.invert(a, CURVE_ORDER);\n  }\n\n  const {\n    ProjectivePoint: Point,\n    normPrivateKeyToScalar,\n    weierstrassEquation,\n    isWithinCurveOrder,\n  } = weierstrassPoints({\n    ...CURVE,\n    toBytes(_c, point, isCompressed: boolean): Uint8Array {\n      const a = point.toAffine();\n      const x = Fp.toBytes(a.x);\n      const cat = ut.concatBytes;\n      if (isCompressed) {\n        return cat(Uint8Array.from([point.hasEvenY() ? 0x02 : 0x03]), x);\n      } else {\n        return cat(Uint8Array.from([0x04]), x, Fp.toBytes(a.y));\n      }\n    },\n    fromBytes(bytes: Uint8Array) {\n      const len = bytes.length;\n      const head = bytes[0];\n      const tail = bytes.subarray(1);\n      // this.assertValidity() is done inside of fromHex\n      if (len === compressedLen && (head === 0x02 || head === 0x03)) {\n        const x = ut.bytesToNumberBE(tail);\n        if (!isValidFieldElement(x)) throw new Error('Point is not on curve');\n        const y2 = weierstrassEquation(x); // y² = x³ + ax + b\n        let y: bigint;\n        try {\n          y = Fp.sqrt(y2); // y = y² ^ (p+1)/4\n        } catch (sqrtError) {\n          const suffix = sqrtError instanceof Error ? ': ' + sqrtError.message : '';\n          throw new Error('Point is not on curve' + suffix);\n        }\n        const isYOdd = (y & _1n) === _1n;\n        // ECDSA\n        const isHeadOdd = (head & 1) === 1;\n        if (isHeadOdd !== isYOdd) y = Fp.neg(y);\n        return { x, y };\n      } else if (len === uncompressedLen && head === 0x04) {\n        const x = Fp.fromBytes(tail.subarray(0, Fp.BYTES));\n        const y = Fp.fromBytes(tail.subarray(Fp.BYTES, 2 * Fp.BYTES));\n        return { x, y };\n      } else {\n        throw new Error(\n          `Point of length ${len} was invalid. Expected ${compressedLen} compressed bytes or ${uncompressedLen} uncompressed bytes`\n        );\n      }\n    },\n  });\n  const numToNByteStr = (num: bigint): string =>\n    ut.bytesToHex(ut.numberToBytesBE(num, CURVE.nByteLength));\n\n  function isBiggerThanHalfOrder(number: bigint) {\n    const HALF = CURVE_ORDER >> _1n;\n    return number > HALF;\n  }\n\n  function normalizeS(s: bigint) {\n    return isBiggerThanHalfOrder(s) ? modN(-s) : s;\n  }\n  // slice bytes num\n  const slcNum = (b: Uint8Array, from: number, to: number) => ut.bytesToNumberBE(b.slice(from, to));\n\n  /**\n   * ECDSA signature with its (r, s) properties. Supports DER & compact representations.\n   */\n  class Signature implements SignatureType {\n    constructor(\n      readonly r: bigint,\n      readonly s: bigint,\n      readonly recovery?: number\n    ) {\n      this.assertValidity();\n    }\n\n    // pair (bytes of r, bytes of s)\n    static fromCompact(hex: Hex) {\n      const l = CURVE.nByteLength;\n      hex = ensureBytes('compactSignature', hex, l * 2);\n      return new Signature(slcNum(hex, 0, l), slcNum(hex, l, 2 * l));\n    }\n\n    // DER encoded ECDSA signature\n    // https://bitcoin.stackexchange.com/questions/57644/what-are-the-parts-of-a-bitcoin-transaction-input-script\n    static fromDER(hex: Hex) {\n      const { r, s } = DER.toSig(ensureBytes('DER', hex));\n      return new Signature(r, s);\n    }\n\n    assertValidity(): void {\n      // can use assertGE here\n      if (!isWithinCurveOrder(this.r)) throw new Error('r must be 0 < r < CURVE.n');\n      if (!isWithinCurveOrder(this.s)) throw new Error('s must be 0 < s < CURVE.n');\n    }\n\n    addRecoveryBit(recovery: number): RecoveredSignature {\n      return new Signature(this.r, this.s, recovery) as RecoveredSignature;\n    }\n\n    recoverPublicKey(msgHash: Hex): typeof Point.BASE {\n      const { r, s, recovery: rec } = this;\n      const h = bits2int_modN(ensureBytes('msgHash', msgHash)); // Truncate hash\n      if (rec == null || ![0, 1, 2, 3].includes(rec)) throw new Error('recovery id invalid');\n      const radj = rec === 2 || rec === 3 ? r + CURVE.n : r;\n      if (radj >= Fp.ORDER) throw new Error('recovery id 2 or 3 invalid');\n      const prefix = (rec & 1) === 0 ? '02' : '03';\n      const R = Point.fromHex(prefix + numToNByteStr(radj));\n      const ir = invN(radj); // r^-1\n      const u1 = modN(-h * ir); // -hr^-1\n      const u2 = modN(s * ir); // sr^-1\n      const Q = Point.BASE.multiplyAndAddUnsafe(R, u1, u2); // (sr^-1)R-(hr^-1)G = -(hr^-1)G + (sr^-1)\n      if (!Q) throw new Error('point at infinify'); // unsafe is fine: no priv data leaked\n      Q.assertValidity();\n      return Q;\n    }\n\n    // Signatures should be low-s, to prevent malleability.\n    hasHighS(): boolean {\n      return isBiggerThanHalfOrder(this.s);\n    }\n\n    normalizeS() {\n      return this.hasHighS() ? new Signature(this.r, modN(-this.s), this.recovery) : this;\n    }\n\n    // DER-encoded\n    toDERRawBytes() {\n      return ut.hexToBytes(this.toDERHex());\n    }\n    toDERHex() {\n      return DER.hexFromSig({ r: this.r, s: this.s });\n    }\n\n    // padded bytes of r, then padded bytes of s\n    toCompactRawBytes() {\n      return ut.hexToBytes(this.toCompactHex());\n    }\n    toCompactHex() {\n      return numToNByteStr(this.r) + numToNByteStr(this.s);\n    }\n  }\n  type RecoveredSignature = Signature & { recovery: number };\n\n  const utils = {\n    isValidPrivateKey(privateKey: PrivKey) {\n      try {\n        normPrivateKeyToScalar(privateKey);\n        return true;\n      } catch (error) {\n        return false;\n      }\n    },\n    normPrivateKeyToScalar: normPrivateKeyToScalar,\n\n    /**\n     * Produces cryptographically secure private key from random of size\n     * (groupLen + ceil(groupLen / 2)) with modulo bias being negligible.\n     */\n    randomPrivateKey: (): Uint8Array => {\n      const length = mod.getMinHashLength(CURVE.n);\n      return mod.mapHashToField(CURVE.randomBytes(length), CURVE.n);\n    },\n\n    /**\n     * Creates precompute table for an arbitrary EC point. Makes point \"cached\".\n     * Allows to massively speed-up `point.multiply(scalar)`.\n     * @returns cached point\n     * @example\n     * const fast = utils.precompute(8, ProjectivePoint.fromHex(someonesPubKey));\n     * fast.multiply(privKey); // much faster ECDH now\n     */\n    precompute(windowSize = 8, point = Point.BASE): typeof Point.BASE {\n      point._setWindowSize(windowSize);\n      point.multiply(BigInt(3)); // 3 is arbitrary, just need any number here\n      return point;\n    },\n  };\n\n  /**\n   * Computes public key for a private key. Checks for validity of the private key.\n   * @param privateKey private key\n   * @param isCompressed whether to return compact (default), or full key\n   * @returns Public key, full when isCompressed=false; short when isCompressed=true\n   */\n  function getPublicKey(privateKey: PrivKey, isCompressed = true): Uint8Array {\n    return Point.fromPrivateKey(privateKey).toRawBytes(isCompressed);\n  }\n\n  /**\n   * Quick and dirty check for item being public key. Does not validate hex, or being on-curve.\n   */\n  function isProbPub(item: PrivKey | PubKey): boolean {\n    const arr = ut.isBytes(item);\n    const str = typeof item === 'string';\n    const len = (arr || str) && (item as Hex).length;\n    if (arr) return len === compressedLen || len === uncompressedLen;\n    if (str) return len === 2 * compressedLen || len === 2 * uncompressedLen;\n    if (item instanceof Point) return true;\n    return false;\n  }\n\n  /**\n   * ECDH (Elliptic Curve Diffie Hellman).\n   * Computes shared public key from private key and public key.\n   * Checks: 1) private key validity 2) shared key is on-curve.\n   * Does NOT hash the result.\n   * @param privateA private key\n   * @param publicB different public key\n   * @param isCompressed whether to return compact (default), or full key\n   * @returns shared public key\n   */\n  function getSharedSecret(privateA: PrivKey, publicB: Hex, isCompressed = true): Uint8Array {\n    if (isProbPub(privateA)) throw new Error('first arg must be private key');\n    if (!isProbPub(publicB)) throw new Error('second arg must be public key');\n    const b = Point.fromHex(publicB); // check for being on-curve\n    return b.multiply(normPrivateKeyToScalar(privateA)).toRawBytes(isCompressed);\n  }\n\n  // RFC6979: ensure ECDSA msg is X bytes and < N. RFC suggests optional truncating via bits2octets.\n  // FIPS 186-4 4.6 suggests the leftmost min(nBitLen, outLen) bits, which matches bits2int.\n  // bits2int can produce res>N, we can do mod(res, N) since the bitLen is the same.\n  // int2octets can't be used; pads small msgs with 0: unacceptatble for trunc as per RFC vectors\n  const bits2int =\n    CURVE.bits2int ||\n    function (bytes: Uint8Array): bigint {\n      // For curves with nBitLength % 8 !== 0: bits2octets(bits2octets(m)) !== bits2octets(m)\n      // for some cases, since bytes.length * 8 is not actual bitLength.\n      const num = ut.bytesToNumberBE(bytes); // check for == u8 done here\n      const delta = bytes.length * 8 - CURVE.nBitLength; // truncate to nBitLength leftmost bits\n      return delta > 0 ? num >> BigInt(delta) : num;\n    };\n  const bits2int_modN =\n    CURVE.bits2int_modN ||\n    function (bytes: Uint8Array): bigint {\n      return modN(bits2int(bytes)); // can't use bytesToNumberBE here\n    };\n  // NOTE: pads output with zero as per spec\n  const ORDER_MASK = ut.bitMask(CURVE.nBitLength);\n  /**\n   * Converts to bytes. Checks if num in `[0..ORDER_MASK-1]` e.g.: `[0..2^256-1]`.\n   */\n  function int2octets(num: bigint): Uint8Array {\n    if (typeof num !== 'bigint') throw new Error('bigint expected');\n    if (!(_0n <= num && num < ORDER_MASK))\n      throw new Error(`bigint expected < 2^${CURVE.nBitLength}`);\n    // works with order, can have different size than numToField!\n    return ut.numberToBytesBE(num, CURVE.nByteLength);\n  }\n\n  // Steps A, D of RFC6979 3.2\n  // Creates RFC6979 seed; converts msg/privKey to numbers.\n  // Used only in sign, not in verify.\n  // NOTE: we cannot assume here that msgHash has same amount of bytes as curve order, this will be wrong at least for P521.\n  // Also it can be bigger for P224 + SHA256\n  function prepSig(msgHash: Hex, privateKey: PrivKey, opts = defaultSigOpts) {\n    if (['recovered', 'canonical'].some((k) => k in opts))\n      throw new Error('sign() legacy options not supported');\n    const { hash, randomBytes } = CURVE;\n    let { lowS, prehash, extraEntropy: ent } = opts; // generates low-s sigs by default\n    if (lowS == null) lowS = true; // RFC6979 3.2: we skip step A, because we already provide hash\n    msgHash = ensureBytes('msgHash', msgHash);\n    if (prehash) msgHash = ensureBytes('prehashed msgHash', hash(msgHash));\n\n    // We can't later call bits2octets, since nested bits2int is broken for curves\n    // with nBitLength % 8 !== 0. Because of that, we unwrap it here as int2octets call.\n    // const bits2octets = (bits) => int2octets(bits2int_modN(bits))\n    const h1int = bits2int_modN(msgHash);\n    const d = normPrivateKeyToScalar(privateKey); // validate private key, convert to bigint\n    const seedArgs = [int2octets(d), int2octets(h1int)];\n    // extraEntropy. RFC6979 3.6: additional k' (optional).\n    if (ent != null && ent !== false) {\n      // K = HMAC_K(V || 0x00 || int2octets(x) || bits2octets(h1) || k')\n      const e = ent === true ? randomBytes(Fp.BYTES) : ent; // generate random bytes OR pass as-is\n      seedArgs.push(ensureBytes('extraEntropy', e)); // check for being bytes\n    }\n    const seed = ut.concatBytes(...seedArgs); // Step D of RFC6979 3.2\n    const m = h1int; // NOTE: no need to call bits2int second time here, it is inside truncateHash!\n    // Converts signature params into point w r/s, checks result for validity.\n    function k2sig(kBytes: Uint8Array): RecoveredSignature | undefined {\n      // RFC 6979 Section 3.2, step 3: k = bits2int(T)\n      const k = bits2int(kBytes); // Cannot use fields methods, since it is group element\n      if (!isWithinCurveOrder(k)) return; // Important: all mod() calls here must be done over N\n      const ik = invN(k); // k^-1 mod n\n      const q = Point.BASE.multiply(k).toAffine(); // q = Gk\n      const r = modN(q.x); // r = q.x mod n\n      if (r === _0n) return;\n      // Can use scalar blinding b^-1(bm + bdr) where b ∈ [1,q−1] according to\n      // https://tches.iacr.org/index.php/TCHES/article/view/7337/6509. We've decided against it:\n      // a) dependency on CSPRNG b) 15% slowdown c) doesn't really help since bigints are not CT\n      const s = modN(ik * modN(m + r * d)); // Not using blinding here\n      if (s === _0n) return;\n      let recovery = (q.x === r ? 0 : 2) | Number(q.y & _1n); // recovery bit (2 or 3, when q.x > n)\n      let normS = s;\n      if (lowS && isBiggerThanHalfOrder(s)) {\n        normS = normalizeS(s); // if lowS was passed, ensure s is always\n        recovery ^= 1; // // in the bottom half of N\n      }\n      return new Signature(r, normS, recovery) as RecoveredSignature; // use normS, not s\n    }\n    return { seed, k2sig };\n  }\n  const defaultSigOpts: SignOpts = { lowS: CURVE.lowS, prehash: false };\n  const defaultVerOpts: VerOpts = { lowS: CURVE.lowS, prehash: false };\n\n  /**\n   * Signs message hash with a private key.\n   * ```\n   * sign(m, d, k) where\n   *   (x, y) = G × k\n   *   r = x mod n\n   *   s = (m + dr)/k mod n\n   * ```\n   * @param msgHash NOT message. msg needs to be hashed to `msgHash`, or use `prehash`.\n   * @param privKey private key\n   * @param opts lowS for non-malleable sigs. extraEntropy for mixing randomness into k. prehash will hash first arg.\n   * @returns signature with recovery param\n   */\n  function sign(msgHash: Hex, privKey: PrivKey, opts = defaultSigOpts): RecoveredSignature {\n    const { seed, k2sig } = prepSig(msgHash, privKey, opts); // Steps A, D of RFC6979 3.2.\n    const C = CURVE;\n    const drbg = ut.createHmacDrbg<RecoveredSignature>(C.hash.outputLen, C.nByteLength, C.hmac);\n    return drbg(seed, k2sig); // Steps B, C, D, E, F, G\n  }\n\n  // Enable precomputes. Slows down first publicKey computation by 20ms.\n  Point.BASE._setWindowSize(8);\n  // utils.precompute(8, ProjectivePoint.BASE)\n\n  /**\n   * Verifies a signature against message hash and public key.\n   * Rejects lowS signatures by default: to override,\n   * specify option `{lowS: false}`. Implements section 4.1.4 from https://www.secg.org/sec1-v2.pdf:\n   *\n   * ```\n   * verify(r, s, h, P) where\n   *   U1 = hs^-1 mod n\n   *   U2 = rs^-1 mod n\n   *   R = U1⋅G - U2⋅P\n   *   mod(R.x, n) == r\n   * ```\n   */\n  function verify(\n    signature: Hex | SignatureLike,\n    msgHash: Hex,\n    publicKey: Hex,\n    opts = defaultVerOpts\n  ): boolean {\n    const sg = signature;\n    msgHash = ensureBytes('msgHash', msgHash);\n    publicKey = ensureBytes('publicKey', publicKey);\n    if ('strict' in opts) throw new Error('options.strict was renamed to lowS');\n    const { lowS, prehash } = opts;\n\n    let _sig: Signature | undefined = undefined;\n    let P: ProjPointType<bigint>;\n    try {\n      if (typeof sg === 'string' || ut.isBytes(sg)) {\n        // Signature can be represented in 2 ways: compact (2*nByteLength) & DER (variable-length).\n        // Since DER can also be 2*nByteLength bytes, we check for it first.\n        try {\n          _sig = Signature.fromDER(sg);\n        } catch (derError) {\n          if (!(derError instanceof DER.Err)) throw derError;\n          _sig = Signature.fromCompact(sg);\n        }\n      } else if (typeof sg === 'object' && typeof sg.r === 'bigint' && typeof sg.s === 'bigint') {\n        const { r, s } = sg;\n        _sig = new Signature(r, s);\n      } else {\n        throw new Error('PARSE');\n      }\n      P = Point.fromHex(publicKey);\n    } catch (error) {\n      if ((error as Error).message === 'PARSE')\n        throw new Error(`signature must be Signature instance, Uint8Array or hex string`);\n      return false;\n    }\n    if (lowS && _sig.hasHighS()) return false;\n    if (prehash) msgHash = CURVE.hash(msgHash);\n    const { r, s } = _sig;\n    const h = bits2int_modN(msgHash); // Cannot use fields methods, since it is group element\n    const is = invN(s); // s^-1\n    const u1 = modN(h * is); // u1 = hs^-1 mod n\n    const u2 = modN(r * is); // u2 = rs^-1 mod n\n    const R = Point.BASE.multiplyAndAddUnsafe(P, u1, u2)?.toAffine(); // R = u1⋅G + u2⋅P\n    if (!R) return false;\n    const v = modN(R.x);\n    return v === r;\n  }\n  return {\n    CURVE,\n    getPublicKey,\n    getSharedSecret,\n    sign,\n    verify,\n    ProjectivePoint: Point,\n    Signature,\n    utils,\n  };\n}\n\n/**\n * Implementation of the Shallue and van de Woestijne method for any weierstrass curve.\n * TODO: check if there is a way to merge this with uvRatio in Edwards; move to modular.\n * b = True and y = sqrt(u / v) if (u / v) is square in F, and\n * b = False and y = sqrt(Z * (u / v)) otherwise.\n * @param Fp\n * @param Z\n * @returns\n */\nexport function SWUFpSqrtRatio<T>(Fp: mod.IField<T>, Z: T) {\n  // Generic implementation\n  const q = Fp.ORDER;\n  let l = _0n;\n  for (let o = q - _1n; o % _2n === _0n; o /= _2n) l += _1n;\n  const c1 = l; // 1. c1, the largest integer such that 2^c1 divides q - 1.\n  // We need 2n ** c1 and 2n ** (c1-1). We can't use **; but we can use <<.\n  // 2n ** c1 == 2n << (c1-1)\n  const _2n_pow_c1_1 = _2n << (c1 - _1n - _1n);\n  const _2n_pow_c1 = _2n_pow_c1_1 * _2n;\n  const c2 = (q - _1n) / _2n_pow_c1; // 2. c2 = (q - 1) / (2^c1)  # Integer arithmetic\n  const c3 = (c2 - _1n) / _2n; // 3. c3 = (c2 - 1) / 2            # Integer arithmetic\n  const c4 = _2n_pow_c1 - _1n; // 4. c4 = 2^c1 - 1                # Integer arithmetic\n  const c5 = _2n_pow_c1_1; // 5. c5 = 2^(c1 - 1)                  # Integer arithmetic\n  const c6 = Fp.pow(Z, c2); // 6. c6 = Z^c2\n  const c7 = Fp.pow(Z, (c2 + _1n) / _2n); // 7. c7 = Z^((c2 + 1) / 2)\n  let sqrtRatio = (u: T, v: T): { isValid: boolean; value: T } => {\n    let tv1 = c6; // 1. tv1 = c6\n    let tv2 = Fp.pow(v, c4); // 2. tv2 = v^c4\n    let tv3 = Fp.sqr(tv2); // 3. tv3 = tv2^2\n    tv3 = Fp.mul(tv3, v); // 4. tv3 = tv3 * v\n    let tv5 = Fp.mul(u, tv3); // 5. tv5 = u * tv3\n    tv5 = Fp.pow(tv5, c3); // 6. tv5 = tv5^c3\n    tv5 = Fp.mul(tv5, tv2); // 7. tv5 = tv5 * tv2\n    tv2 = Fp.mul(tv5, v); // 8. tv2 = tv5 * v\n    tv3 = Fp.mul(tv5, u); // 9. tv3 = tv5 * u\n    let tv4 = Fp.mul(tv3, tv2); // 10. tv4 = tv3 * tv2\n    tv5 = Fp.pow(tv4, c5); // 11. tv5 = tv4^c5\n    let isQR = Fp.eql(tv5, Fp.ONE); // 12. isQR = tv5 == 1\n    tv2 = Fp.mul(tv3, c7); // 13. tv2 = tv3 * c7\n    tv5 = Fp.mul(tv4, tv1); // 14. tv5 = tv4 * tv1\n    tv3 = Fp.cmov(tv2, tv3, isQR); // 15. tv3 = CMOV(tv2, tv3, isQR)\n    tv4 = Fp.cmov(tv5, tv4, isQR); // 16. tv4 = CMOV(tv5, tv4, isQR)\n    // 17. for i in (c1, c1 - 1, ..., 2):\n    for (let i = c1; i > _1n; i--) {\n      let tv5 = i - _2n; // 18.    tv5 = i - 2\n      tv5 = _2n << (tv5 - _1n); // 19.    tv5 = 2^tv5\n      let tvv5 = Fp.pow(tv4, tv5); // 20.    tv5 = tv4^tv5\n      const e1 = Fp.eql(tvv5, Fp.ONE); // 21.    e1 = tv5 == 1\n      tv2 = Fp.mul(tv3, tv1); // 22.    tv2 = tv3 * tv1\n      tv1 = Fp.mul(tv1, tv1); // 23.    tv1 = tv1 * tv1\n      tvv5 = Fp.mul(tv4, tv1); // 24.    tv5 = tv4 * tv1\n      tv3 = Fp.cmov(tv2, tv3, e1); // 25.    tv3 = CMOV(tv2, tv3, e1)\n      tv4 = Fp.cmov(tvv5, tv4, e1); // 26.    tv4 = CMOV(tv5, tv4, e1)\n    }\n    return { isValid: isQR, value: tv3 };\n  };\n  if (Fp.ORDER % _4n === _3n) {\n    // sqrt_ratio_3mod4(u, v)\n    const c1 = (Fp.ORDER - _3n) / _4n; // 1. c1 = (q - 3) / 4     # Integer arithmetic\n    const c2 = Fp.sqrt(Fp.neg(Z)); // 2. c2 = sqrt(-Z)\n    sqrtRatio = (u: T, v: T) => {\n      let tv1 = Fp.sqr(v); // 1. tv1 = v^2\n      const tv2 = Fp.mul(u, v); // 2. tv2 = u * v\n      tv1 = Fp.mul(tv1, tv2); // 3. tv1 = tv1 * tv2\n      let y1 = Fp.pow(tv1, c1); // 4. y1 = tv1^c1\n      y1 = Fp.mul(y1, tv2); // 5. y1 = y1 * tv2\n      const y2 = Fp.mul(y1, c2); // 6. y2 = y1 * c2\n      const tv3 = Fp.mul(Fp.sqr(y1), v); // 7. tv3 = y1^2; 8. tv3 = tv3 * v\n      const isQR = Fp.eql(tv3, u); // 9. isQR = tv3 == u\n      let y = Fp.cmov(y2, y1, isQR); // 10. y = CMOV(y2, y1, isQR)\n      return { isValid: isQR, value: y }; // 11. return (isQR, y) isQR ? y : y*c2\n    };\n  }\n  // No curves uses that\n  // if (Fp.ORDER % _8n === _5n) // sqrt_ratio_5mod8\n  return sqrtRatio;\n}\n/**\n * Simplified Shallue-van de Woestijne-Ulas Method\n * https://www.rfc-editor.org/rfc/rfc9380#section-6.6.2\n */\nexport function mapToCurveSimpleSWU<T>(\n  Fp: mod.IField<T>,\n  opts: {\n    A: T;\n    B: T;\n    Z: T;\n  }\n) {\n  mod.validateField(Fp);\n  if (!Fp.isValid(opts.A) || !Fp.isValid(opts.B) || !Fp.isValid(opts.Z))\n    throw new Error('mapToCurveSimpleSWU: invalid opts');\n  const sqrtRatio = SWUFpSqrtRatio(Fp, opts.Z);\n  if (!Fp.isOdd) throw new Error('Fp.isOdd is not implemented!');\n  // Input: u, an element of F.\n  // Output: (x, y), a point on E.\n  return (u: T): { x: T; y: T } => {\n    // prettier-ignore\n    let tv1, tv2, tv3, tv4, tv5, tv6, x, y;\n    tv1 = Fp.sqr(u); // 1.  tv1 = u^2\n    tv1 = Fp.mul(tv1, opts.Z); // 2.  tv1 = Z * tv1\n    tv2 = Fp.sqr(tv1); // 3.  tv2 = tv1^2\n    tv2 = Fp.add(tv2, tv1); // 4.  tv2 = tv2 + tv1\n    tv3 = Fp.add(tv2, Fp.ONE); // 5.  tv3 = tv2 + 1\n    tv3 = Fp.mul(tv3, opts.B); // 6.  tv3 = B * tv3\n    tv4 = Fp.cmov(opts.Z, Fp.neg(tv2), !Fp.eql(tv2, Fp.ZERO)); // 7.  tv4 = CMOV(Z, -tv2, tv2 != 0)\n    tv4 = Fp.mul(tv4, opts.A); // 8.  tv4 = A * tv4\n    tv2 = Fp.sqr(tv3); // 9.  tv2 = tv3^2\n    tv6 = Fp.sqr(tv4); // 10. tv6 = tv4^2\n    tv5 = Fp.mul(tv6, opts.A); // 11. tv5 = A * tv6\n    tv2 = Fp.add(tv2, tv5); // 12. tv2 = tv2 + tv5\n    tv2 = Fp.mul(tv2, tv3); // 13. tv2 = tv2 * tv3\n    tv6 = Fp.mul(tv6, tv4); // 14. tv6 = tv6 * tv4\n    tv5 = Fp.mul(tv6, opts.B); // 15. tv5 = B * tv6\n    tv2 = Fp.add(tv2, tv5); // 16. tv2 = tv2 + tv5\n    x = Fp.mul(tv1, tv3); // 17.   x = tv1 * tv3\n    const { isValid, value } = sqrtRatio(tv2, tv6); // 18. (is_gx1_square, y1) = sqrt_ratio(tv2, tv6)\n    y = Fp.mul(tv1, u); // 19.   y = tv1 * u  -> Z * u^3 * y1\n    y = Fp.mul(y, value); // 20.   y = y * y1\n    x = Fp.cmov(x, tv3, isValid); // 21.   x = CMOV(x, tv3, is_gx1_square)\n    y = Fp.cmov(y, value, isValid); // 22.   y = CMOV(y, y1, is_gx1_square)\n    const e1 = Fp.isOdd!(u) === Fp.isOdd!(y); // 23.  e1 = sgn0(u) == sgn0(y)\n    y = Fp.cmov(Fp.neg(y), y, e1); // 24.   y = CMOV(-y, y, e1)\n    x = Fp.div(x, tv4); // 25.   x = x / tv4\n    return { x, y };\n  };\n}\n","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport type { Group, GroupConstructor, AffinePoint } from './curve.js';\nimport { mod, IField } from './modular.js';\nimport type { CHash } from './utils.js';\nimport { bytesToNumberBE, abytes, concatBytes, utf8ToBytes, validateObject } from './utils.js';\n\n/**\n * * `DST` is a domain separation tag, defined in section 2.2.5\n * * `p` characteristic of F, where F is a finite field of characteristic p and order q = p^m\n * * `m` is extension degree (1 for prime fields)\n * * `k` is the target security target in bits (e.g. 128), from section 5.1\n * * `expand` is `xmd` (SHA2, SHA3, BLAKE) or `xof` (SHAKE, BLAKE-XOF)\n * * `hash` conforming to `utils.CHash` interface, with `outputLen` / `blockLen` props\n */\ntype UnicodeOrBytes = string | Uint8Array;\nexport type Opts = {\n  DST: UnicodeOrBytes;\n  p: bigint;\n  m: number;\n  k: number;\n  expand: 'xmd' | 'xof';\n  hash: CHash;\n};\n\n// Octet Stream to Integer. \"spec\" implementation of os2ip is 2.5x slower vs bytesToNumberBE.\nconst os2ip = bytesToNumberBE;\n\n// Integer to Octet Stream (numberToBytesBE)\nfunction i2osp(value: number, length: number): Uint8Array {\n  if (value < 0 || value >= 1 << (8 * length)) {\n    throw new Error(`bad I2OSP call: value=${value} length=${length}`);\n  }\n  const res = Array.from({ length }).fill(0) as number[];\n  for (let i = length - 1; i >= 0; i--) {\n    res[i] = value & 0xff;\n    value >>>= 8;\n  }\n  return new Uint8Array(res);\n}\n\nfunction strxor(a: Uint8Array, b: Uint8Array): Uint8Array {\n  const arr = new Uint8Array(a.length);\n  for (let i = 0; i < a.length; i++) {\n    arr[i] = a[i] ^ b[i];\n  }\n  return arr;\n}\n\nfunction anum(item: unknown): void {\n  if (!Number.isSafeInteger(item)) throw new Error('number expected');\n}\n\n// Produces a uniformly random byte string using a cryptographic hash function H that outputs b bits\n// https://www.rfc-editor.org/rfc/rfc9380#section-5.3.1\nexport function expand_message_xmd(\n  msg: Uint8Array,\n  DST: Uint8Array,\n  lenInBytes: number,\n  H: CHash\n): Uint8Array {\n  abytes(msg);\n  abytes(DST);\n  anum(lenInBytes);\n  // https://www.rfc-editor.org/rfc/rfc9380#section-5.3.3\n  if (DST.length > 255) DST = H(concatBytes(utf8ToBytes('H2C-OVERSIZE-DST-'), DST));\n  const { outputLen: b_in_bytes, blockLen: r_in_bytes } = H;\n  const ell = Math.ceil(lenInBytes / b_in_bytes);\n  if (ell > 255) throw new Error('Invalid xmd length');\n  const DST_prime = concatBytes(DST, i2osp(DST.length, 1));\n  const Z_pad = i2osp(0, r_in_bytes);\n  const l_i_b_str = i2osp(lenInBytes, 2); // len_in_bytes_str\n  const b = new Array<Uint8Array>(ell);\n  const b_0 = H(concatBytes(Z_pad, msg, l_i_b_str, i2osp(0, 1), DST_prime));\n  b[0] = H(concatBytes(b_0, i2osp(1, 1), DST_prime));\n  for (let i = 1; i <= ell; i++) {\n    const args = [strxor(b_0, b[i - 1]), i2osp(i + 1, 1), DST_prime];\n    b[i] = H(concatBytes(...args));\n  }\n  const pseudo_random_bytes = concatBytes(...b);\n  return pseudo_random_bytes.slice(0, lenInBytes);\n}\n\n// Produces a uniformly random byte string using an extendable-output function (XOF) H.\n// 1. The collision resistance of H MUST be at least k bits.\n// 2. H MUST be an XOF that has been proved indifferentiable from\n//    a random oracle under a reasonable cryptographic assumption.\n// https://www.rfc-editor.org/rfc/rfc9380#section-5.3.2\nexport function expand_message_xof(\n  msg: Uint8Array,\n  DST: Uint8Array,\n  lenInBytes: number,\n  k: number,\n  H: CHash\n): Uint8Array {\n  abytes(msg);\n  abytes(DST);\n  anum(lenInBytes);\n  // https://www.rfc-editor.org/rfc/rfc9380#section-5.3.3\n  // DST = H('H2C-OVERSIZE-DST-' || a_very_long_DST, Math.ceil((lenInBytes * k) / 8));\n  if (DST.length > 255) {\n    const dkLen = Math.ceil((2 * k) / 8);\n    DST = H.create({ dkLen }).update(utf8ToBytes('H2C-OVERSIZE-DST-')).update(DST).digest();\n  }\n  if (lenInBytes > 65535 || DST.length > 255)\n    throw new Error('expand_message_xof: invalid lenInBytes');\n  return (\n    H.create({ dkLen: lenInBytes })\n      .update(msg)\n      .update(i2osp(lenInBytes, 2))\n      // 2. DST_prime = DST || I2OSP(len(DST), 1)\n      .update(DST)\n      .update(i2osp(DST.length, 1))\n      .digest()\n  );\n}\n\n/**\n * Hashes arbitrary-length byte strings to a list of one or more elements of a finite field F\n * https://www.rfc-editor.org/rfc/rfc9380#section-5.2\n * @param msg a byte string containing the message to hash\n * @param count the number of elements of F to output\n * @param options `{DST: string, p: bigint, m: number, k: number, expand: 'xmd' | 'xof', hash: H}`, see above\n * @returns [u_0, ..., u_(count - 1)], a list of field elements.\n */\nexport function hash_to_field(msg: Uint8Array, count: number, options: Opts): bigint[][] {\n  validateObject(options, {\n    DST: 'stringOrUint8Array',\n    p: 'bigint',\n    m: 'isSafeInteger',\n    k: 'isSafeInteger',\n    hash: 'hash',\n  });\n  const { p, k, m, hash, expand, DST: _DST } = options;\n  abytes(msg);\n  anum(count);\n  const DST = typeof _DST === 'string' ? utf8ToBytes(_DST) : _DST;\n  const log2p = p.toString(2).length;\n  const L = Math.ceil((log2p + k) / 8); // section 5.1 of ietf draft link above\n  const len_in_bytes = count * m * L;\n  let prb; // pseudo_random_bytes\n  if (expand === 'xmd') {\n    prb = expand_message_xmd(msg, DST, len_in_bytes, hash);\n  } else if (expand === 'xof') {\n    prb = expand_message_xof(msg, DST, len_in_bytes, k, hash);\n  } else if (expand === '_internal_pass') {\n    // for internal tests only\n    prb = msg;\n  } else {\n    throw new Error('expand must be \"xmd\" or \"xof\"');\n  }\n  const u = new Array(count);\n  for (let i = 0; i < count; i++) {\n    const e = new Array(m);\n    for (let j = 0; j < m; j++) {\n      const elm_offset = L * (j + i * m);\n      const tv = prb.subarray(elm_offset, elm_offset + L);\n      e[j] = mod(os2ip(tv), p);\n    }\n    u[i] = e;\n  }\n  return u;\n}\n\nexport function isogenyMap<T, F extends IField<T>>(field: F, map: [T[], T[], T[], T[]]) {\n  // Make same order as in spec\n  const COEFF = map.map((i) => Array.from(i).reverse());\n  return (x: T, y: T) => {\n    const [xNum, xDen, yNum, yDen] = COEFF.map((val) =>\n      val.reduce((acc, i) => field.add(field.mul(acc, x), i))\n    );\n    x = field.div(xNum, xDen); // xNum / xDen\n    y = field.mul(y, field.div(yNum, yDen)); // y * (yNum / yDev)\n    return { x, y };\n  };\n}\n\nexport interface H2CPoint<T> extends Group<H2CPoint<T>> {\n  add(rhs: H2CPoint<T>): H2CPoint<T>;\n  toAffine(iz?: bigint): AffinePoint<T>;\n  clearCofactor(): H2CPoint<T>;\n  assertValidity(): void;\n}\n\nexport interface H2CPointConstructor<T> extends GroupConstructor<H2CPoint<T>> {\n  fromAffine(ap: AffinePoint<T>): H2CPoint<T>;\n}\n\nexport type MapToCurve<T> = (scalar: bigint[]) => AffinePoint<T>;\n\n// Separated from initialization opts, so users won't accidentally change per-curve parameters\n// (changing DST is ok!)\nexport type htfBasicOpts = { DST: UnicodeOrBytes };\n\nexport function createHasher<T>(\n  Point: H2CPointConstructor<T>,\n  mapToCurve: MapToCurve<T>,\n  def: Opts & { encodeDST?: UnicodeOrBytes }\n) {\n  if (typeof mapToCurve !== 'function') throw new Error('mapToCurve() must be defined');\n  return {\n    // Encodes byte string to elliptic curve.\n    // hash_to_curve from https://www.rfc-editor.org/rfc/rfc9380#section-3\n    hashToCurve(msg: Uint8Array, options?: htfBasicOpts) {\n      const u = hash_to_field(msg, 2, { ...def, DST: def.DST, ...options } as Opts);\n      const u0 = Point.fromAffine(mapToCurve(u[0]));\n      const u1 = Point.fromAffine(mapToCurve(u[1]));\n      const P = u0.add(u1).clearCofactor();\n      P.assertValidity();\n      return P;\n    },\n\n    // Encodes byte string to elliptic curve.\n    // encode_to_curve from https://www.rfc-editor.org/rfc/rfc9380#section-3\n    encodeToCurve(msg: Uint8Array, options?: htfBasicOpts) {\n      const u = hash_to_field(msg, 1, { ...def, DST: def.encodeDST, ...options } as Opts);\n      const P = Point.fromAffine(mapToCurve(u[0])).clearCofactor();\n      P.assertValidity();\n      return P;\n    },\n  };\n}\n","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { sha256 } from '@noble/hashes/sha256';\nimport { randomBytes } from '@noble/hashes/utils';\nimport { Field, mod, pow2 } from './abstract/modular.js';\nimport { ProjPointType as PointType, mapToCurveSimpleSWU } from './abstract/weierstrass.js';\nimport type { Hex, PrivKey } from './abstract/utils.js';\nimport { bytesToNumberBE, concatBytes, ensureBytes, numberToBytesBE } from './abstract/utils.js';\nimport { createHasher, isogenyMap } from './abstract/hash-to-curve.js';\nimport { createCurve } from './_shortw_utils.js';\n\nconst secp256k1P = BigInt('0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f');\nconst secp256k1N = BigInt('0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141');\nconst _1n = BigInt(1);\nconst _2n = BigInt(2);\nconst divNearest = (a: bigint, b: bigint) => (a + b / _2n) / b;\n\n/**\n * √n = n^((p+1)/4) for fields p = 3 mod 4. We unwrap the loop and multiply bit-by-bit.\n * (P+1n/4n).toString(2) would produce bits [223x 1, 0, 22x 1, 4x 0, 11, 00]\n */\nfunction sqrtMod(y: bigint): bigint {\n  const P = secp256k1P;\n  // prettier-ignore\n  const _3n = BigInt(3), _6n = BigInt(6), _11n = BigInt(11), _22n = BigInt(22);\n  // prettier-ignore\n  const _23n = BigInt(23), _44n = BigInt(44), _88n = BigInt(88);\n  const b2 = (y * y * y) % P; // x^3, 11\n  const b3 = (b2 * b2 * y) % P; // x^7\n  const b6 = (pow2(b3, _3n, P) * b3) % P;\n  const b9 = (pow2(b6, _3n, P) * b3) % P;\n  const b11 = (pow2(b9, _2n, P) * b2) % P;\n  const b22 = (pow2(b11, _11n, P) * b11) % P;\n  const b44 = (pow2(b22, _22n, P) * b22) % P;\n  const b88 = (pow2(b44, _44n, P) * b44) % P;\n  const b176 = (pow2(b88, _88n, P) * b88) % P;\n  const b220 = (pow2(b176, _44n, P) * b44) % P;\n  const b223 = (pow2(b220, _3n, P) * b3) % P;\n  const t1 = (pow2(b223, _23n, P) * b22) % P;\n  const t2 = (pow2(t1, _6n, P) * b2) % P;\n  const root = pow2(t2, _2n, P);\n  if (!Fp.eql(Fp.sqr(root), y)) throw new Error('Cannot find square root');\n  return root;\n}\n\nconst Fp = Field(secp256k1P, undefined, undefined, { sqrt: sqrtMod });\n\nexport const secp256k1 = createCurve(\n  {\n    a: BigInt(0), // equation params: a, b\n    b: BigInt(7), // Seem to be rigid: bitcointalk.org/index.php?topic=289795.msg3183975#msg3183975\n    Fp, // Field's prime: 2n**256n - 2n**32n - 2n**9n - 2n**8n - 2n**7n - 2n**6n - 2n**4n - 1n\n    n: secp256k1N, // Curve order, total count of valid points in the field\n    // Base point (x, y) aka generator point\n    Gx: BigInt('55066263022277343669578718895168534326250603453777594175500187360389116729240'),\n    Gy: BigInt('32670510020758816978083085130507043184471273380659243275938904335757337482424'),\n    h: BigInt(1), // Cofactor\n    lowS: true, // Allow only low-S signatures by default in sign() and verify()\n    /**\n     * secp256k1 belongs to Koblitz curves: it has efficiently computable endomorphism.\n     * Endomorphism uses 2x less RAM, speeds up precomputation by 2x and ECDH / key recovery by 20%.\n     * For precomputed wNAF it trades off 1/2 init time & 1/3 ram for 20% perf hit.\n     * Explanation: https://gist.github.com/paulmillr/eb670806793e84df628a7c434a873066\n     */\n    endo: {\n      beta: BigInt('0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee'),\n      splitScalar: (k: bigint) => {\n        const n = secp256k1N;\n        const a1 = BigInt('0x3086d221a7d46bcde86c90e49284eb15');\n        const b1 = -_1n * BigInt('0xe4437ed6010e88286f547fa90abfe4c3');\n        const a2 = BigInt('0x114ca50f7a8e2f3f657c1108d9d44cfd8');\n        const b2 = a1;\n        const POW_2_128 = BigInt('0x100000000000000000000000000000000'); // (2n**128n).toString(16)\n\n        const c1 = divNearest(b2 * k, n);\n        const c2 = divNearest(-b1 * k, n);\n        let k1 = mod(k - c1 * a1 - c2 * a2, n);\n        let k2 = mod(-c1 * b1 - c2 * b2, n);\n        const k1neg = k1 > POW_2_128;\n        const k2neg = k2 > POW_2_128;\n        if (k1neg) k1 = n - k1;\n        if (k2neg) k2 = n - k2;\n        if (k1 > POW_2_128 || k2 > POW_2_128) {\n          throw new Error('splitScalar: Endomorphism failed, k=' + k);\n        }\n        return { k1neg, k1, k2neg, k2 };\n      },\n    },\n  },\n  sha256\n);\n\n// Schnorr signatures are superior to ECDSA from above. Below is Schnorr-specific BIP0340 code.\n// https://github.com/bitcoin/bips/blob/master/bip-0340.mediawiki\nconst _0n = BigInt(0);\nconst fe = (x: bigint) => typeof x === 'bigint' && _0n < x && x < secp256k1P;\nconst ge = (x: bigint) => typeof x === 'bigint' && _0n < x && x < secp256k1N;\n/** An object mapping tags to their tagged hash prefix of [SHA256(tag) | SHA256(tag)] */\nconst TAGGED_HASH_PREFIXES: { [tag: string]: Uint8Array } = {};\nfunction taggedHash(tag: string, ...messages: Uint8Array[]): Uint8Array {\n  let tagP = TAGGED_HASH_PREFIXES[tag];\n  if (tagP === undefined) {\n    const tagH = sha256(Uint8Array.from(tag, (c) => c.charCodeAt(0)));\n    tagP = concatBytes(tagH, tagH);\n    TAGGED_HASH_PREFIXES[tag] = tagP;\n  }\n  return sha256(concatBytes(tagP, ...messages));\n}\n\n// ECDSA compact points are 33-byte. Schnorr is 32: we strip first byte 0x02 or 0x03\nconst pointToBytes = (point: PointType<bigint>) => point.toRawBytes(true).slice(1);\nconst numTo32b = (n: bigint) => numberToBytesBE(n, 32);\nconst modP = (x: bigint) => mod(x, secp256k1P);\nconst modN = (x: bigint) => mod(x, secp256k1N);\nconst Point = secp256k1.ProjectivePoint;\nconst GmulAdd = (Q: PointType<bigint>, a: bigint, b: bigint) =>\n  Point.BASE.multiplyAndAddUnsafe(Q, a, b);\n\n// Calculate point, scalar and bytes\nfunction schnorrGetExtPubKey(priv: PrivKey) {\n  let d_ = secp256k1.utils.normPrivateKeyToScalar(priv); // same method executed in fromPrivateKey\n  let p = Point.fromPrivateKey(d_); // P = d'⋅G; 0 < d' < n check is done inside\n  const scalar = p.hasEvenY() ? d_ : modN(-d_);\n  return { scalar: scalar, bytes: pointToBytes(p) };\n}\n/**\n * lift_x from BIP340. Convert 32-byte x coordinate to elliptic curve point.\n * @returns valid point checked for being on-curve\n */\nfunction lift_x(x: bigint): PointType<bigint> {\n  if (!fe(x)) throw new Error('bad x: need 0 < x < p'); // Fail if x ≥ p.\n  const xx = modP(x * x);\n  const c = modP(xx * x + BigInt(7)); // Let c = x³ + 7 mod p.\n  let y = sqrtMod(c); // Let y = c^(p+1)/4 mod p.\n  if (y % _2n !== _0n) y = modP(-y); // Return the unique point P such that x(P) = x and\n  const p = new Point(x, y, _1n); // y(P) = y if y mod 2 = 0 or y(P) = p-y otherwise.\n  p.assertValidity();\n  return p;\n}\n/**\n * Create tagged hash, convert it to bigint, reduce modulo-n.\n */\nfunction challenge(...args: Uint8Array[]): bigint {\n  return modN(bytesToNumberBE(taggedHash('BIP0340/challenge', ...args)));\n}\n\n/**\n * Schnorr public key is just `x` coordinate of Point as per BIP340.\n */\nfunction schnorrGetPublicKey(privateKey: Hex): Uint8Array {\n  return schnorrGetExtPubKey(privateKey).bytes; // d'=int(sk). Fail if d'=0 or d'≥n. Ret bytes(d'⋅G)\n}\n\n/**\n * Creates Schnorr signature as per BIP340. Verifies itself before returning anything.\n * auxRand is optional and is not the sole source of k generation: bad CSPRNG won't be dangerous.\n */\nfunction schnorrSign(\n  message: Hex,\n  privateKey: PrivKey,\n  auxRand: Hex = randomBytes(32)\n): Uint8Array {\n  const m = ensureBytes('message', message);\n  const { bytes: px, scalar: d } = schnorrGetExtPubKey(privateKey); // checks for isWithinCurveOrder\n  const a = ensureBytes('auxRand', auxRand, 32); // Auxiliary random data a: a 32-byte array\n  const t = numTo32b(d ^ bytesToNumberBE(taggedHash('BIP0340/aux', a))); // Let t be the byte-wise xor of bytes(d) and hash/aux(a)\n  const rand = taggedHash('BIP0340/nonce', t, px, m); // Let rand = hash/nonce(t || bytes(P) || m)\n  const k_ = modN(bytesToNumberBE(rand)); // Let k' = int(rand) mod n\n  if (k_ === _0n) throw new Error('sign failed: k is zero'); // Fail if k' = 0.\n  const { bytes: rx, scalar: k } = schnorrGetExtPubKey(k_); // Let R = k'⋅G.\n  const e = challenge(rx, px, m); // Let e = int(hash/challenge(bytes(R) || bytes(P) || m)) mod n.\n  const sig = new Uint8Array(64); // Let sig = bytes(R) || bytes((k + ed) mod n).\n  sig.set(rx, 0);\n  sig.set(numTo32b(modN(k + e * d)), 32);\n  // If Verify(bytes(P), m, sig) (see below) returns failure, abort\n  if (!schnorrVerify(sig, m, px)) throw new Error('sign: Invalid signature produced');\n  return sig;\n}\n\n/**\n * Verifies Schnorr signature.\n * Will swallow errors & return false except for initial type validation of arguments.\n */\nfunction schnorrVerify(signature: Hex, message: Hex, publicKey: Hex): boolean {\n  const sig = ensureBytes('signature', signature, 64);\n  const m = ensureBytes('message', message);\n  const pub = ensureBytes('publicKey', publicKey, 32);\n  try {\n    const P = lift_x(bytesToNumberBE(pub)); // P = lift_x(int(pk)); fail if that fails\n    const r = bytesToNumberBE(sig.subarray(0, 32)); // Let r = int(sig[0:32]); fail if r ≥ p.\n    if (!fe(r)) return false;\n    const s = bytesToNumberBE(sig.subarray(32, 64)); // Let s = int(sig[32:64]); fail if s ≥ n.\n    if (!ge(s)) return false;\n    const e = challenge(numTo32b(r), pointToBytes(P), m); // int(challenge(bytes(r)||bytes(P)||m))%n\n    const R = GmulAdd(P, s, modN(-e)); // R = s⋅G - e⋅P\n    if (!R || !R.hasEvenY() || R.toAffine().x !== r) return false; // -eP == (n-e)P\n    return true; // Fail if is_infinite(R) / not has_even_y(R) / x(R) ≠ r.\n  } catch (error) {\n    return false;\n  }\n}\n\nexport const schnorr = /* @__PURE__ */ (() => ({\n  getPublicKey: schnorrGetPublicKey,\n  sign: schnorrSign,\n  verify: schnorrVerify,\n  utils: {\n    randomPrivateKey: secp256k1.utils.randomPrivateKey,\n    lift_x,\n    pointToBytes,\n    numberToBytesBE,\n    bytesToNumberBE,\n    taggedHash,\n    mod,\n  },\n}))();\n\nconst isoMap = /* @__PURE__ */ (() =>\n  isogenyMap(\n    Fp,\n    [\n      // xNum\n      [\n        '0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa8c7',\n        '0x7d3d4c80bc321d5b9f315cea7fd44c5d595d2fc0bf63b92dfff1044f17c6581',\n        '0x534c328d23f234e6e2a413deca25caece4506144037c40314ecbd0b53d9dd262',\n        '0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa88c',\n      ],\n      // xDen\n      [\n        '0xd35771193d94918a9ca34ccbb7b640dd86cd409542f8487d9fe6b745781eb49b',\n        '0xedadc6f64383dc1df7c4b2d51b54225406d36b641f5e41bbc52a56612a8c6d14',\n        '0x0000000000000000000000000000000000000000000000000000000000000001', // LAST 1\n      ],\n      // yNum\n      [\n        '0x4bda12f684bda12f684bda12f684bda12f684bda12f684bda12f684b8e38e23c',\n        '0xc75e0c32d5cb7c0fa9d0a54b12a0a6d5647ab046d686da6fdffc90fc201d71a3',\n        '0x29a6194691f91a73715209ef6512e576722830a201be2018a765e85a9ecee931',\n        '0x2f684bda12f684bda12f684bda12f684bda12f684bda12f684bda12f38e38d84',\n      ],\n      // yDen\n      [\n        '0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffff93b',\n        '0x7a06534bb8bdb49fd5e9e6632722c2989467c1bfc8e8d978dfb425d2685c2573',\n        '0x6484aa716545ca2cf3a70c3fa8fe337e0a3d21162f0d6299a7bf8192bfd2a76f',\n        '0x0000000000000000000000000000000000000000000000000000000000000001', // LAST 1\n      ],\n    ].map((i) => i.map((j) => BigInt(j))) as [bigint[], bigint[], bigint[], bigint[]]\n  ))();\nconst mapSWU = /* @__PURE__ */ (() =>\n  mapToCurveSimpleSWU(Fp, {\n    A: BigInt('0x3f8731abdd661adca08a5558f0f5d272e953d363cb6f0e5d405447c01a444533'),\n    B: BigInt('1771'),\n    Z: Fp.create(BigInt('-11')),\n  }))();\nconst htf = /* @__PURE__ */ (() =>\n  createHasher(\n    secp256k1.ProjectivePoint,\n    (scalars: bigint[]) => {\n      const { x, y } = mapSWU(Fp.create(scalars[0]));\n      return isoMap(x, y);\n    },\n    {\n      DST: 'secp256k1_XMD:SHA-256_SSWU_RO_',\n      encodeDST: 'secp256k1_XMD:SHA-256_SSWU_NU_',\n      p: Fp.ORDER,\n      m: 1,\n      k: 128,\n      expand: 'xmd',\n      hash: sha256,\n    }\n  ))();\nexport const hashToCurve = /* @__PURE__ */ (() => htf.hashToCurve)();\nexport const encodeToCurve = /* @__PURE__ */ (() => htf.encodeToCurve)();\n","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { hmac } from '@noble/hashes/hmac';\nimport { concatBytes, randomBytes } from '@noble/hashes/utils';\nimport { weierstrass, CurveType } from './abstract/weierstrass.js';\nimport { CHash } from './abstract/utils.js';\n\n// connects noble-curves to noble-hashes\nexport function getHash(hash: CHash) {\n  return {\n    hash,\n    hmac: (key: Uint8Array, ...msgs: Uint8Array[]) => hmac(hash, key, concatBytes(...msgs)),\n    randomBytes,\n  };\n}\n// Same API as @noble/hashes, with ability to create curve with custom hash\ntype CurveDef = Readonly<Omit<CurveType, 'hash' | 'hmac' | 'randomBytes'>>;\nexport function createCurve(curveDef: CurveDef, defHash: CHash) {\n  const create = (hash: CHash) => weierstrass({ ...curveDef, ...getHash(hash) });\n  return Object.freeze({ ...create(defHash), create });\n}\n"],"names":["_0n","BigInt","_1n","_2n","isBytes","a","Uint8Array","constructor","name","abytes","item","Error","hexes","Array","from","length","_","i","toString","padStart","bytesToHex","bytes","hex","numberToHexUnpadded","num","hexToNumber","asciis","asciiToBase16","char","hexToBytes","hl","al","array","ai","hi","n1","charCodeAt","n2","undefined","bytesToNumberBE","bytesToNumberLE","reverse","numberToBytesBE","n","len","numberToBytesLE","numberToVarBytesBE","ensureBytes","title","expectedLength","res","e","concatBytes","sum","pad","set","equalBytes","b","diff","utf8ToBytes","str","TextEncoder","encode","bitLen","bitGet","pos","bitSet","value","bitMask","u8n","data","u8fr","arr","createHmacDrbg","hashLen","qByteLen","hmacFn","v","k","reset","fill","h","reseed","seed","gen","out","sl","slice","push","pred","validatorFns","bigint","val","function","boolean","string","stringOrUint8Array","isSafeInteger","Number","isArray","field","object","Fp","isValid","hash","outputLen","validateObject","validators","optValidators","checkField","fieldName","type","isOptional","checkVal","String","Object","entries","_3n","_4n","_5n","_8n","mod","result","pow","power","modulo","pow2","x","invert","number","y","u","q","r","m","FpSqrt","P","p1div4","root","eql","sqr","c1","mul","nv","sub","ONE","Q","S","Z","legendreC","Q1div2","neg","g","ZERO","t2","ge","tonelliShanks","FIELD_FIELDS","validateField","reduce","map","ORDER","MASK","BYTES","BITS","FpPow","f","p","d","FpInvertBatch","nums","tmp","lastMultiplied","acc","is0","inverted","inv","reduceRight","nLength","nBitLength","_nBitLength","nByteLength","Math","ceil","getFieldBytesLength","fieldOrder","bitLength","getMinHashLength","validateBasic","curve","Gx","Gy","freeze","b2n","ut","h2b","DER","Err","_parseInt","E","subarray","l","toSig","sBytes","s","hexFromSig","sig","parseInt","shl","rhl","rl","weierstrassPoints","opts","CURVE","allowedPrivateKeyLengths","wrapPrivateKey","isTorsionFree","clearCofactor","allowInfinityPoint","fromBytes","toBytes","endo","beta","splitScalar","validatePointOpts","_c","point","_isCompressed","toAffine","tail","weierstrassEquation","x2","x3","add","isWithinCurveOrder","assertGE","normPrivateKeyToScalar","key","lengths","includes","error","pointPrecomputes","Map","assertPrjPoint","other","Point","px","py","pz","this","windowSize","_WINDOW_SIZE","delete","left","right","isOdd","X1","Y1","Z1","X2","Y2","Z2","U1","U2","b3","X3","Y3","Z3","t0","t1","t3","t4","t5","negate","equals","wnaf","wNAFCached","comp","toInv","invertBatch","fromAffine","I","unsafeLadder","k1neg","k1","k2neg","k2","k1p","k2p","double","scalar","fake","wNAF","f1p","f2p","constTimeNegate","normalizeZ","G","BASE","multiply","multiplyUnsafe","iz","z","ax","ay","zz","cofactor","isCompressed","assertValidity","toRawBytes","points","privateKey","_bits","c","bits","condition","W","windows","elm","precomputeWindow","base","window","precomputes","mask","maxNumber","shiftBy","offset","wbits","offset1","offset2","abs","cond1","cond2","precomputesMap","transform","get","ProjectivePoint","weierstrass","curveDef","hmac","randomBytes","bits2int","bits2int_modN","lowS","validateOpts","CURVE_ORDER","compressedLen","uncompressedLen","modN","invN","cat","hasEvenY","head","y2","sqrt","sqrtError","suffix","message","numToNByteStr","isBiggerThanHalfOrder","normalizeS","slcNum","to","Signature","recovery","msgHash","rec","radj","prefix","R","fromHex","ir","u1","u2","multiplyAndAddUnsafe","hasHighS","toDERHex","toCompactHex","utils","isValidPrivateKey","randomPrivateKey","isLE","fieldLen","minLen","reduced","precompute","_setWindowSize","isProbPub","delta","ORDER_MASK","int2octets","prepSig","defaultSigOpts","some","prehash","ent","extraEntropy","h1int","seedArgs","k2sig","kBytes","ik","normS","defaultVerOpts","getPublicKey","fromPrivateKey","getSharedSecret","privateA","publicB","sign","privKey","C","drbg","verify","signature","publicKey","sg","_sig","fromDER","derError","fromCompact","is","mapToCurveSimpleSWU","A","B","sqrtRatio","o","_2n_pow_c1_1","_2n_pow_c1","c2","c3","c4","c5","c6","c7","tv1","tv2","tv3","tv5","tv4","isQR","cmov","tvv5","e1","y1","SWUFpSqrtRatio","tv6","div","os2ip","i2osp","strxor","anum","hash_to_field","msg","count","options","DST","expand","_DST","prb","log2p","L","len_in_bytes","lenInBytes","H","b_in_bytes","r_in_bytes","blockLen","ell","DST_prime","Z_pad","l_i_b_str","b_0","args","expand_message_xmd","dkLen","create","update","digest","expand_message_xof","j","elm_offset","tv","secp256k1P","secp256k1N","divNearest","sqrtMod","_6n","_11n","_22n","_23n","_44n","_88n","b2","b6","b9","b11","b22","b44","b88","b176","b220","b223","redef","sqrtP","lhs","rhs","sqrN","addN","subN","mulN","lst","Field","secp256k1","defHash","msgs","getHash","createCurve","a1","b1","a2","POW_2_128","sha256","fe","TAGGED_HASH_PREFIXES","taggedHash","tag","tagP","tagH","messages","pointToBytes","numTo32b","modP","schnorrGetExtPubKey","priv","d_","lift_x","xx","challenge","schnorrGetPublicKey","schnorrSign","auxRand","t","rand","k_","rx","schnorrVerify","pub","schnorr","isoMap","COEFF","xNum","xDen","yNum","yDen","isogenyMap","mapSWU","htf","mapToCurve","def","hashToCurve","u0","encodeToCurve","encodeDST","createHasher","scalars"],"sourceRoot":""}