{"version":3,"file":"static/js/392.a94b6903.chunk.js","mappings":"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","sources":["components/badge-status/styles.tsx","components/badge-status/BadgeStatus.tsx","components/custom-breadcrumbs/LinkItem.tsx","components/custom-breadcrumbs/CustomBreadcrumbs.tsx","components/skeleton/SkeletonPostItem.tsx","components/skeleton/SkeletonPostDetails.tsx","components/skeleton/SkeletonProductItem.tsx","components/skeleton/SkeletonMailNavItem.tsx","components/skeleton/SkeletonKanbanColumn.tsx","components/skeleton/SkeletonProductDetails.tsx","components/skeleton/SkeletonConversationItem.tsx","sections/@dashboard/chat/nav/ChatNavItem.tsx","sections/@dashboard/chat/nav/ChatNavList.tsx","sections/@dashboard/chat/nav/ChatNavSearch.tsx","sections/@dashboard/chat/nav/ChatNavAccount.tsx","sections/@dashboard/chat/nav/ChatNavSearchResults.tsx","sections/@dashboard/chat/nav/ChatNav.tsx","sections/@dashboard/chat/room/ChatRoomCollapseButton.tsx","sections/@dashboard/chat/room/ChatRoomAttachments.tsx","sections/@dashboard/chat/room/ChatRoomSingle.tsx","sections/@dashboard/chat/room/ChatRoomParticipantInfoDialog.tsx","sections/@dashboard/chat/room/ChatRoomGroup.tsx","sections/@dashboard/chat/room/ChatRoom.tsx","sections/@dashboard/chat/message/ChatMessageInput.tsx","sections/@dashboard/chat/message/ChatMessageItem.tsx","sections/@dashboard/chat/message/ChatMessageList.tsx","sections/@dashboard/chat/header/ChatHeaderDetail.tsx","sections/@dashboard/chat/header/ChatHeaderCompose.tsx","sections/@dashboard/chat/Chat.tsx","pages/dashboard/ChatPage.tsx","utils/uuidv4.ts"],"sourcesContent":["// @mui\nimport { Theme, styled } from '@mui/material/styles';\n//\nimport { BadgeStatusValue, BadgeSizeValue } from './types';\n\n// ----------------------------------------------------------------------\n\nexport const StyledBadgeStatus = styled('span')(\n  ({\n    theme,\n    ownerState,\n  }: {\n    theme: Theme;\n    ownerState: {\n      size: BadgeSizeValue;\n      status: BadgeStatusValue;\n    };\n  }) => {\n    const { status, size } = ownerState;\n\n    return {\n      width: 10,\n      height: 10,\n      display: 'flex',\n      borderRadius: '50%',\n      alignItems: 'center',\n      justifyContent: 'center',\n      '&:before, &:after': {\n        content: \"''\",\n        borderRadius: 1,\n        backgroundColor: theme.palette.common.white,\n      },\n\n      ...(size === 'small' && { width: 8, height: 8 }),\n\n      ...(size === 'large' && { width: 12, height: 12 }),\n\n      ...(status === 'offline' && { backgroundColor: 'transparent' }),\n\n      ...(status === 'away' && {\n        backgroundColor: theme.palette.warning.main,\n        '&:before': {\n          width: 2,\n          height: 4,\n          transform: 'translateX(1px) translateY(-1px)',\n        },\n        '&:after': {\n          width: 2,\n          height: 4,\n          transform: 'translateY(1px) rotate(125deg)',\n        },\n      }),\n\n      ...(status === 'busy' && {\n        backgroundColor: theme.palette.error.main,\n        '&:before': { width: 6, height: 2 },\n      }),\n\n      ...(status === 'online' && {\n        backgroundColor: theme.palette.success.main,\n      }),\n\n      ...(status === 'invisible' && {\n        backgroundColor: theme.palette.text.disabled,\n        '&:before': {\n          width: 6,\n          height: 6,\n          borderRadius: '50%',\n        },\n      }),\n\n      ...(status === 'unread' && {\n        backgroundColor: theme.palette.info.main,\n      }),\n    };\n  }\n);\n","// @mui\nimport { useTheme } from '@mui/material/styles';\n//\nimport { StyledBadgeStatus } from './styles';\nimport { BadgeStatusProps } from './types';\n\n// ----------------------------------------------------------------------\n\nexport default function BadgeStatus({ size = 'medium', status = 'offline', sx }: BadgeStatusProps) {\n  const theme = useTheme();\n\n  return <StyledBadgeStatus ownerState={{ status, size }} sx={sx} theme={theme} />;\n}\n","import { Link as RouterLink } from 'react-router-dom';\n// @mui\nimport { Box, Link } from '@mui/material';\n//\nimport { BreadcrumbsLinkProps } from './types';\n\n// ----------------------------------------------------------------------\n\ntype Props = {\n  link: BreadcrumbsLinkProps;\n  activeLast?: boolean;\n  disabled: boolean;\n};\n\nexport default function BreadcrumbsLink({ link, activeLast, disabled }: Props) {\n  const { name, href, icon } = link;\n\n  const styles = {\n    display: 'inline-flex',\n    alignItems: 'center',\n    color: 'text.primary',\n    ...(disabled &&\n      !activeLast && {\n        cursor: 'default',\n        pointerEvents: 'none',\n        color: 'text.disabled',\n      }),\n  };\n\n  const renderContent = (\n    <>\n      {icon && (\n        <Box\n          component=\"span\"\n          sx={{\n            mr: 1,\n            display: 'inherit',\n            '& svg': { width: 20, height: 20 },\n          }}\n        >\n          {icon}\n        </Box>\n      )}\n\n      {name}\n    </>\n  );\n\n  if (href) {\n    return (\n      <Link component={RouterLink} to={href} sx={styles}>\n        {renderContent}\n      </Link>\n    );\n  }\n\n  return <Box sx={styles}> {renderContent} </Box>;\n}\n","// @mui\nimport { Box, Link, Stack, Typography, Breadcrumbs } from '@mui/material';\n//\nimport { CustomBreadcrumbsProps } from './types';\nimport LinkItem from './LinkItem';\n\n// ----------------------------------------------------------------------\n\nexport default function CustomBreadcrumbs({\n  links,\n  action,\n  heading,\n  moreLink,\n  activeLast,\n  sx,\n  ...other\n}: CustomBreadcrumbsProps) {\n  const lastLink = links[links.length - 1].name;\n\n  return (\n    <Box sx={{ mb: 5, ...sx }}>\n      <Stack direction=\"row\" alignItems=\"center\">\n        <Box sx={{ flexGrow: 1 }}>\n          {/* HEADING */}\n          {heading && (\n            <Typography variant=\"h4\" gutterBottom>\n              {heading}\n            </Typography>\n          )}\n\n          {/* BREADCRUMBS */}\n          {!!links.length && (\n            <Breadcrumbs separator={<Separator />} {...other}>\n              {links.map((link) => (\n                <LinkItem\n                  key={link.name || ''}\n                  link={link}\n                  activeLast={activeLast}\n                  disabled={link.name === lastLink}\n                />\n              ))}\n            </Breadcrumbs>\n          )}\n        </Box>\n\n        {action && <Box sx={{ flexShrink: 0 }}> {action} </Box>}\n      </Stack>\n\n      {/* MORE LINK */}\n      {!!moreLink && (\n        <Box sx={{ mt: 2 }}>\n          {moreLink.map((href) => (\n            <Link\n              noWrap\n              key={href}\n              href={href}\n              variant=\"body2\"\n              target=\"_blank\"\n              rel=\"noopener\"\n              sx={{ display: 'table' }}\n            >\n              {href}\n            </Link>\n          ))}\n        </Box>\n      )}\n    </Box>\n  );\n}\n\n// ----------------------------------------------------------------------\n\nfunction Separator() {\n  return (\n    <Box\n      component=\"span\"\n      sx={{ width: 4, height: 4, borderRadius: '50%', bgcolor: 'text.disabled' }}\n    />\n  );\n}\n","// @mui\nimport { Box, Skeleton, Grid, GridProps } from '@mui/material';\n\n// ----------------------------------------------------------------------\n\nexport default function SkeletonPostItem({ ...other }: GridProps) {\n  return (\n    <Grid item xs={12} sm={6} md={3} {...other}>\n      <Skeleton variant=\"rectangular\" width=\"100%\" sx={{ height: 200, borderRadius: 2 }} />\n      <Box sx={{ display: 'flex', mt: 1.5 }}>\n        <Skeleton variant=\"circular\" sx={{ width: 40, height: 40 }} />\n        <Skeleton variant=\"text\" sx={{ mx: 1, flexGrow: 1 }} />\n      </Box>\n    </Grid>\n  );\n}\n","// @mui\nimport { Box, Skeleton } from '@mui/material';\n\n// ----------------------------------------------------------------------\n\nexport default function SkeletonPostDetails() {\n  return (\n    <>\n      <Skeleton width=\"100%\" height={560} variant=\"rectangular\" sx={{ borderRadius: 2 }} />\n      <Box sx={{ mt: 3, display: 'flex', alignItems: 'center' }}>\n        <Skeleton variant=\"circular\" width={64} height={64} />\n        <Box sx={{ flexGrow: 1, ml: 2 }}>\n          <Skeleton variant=\"text\" height={20} />\n          <Skeleton variant=\"text\" height={20} />\n          <Skeleton variant=\"text\" height={20} />\n        </Box>\n      </Box>\n    </>\n  );\n}\n","// @mui\nimport { Card, Skeleton, Stack, CardProps } from '@mui/material';\n\n// ----------------------------------------------------------------------\n\nexport default function SkeletonProductItem({ ...other }: CardProps) {\n  return (\n    <Card {...other}>\n      <Skeleton variant=\"rectangular\" sx={{ paddingTop: '100%' }} />\n      <Stack spacing={2} sx={{ p: 3 }}>\n        <Skeleton variant=\"text\" sx={{ width: 0.5 }} />\n        <Stack direction=\"row\" justifyContent=\"space-between\" alignItems=\"center\">\n          <Stack direction=\"row\">\n            <Skeleton variant=\"circular\" sx={{ width: 16, height: 16 }} />\n            <Skeleton variant=\"circular\" sx={{ width: 16, height: 16 }} />\n            <Skeleton variant=\"circular\" sx={{ width: 16, height: 16 }} />\n          </Stack>\n          <Skeleton variant=\"text\" sx={{ width: 40 }} />\n        </Stack>\n      </Stack>\n    </Card>\n  );\n}\n","// @mui\nimport { Stack, Skeleton, StackProps } from '@mui/material';\n\n// ----------------------------------------------------------------------\n\nexport default function SkeletonMailNavItem({ sx, ...other }: StackProps) {\n  return (\n    <Stack spacing={1} direction=\"row\" alignItems=\"center\" sx={{ px: 3, py: 1, ...sx }} {...other}>\n      <Skeleton variant=\"circular\" width={32} height={32} />\n      <Skeleton variant=\"text\" sx={{ width: 0.5, height: 16 }} />\n    </Stack>\n  );\n}\n","// @mui\nimport { Stack, Skeleton, Box, Paper, BoxProps } from '@mui/material';\n\n// ----------------------------------------------------------------------\n\nexport default function SkeletonKanbanColumn({ ...other }: BoxProps) {\n  return (\n    <Box gap={3} display=\"grid\" gridTemplateColumns=\"repeat(4, 1fr)\" {...other}>\n      {[...Array(3)].map((_, index) => (\n        <Paper variant=\"outlined\" key={index} sx={{ p: 2.5, width: 310 }}>\n          <Stack spacing={2}>\n            <Skeleton variant=\"rectangular\" sx={{ paddingTop: '75%', borderRadius: 1.5 }} />\n\n            {index === 0 && (\n              <Skeleton variant=\"rectangular\" sx={{ paddingTop: '25%', borderRadius: 1.5 }} />\n            )}\n\n            {index !== 2 && (\n              <Skeleton variant=\"rectangular\" sx={{ paddingTop: '25%', borderRadius: 1.5 }} />\n            )}\n          </Stack>\n        </Paper>\n      ))}\n    </Box>\n  );\n}\n","// @mui\nimport { Grid, Skeleton, GridProps } from '@mui/material';\n\n// ----------------------------------------------------------------------\n\nexport default function SkeletonProductDetails({ ...other }: GridProps) {\n  return (\n    <Grid container spacing={3} {...other}>\n      <Grid item xs={12} md={6} lg={7}>\n        <Skeleton variant=\"rectangular\" width=\"100%\" sx={{ paddingTop: '100%', borderRadius: 2 }} />\n      </Grid>\n\n      <Grid item xs={12} md={6} lg={5}>\n        <Skeleton variant=\"circular\" width={80} height={80} />\n        <Skeleton variant=\"text\" height={240} />\n        <Skeleton variant=\"text\" height={40} />\n        <Skeleton variant=\"text\" height={40} />\n        <Skeleton variant=\"text\" height={40} />\n      </Grid>\n    </Grid>\n  );\n}\n","// @mui\nimport { Stack, Skeleton, StackProps } from '@mui/material';\n\n// ----------------------------------------------------------------------\n\nexport default function SkeletonConversationItem({ sx, ...other }: StackProps) {\n  return (\n    <Stack\n      spacing={1}\n      direction=\"row\"\n      alignItems=\"center\"\n      sx={{ px: 3, py: 1.5, ...sx }}\n      {...other}\n    >\n      <Skeleton variant=\"circular\" width={48} height={48} />\n\n      <Stack spacing={0.5} sx={{ flexGrow: 1 }}>\n        <Skeleton variant=\"text\" sx={{ width: 0.5, height: 16 }} />\n        <Skeleton variant=\"text\" sx={{ width: 0.25, height: 12 }} />\n      </Stack>\n    </Stack>\n  );\n}\n","import { formatDistanceToNowStrict } from 'date-fns';\n// @mui\nimport {\n  Badge,\n  Stack,\n  Typography,\n  ListItemText,\n  ListItemButton,\n  ListItemAvatar,\n} from '@mui/material';\n// @types\nimport { IChatConversation } from '../../../../@types/chat';\n// components\nimport { CustomAvatar, CustomAvatarGroup } from '../../../../components/custom-avatar';\nimport BadgeStatus from '../../../../components/badge-status';\n\n// ----------------------------------------------------------------------\n\nconst CURRENT_USER_ID = '8864c717-587d-472a-929a-8e5f298024da-0';\n\ntype Props = {\n  conversation: IChatConversation;\n  openNav: boolean;\n  isSelected: boolean;\n  onSelect: VoidFunction;\n};\n\nexport default function ChatNavItem({ conversation, openNav, isSelected, onSelect }: Props) {\n  const details = getDetails(conversation, CURRENT_USER_ID);\n\n  const lastActivity = conversation.messages[conversation.messages.length - 1].createdAt;\n\n  const isGroup = details.otherParticipants.length > 1;\n\n  const isUnread = conversation.unreadCount > 0;\n\n  const hasOnlineInGroup =\n    isGroup && details.otherParticipants.map((item) => item.status).includes('online');\n\n  return (\n    <ListItemButton\n      disableGutters\n      onClick={onSelect}\n      sx={{\n        py: 1.5,\n        px: 2.5,\n        ...(isSelected && {\n          bgcolor: 'action.selected',\n        }),\n      }}\n    >\n      <ListItemAvatar>\n        {isGroup ? (\n          <Badge\n            overlap=\"circular\"\n            anchorOrigin={{ vertical: 'bottom', horizontal: 'right' }}\n            badgeContent={hasOnlineInGroup && <BadgeStatus status=\"online\" />}\n          >\n            <CustomAvatarGroup compact sx={{ width: 48, height: 48 }}>\n              {details.otherParticipants.slice(0, 2).map((participant) => (\n                <CustomAvatar\n                  key={participant.id}\n                  alt={participant.name}\n                  src={participant.avatar}\n                />\n              ))}\n            </CustomAvatarGroup>\n          </Badge>\n        ) : (\n          <CustomAvatar\n            key={details.otherParticipants[0].id}\n            alt={details.otherParticipants[0].name}\n            src={details.otherParticipants[0].avatar}\n            BadgeProps={{\n              badgeContent: <BadgeStatus status={details.otherParticipants[0].status} />,\n            }}\n            sx={{ width: 48, height: 48 }}\n          />\n        )}\n      </ListItemAvatar>\n\n      {openNav && (\n        <>\n          <ListItemText\n            primary={details.displayNames}\n            primaryTypographyProps={{ noWrap: true, variant: 'subtitle2' }}\n            secondary={details.displayText}\n            secondaryTypographyProps={{\n              noWrap: true,\n              variant: isUnread ? 'subtitle2' : 'body2',\n              color: isUnread ? 'text.primary' : 'text.secondary',\n            }}\n          />\n\n          <Stack alignItems=\"flex-end\" sx={{ ml: 2, height: 44 }}>\n            <Typography\n              noWrap\n              variant=\"body2\"\n              component=\"span\"\n              sx={{\n                mb: 1.5,\n                fontSize: 12,\n                color: 'text.disabled',\n              }}\n            >\n              {formatDistanceToNowStrict(new Date(lastActivity), {\n                addSuffix: false,\n              })}\n            </Typography>\n\n            {isUnread && <BadgeStatus status=\"unread\" size=\"small\" />}\n          </Stack>\n        </>\n      )}\n    </ListItemButton>\n  );\n}\n\n// ----------------------------------------------------------------------\n\nconst getDetails = (conversation: IChatConversation, currentUserId: string) => {\n  const otherParticipants = conversation.participants.filter(\n    (participant) => participant.id !== currentUserId\n  );\n\n  const displayNames = otherParticipants.map((participant) => participant.name).join(', ');\n\n  let displayText = '';\n\n  const lastMessage = conversation.messages[conversation.messages.length - 1];\n  if (lastMessage) {\n    const sender = lastMessage.senderId === currentUserId ? 'You: ' : '';\n\n    const message = lastMessage.contentType === 'image' ? 'Sent a photo' : lastMessage.body;\n\n    displayText = `${sender}${message}`;\n  }\n  return { otherParticipants, displayNames, displayText };\n};\n","import { useNavigate } from 'react-router-dom';\n// @mui\nimport { List, SxProps } from '@mui/material';\n// routes\nimport { PATH_DASHBOARD } from '../../../../routes/paths';\n// hooks\nimport useResponsive from '../../../../hooks/useResponsive';\n// @types\nimport { IChatConversationsState } from '../../../../@types/chat';\n// components\nimport { SkeletonConversationItem } from '../../../../components/skeleton';\n//\nimport ChatNavItem from './ChatNavItem';\n\n// ----------------------------------------------------------------------\n\nconst CURRENT_USER_ID = '8864c717-587d-472a-929a-8e5f298024da-0';\n\ntype Props = {\n  conversations: IChatConversationsState;\n  openNav: boolean;\n  onCloseNav: VoidFunction;\n  selected: (conversationId: string) => boolean;\n  sx?: SxProps;\n};\n\nexport default function ChatNavList({\n  conversations,\n  openNav,\n  onCloseNav,\n  selected,\n  sx,\n  ...other\n}: Props) {\n  const navigate = useNavigate();\n\n  const isDesktop = useResponsive('up', 'md');\n\n  const handleSelectConversation = (conversationId: string) => {\n    let conversationKey = '';\n\n    const conversation = conversations.byId[conversationId];\n\n    if (conversation.type === 'GROUP') {\n      conversationKey = conversation.id;\n    } else {\n      const otherParticipant = conversation.participants.find(\n        (participant) => participant.id !== CURRENT_USER_ID\n      );\n\n      if (otherParticipant?.username) {\n        conversationKey = otherParticipant?.username;\n      }\n    }\n\n    navigate(PATH_DASHBOARD.chat.view(conversationKey));\n  };\n\n  const loading = !conversations.allIds.length;\n\n  return (\n    <List disablePadding sx={sx} {...other}>\n      {(loading ? [...Array(12)] : conversations.allIds).map((conversationId, index) =>\n        conversationId ? (\n          <ChatNavItem\n            key={conversationId}\n            openNav={openNav}\n            conversation={conversations.byId[conversationId]}\n            isSelected={selected(conversationId)}\n            onSelect={() => {\n              if (!isDesktop) {\n                onCloseNav();\n              }\n              handleSelectConversation(conversationId);\n            }}\n          />\n        ) : (\n          <SkeletonConversationItem key={index} />\n        )\n      )}\n    </List>\n  );\n}\n","// @mui\nimport { InputAdornment, ClickAwayListener } from '@mui/material';\n// components\nimport Iconify from '../../../../components/iconify';\nimport { CustomTextField } from '../../../../components/custom-input';\n\n// ----------------------------------------------------------------------\n\ntype Props = {\n  value: string;\n  onChange: (event: React.ChangeEvent<HTMLInputElement>) => void;\n  onClickAway: VoidFunction;\n};\n\nexport default function ChatNavSearch({ value, onChange, onClickAway }: Props) {\n  return (\n    <ClickAwayListener onClickAway={onClickAway}>\n      <CustomTextField\n        fullWidth\n        size=\"small\"\n        value={value}\n        onChange={onChange}\n        placeholder=\"Search contacts...\"\n        InputProps={{\n          startAdornment: (\n            <InputAdornment position=\"start\">\n              <Iconify icon=\"eva:search-fill\" sx={{ color: 'text.disabled' }} />\n            </InputAdornment>\n          ),\n        }}\n        sx={{ mt: 2.5 }}\n      />\n    </ClickAwayListener>\n  );\n}\n","import { useState } from 'react';\n// @mui\nimport {\n  List,\n  Stack,\n  Select,\n  Divider,\n  Tooltip,\n  MenuItem,\n  Typography,\n  IconButton,\n} from '@mui/material';\n// auth\nimport { useAuthContext } from '../../../../auth/useAuthContext';\n// components\nimport Iconify from '../../../../components/iconify';\nimport { CustomAvatar } from '../../../../components/custom-avatar';\nimport MenuPopover from '../../../../components/menu-popover';\nimport BadgeStatus, { BadgeStatusValue } from '../../../../components/badge-status';\n\n// ----------------------------------------------------------------------\n\nconst STATUS = ['online', 'invisible', 'away'] as const;\n\nexport default function ChatNavAccount() {\n  const { user } = useAuthContext();\n\n  const [status, setStatus] = useState<BadgeStatusValue>('online');\n\n  const [openPopover, setOpenPopover] = useState<HTMLElement | null>(null);\n\n  const handleOpenPopover = (event: React.MouseEvent<HTMLElement>) => {\n    setOpenPopover(event.currentTarget);\n  };\n\n  const handleClosePopover = () => {\n    setOpenPopover(null);\n  };\n\n  return (\n    <>\n      <CustomAvatar\n        src={user?.photoURL}\n        alt={user?.displayName}\n        name={user?.displayName}\n        BadgeProps={{\n          badgeContent: <BadgeStatus status={status} />,\n        }}\n        onClick={handleOpenPopover}\n        sx={{ cursor: 'pointer', width: 48, height: 48 }}\n      />\n\n      <MenuPopover open={openPopover} onClose={handleClosePopover} arrow=\"top-left\" sx={{ p: 0 }}>\n        <Stack direction=\"row\" alignItems=\"center\" spacing={2} sx={{ py: 2, pr: 1, pl: 2.5 }}>\n          <div>\n            <Typography noWrap variant=\"subtitle2\">\n              {user?.displayName}\n            </Typography>\n\n            <Typography noWrap variant=\"body2\" sx={{ color: 'text.secondary' }}>\n              {user?.email}\n            </Typography>\n          </div>\n\n          <Tooltip title=\"Log out\">\n            <IconButton color=\"error\">\n              <Iconify icon=\"ic:round-power-settings-new\" />\n            </IconButton>\n          </Tooltip>\n        </Stack>\n\n        <Divider />\n\n        <List sx={{ px: 1 }}>\n          <MenuItem>\n            <BadgeStatus size=\"large\" status={status} sx={{ m: 0.5, flexShrink: 0 }} />\n\n            <Select\n              native\n              fullWidth\n              value={status}\n              onChange={(event) => setStatus(event.target.value)}\n              sx={{\n                '& .MuiInputBase-input': {\n                  p: 0,\n                  pl: 2,\n                  typography: 'body2',\n                  textTransform: 'capitalize',\n                },\n                '& .MuiNativeSelect-icon': {\n                  right: -16,\n                  top: 'unset',\n                },\n                '& .MuiOutlinedInput-notchedOutline': {\n                  display: 'none',\n                },\n              }}\n            >\n              {STATUS.map((option) => (\n                <option key={option} value={option}>\n                  {option}\n                </option>\n              ))}\n            </Select>\n          </MenuItem>\n\n          <MenuItem>\n            <Iconify icon=\"ic:round-account-box\" />\n            Profile\n          </MenuItem>\n\n          <MenuItem>\n            <Iconify icon=\"eva:settings-2-fill\" />\n            Settings\n          </MenuItem>\n        </List>\n      </MenuPopover>\n    </>\n  );\n}\n","// @mui\nimport { Avatar, Typography, ListItemButton } from '@mui/material';\n// @types\nimport { IChatContact } from '../../../../@types/chat';\n//\nimport SearchNotFound from '../../../../components/search-not-found';\n\n// ----------------------------------------------------------------------\n\ntype Props = {\n  searchContacts: string;\n  searchResults: IChatContact[];\n  onSelectContact: (contact: IChatContact) => void;\n};\n\nexport default function ChatNavSearchResults({\n  searchContacts,\n  searchResults,\n  onSelectContact,\n}: Props) {\n  const isNotFound = !searchResults.length && !!searchContacts;\n\n  return (\n    <>\n      <Typography\n        paragraph\n        variant=\"h6\"\n        sx={{\n          px: 2.5,\n        }}\n      >\n        Contacts\n      </Typography>\n\n      {isNotFound ? (\n        <SearchNotFound\n          query={searchContacts}\n          sx={{\n            p: 3,\n            mx: 'auto',\n            width: `calc(100% - 40px)`,\n            bgcolor: 'background.neutral',\n          }}\n        />\n      ) : (\n        <>\n          {searchResults.map((result) => (\n            <ListItemButton\n              key={result.id}\n              onClick={() => onSelectContact(result)}\n              sx={{\n                px: 2.5,\n                py: 1.5,\n                typography: 'subtitle2',\n              }}\n            >\n              <Avatar alt={result.name} src={result.avatar} sx={{ mr: 2 }} />\n              {result.name}\n            </ListItemButton>\n          ))}\n        </>\n      )}\n    </>\n  );\n}\n","import { useState, useEffect } from 'react';\nimport { Link as RouterLink, useNavigate } from 'react-router-dom';\n// @mui\nimport { useTheme, styled } from '@mui/material/styles';\nimport { Box, Stack, Drawer, IconButton, IconButtonProps } from '@mui/material';\n// hooks\nimport useResponsive from '../../../../hooks/useResponsive';\n// utils\nimport axios from '../../../../utils/axios';\n// routes\nimport { PATH_DASHBOARD } from '../../../../routes/paths';\n// @types\nimport { IChatContact, IChatConversationsState } from '../../../../@types/chat';\n// components\nimport Iconify from '../../../../components/iconify';\nimport Scrollbar from '../../../../components/scrollbar';\n//\nimport ChatNavList from './ChatNavList';\nimport ChatNavSearch from './ChatNavSearch';\nimport ChatNavAccount from './ChatNavAccount';\nimport ChatNavSearchResults from './ChatNavSearchResults';\n\n// ----------------------------------------------------------------------\n\nconst StyledToggleButton = styled((props) => (\n  <IconButton disableRipple {...props} />\n))<IconButtonProps>(({ theme }) => ({\n  left: 0,\n  zIndex: 9,\n  width: 32,\n  height: 32,\n  position: 'absolute',\n  top: theme.spacing(13),\n  borderRadius: `0 12px 12px 0`,\n  color: theme.palette.primary.contrastText,\n  backgroundColor: theme.palette.primary.main,\n  boxShadow: theme.customShadows.primary,\n  '&:hover': {\n    backgroundColor: theme.palette.primary.darker,\n  },\n}));\n\n// ----------------------------------------------------------------------\n\nconst NAV_WIDTH = 320;\n\nconst NAV_COLLAPSE_WIDTH = 96;\n\ntype Props = {\n  conversations: IChatConversationsState;\n  activeConversationId: string | null;\n};\n\nexport default function ChatNav({ conversations, activeConversationId }: Props) {\n  const theme = useTheme();\n\n  const navigate = useNavigate();\n\n  const isDesktop = useResponsive('up', 'md');\n\n  const [openNav, setOpenNav] = useState(false);\n\n  const [searchResults, setSearchResults] = useState([]);\n\n  const [searchContacts, setSearchContacts] = useState('');\n\n  const isCollapse = isDesktop && !openNav;\n\n  useEffect(() => {\n    if (!isDesktop) {\n      handleCloseNav();\n    } else {\n      handleOpenNav();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [isDesktop]);\n\n  const handleToggleNav = () => {\n    setOpenNav(!openNav);\n  };\n\n  const handleOpenNav = () => {\n    setOpenNav(true);\n  };\n\n  const handleCloseNav = () => {\n    setOpenNav(false);\n  };\n\n  const handleChangeSearch = async (event: React.ChangeEvent<HTMLInputElement>) => {\n    try {\n      const { value } = event.target;\n\n      setSearchContacts(value);\n\n      if (value) {\n        const response = await axios.get('/api/chat/search', {\n          params: { query: value },\n        });\n\n        setSearchResults(response.data.results);\n      } else {\n        setSearchResults([]);\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  const handleSelectContact = (result: IChatContact) => {\n    setSearchContacts('');\n    navigate(PATH_DASHBOARD.chat.view(result.username));\n  };\n\n  const renderContent = (\n    <>\n      <Box sx={{ p: 2.5 }}>\n        <Stack direction=\"row\" alignItems=\"center\" justifyContent=\"center\">\n          {!isCollapse && (\n            <>\n              <ChatNavAccount />\n              <Box sx={{ flexGrow: 1 }} />\n            </>\n          )}\n\n          <IconButton onClick={handleToggleNav}>\n            <Iconify icon={openNav ? 'eva:arrow-ios-back-fill' : 'eva:arrow-ios-forward-fill'} />\n          </IconButton>\n\n          {!isCollapse && (\n            <IconButton component={RouterLink} to={PATH_DASHBOARD.chat.new}>\n              <Iconify icon=\"eva:edit-fill\" />\n            </IconButton>\n          )}\n        </Stack>\n\n        {!isCollapse && (\n          <ChatNavSearch\n            value={searchContacts}\n            onChange={handleChangeSearch}\n            onClickAway={() => setSearchContacts('')}\n          />\n        )}\n      </Box>\n\n      <Scrollbar>\n        {!searchContacts ? (\n          <ChatNavList\n            openNav={openNav}\n            onCloseNav={handleCloseNav}\n            conversations={conversations}\n            selected={(conversationId: string) => activeConversationId === conversationId}\n          />\n        ) : (\n          <ChatNavSearchResults\n            searchContacts={searchContacts}\n            searchResults={searchResults}\n            onSelectContact={handleSelectContact}\n          />\n        )}\n      </Scrollbar>\n    </>\n  );\n\n  return (\n    <>\n      {!isDesktop && (\n        <StyledToggleButton onClick={handleToggleNav}>\n          <Iconify width={16} icon=\"eva:people-fill\" />\n        </StyledToggleButton>\n      )}\n\n      {isDesktop ? (\n        <Drawer\n          open={openNav}\n          variant=\"persistent\"\n          PaperProps={{\n            sx: {\n              pb: 1,\n              width: 1,\n              position: 'static',\n              ...(isCollapse && {\n                transform: 'none !important',\n                visibility: 'visible !important',\n              }),\n            },\n          }}\n          sx={{\n            width: NAV_WIDTH,\n            transition: theme.transitions.create('width'),\n            ...(isCollapse && {\n              width: NAV_COLLAPSE_WIDTH,\n            }),\n          }}\n        >\n          {renderContent}\n        </Drawer>\n      ) : (\n        <Drawer\n          open={openNav}\n          onClose={handleCloseNav}\n          ModalProps={{ keepMounted: true }}\n          PaperProps={{\n            sx: {\n              pb: 1,\n              width: NAV_WIDTH,\n            },\n          }}\n        >\n          {renderContent}\n        </Drawer>\n      )}\n    </>\n  );\n}\n","// @mui\nimport { Button, ButtonProps } from '@mui/material';\n// components\nimport Iconify from '../../../../components/iconify';\n\n// ----------------------------------------------------------------------\n\ninterface Props extends ButtonProps {\n  isCollapse: boolean;\n  onCollapse: VoidFunction;\n}\n\nexport default function ChatRoomCollapseButton({\n  isCollapse,\n  onCollapse,\n  children,\n  sx,\n  ...other\n}: Props) {\n  return (\n    <Button\n      fullWidth\n      color=\"inherit\"\n      onClick={onCollapse}\n      endIcon={\n        <Iconify\n          width={16}\n          icon={isCollapse ? 'eva:arrow-ios-downward-fill' : 'eva:arrow-ios-forward-fill'}\n        />\n      }\n      sx={{\n        height: 40,\n        flexShrink: 0,\n        borderRadius: 0,\n        typography: 'overline',\n        color: 'text.disabled',\n        justifyContent: 'space-between',\n        p: (theme) => theme.spacing(1, 1.5, 1, 2.5),\n        ...sx,\n      }}\n      {...other}\n    >\n      {children}\n    </Button>\n  );\n}\n","import uniq from 'lodash/uniq';\nimport flatten from 'lodash/flatten';\n// @mui\nimport { Box, Typography, Stack } from '@mui/material';\n// utils\nimport { fDateTime } from '../../../../utils/formatTime';\n// @types\nimport { IChatConversation, IChatAttachment } from '../../../../@types/chat';\n// components\nimport Scrollbar from '../../../../components/scrollbar';\nimport FileThumbnail from '../../../../components/file-thumbnail';\n//\nimport ChatRoomCollapseButton from './ChatRoomCollapseButton';\n\n// ----------------------------------------------------------------------\n\ntype Props = {\n  conversation: IChatConversation;\n  isCollapse: boolean;\n  onCollapse: VoidFunction;\n};\n\nexport default function ChatRoomAttachments({ conversation, isCollapse, onCollapse }: Props) {\n  const totalAttachments = uniq(flatten(conversation.messages.map((item) => item.attachments)));\n\n  return (\n    <Stack\n      flexGrow={1}\n      sx={{\n        pb: 2,\n        height: 1,\n        overflow: 'hidden',\n        borderTop: (theme) => `solid 1px ${theme.palette.divider}`,\n      }}\n    >\n      <ChatRoomCollapseButton\n        isCollapse={isCollapse && !!totalAttachments.length}\n        onCollapse={onCollapse}\n        disabled={!totalAttachments.length}\n        sx={{\n          ...(!isCollapse && {\n            borderBottom: (theme) => `solid 1px ${theme.palette.divider}`,\n          }),\n        }}\n      >\n        Attachments ({totalAttachments.length})\n      </ChatRoomCollapseButton>\n\n      <Box\n        sx={{\n          overflow: 'hidden',\n          height: isCollapse ? 1 : 0,\n          transition: (theme) =>\n            theme.transitions.create('height', {\n              duration: theme.transitions.duration.shorter,\n            }),\n        }}\n      >\n        <Scrollbar>\n          {totalAttachments.map((attachment, index) => (\n            <AttachmentItem key={attachment.name + index} attachment={attachment} />\n          ))}\n        </Scrollbar>\n      </Box>\n    </Stack>\n  );\n}\n\n// ----------------------------------------------------------------------\n\ntype AttachmentItemProps = {\n  attachment: IChatAttachment;\n};\n\nfunction AttachmentItem({ attachment }: AttachmentItemProps) {\n  return (\n    <Stack direction=\"row\" alignItems=\"center\" sx={{ mt: 2, px: 2.5 }}>\n      <Stack\n        alignItems=\"center\"\n        justifyContent=\"center\"\n        sx={{\n          width: 40,\n          height: 40,\n          flexShrink: 0,\n          borderRadius: 1,\n          overflow: 'hidden',\n          position: 'relative',\n          backgroundColor: 'background.neutral',\n        }}\n      >\n        <FileThumbnail\n          imageView\n          file={attachment.preview}\n          onDownload={() => console.log('DOWNLOAD')}\n          sx={{ width: 28, height: 28 }}\n        />\n      </Stack>\n\n      <Stack flexGrow={1} sx={{ ml: 1.5, minWidth: 0 }}>\n        <Typography variant=\"body2\" noWrap>\n          {attachment.name}\n        </Typography>\n\n        <Typography noWrap variant=\"caption\" sx={{ color: 'text.secondary', display: 'block' }}>\n          {fDateTime(attachment.dateCreated)}\n        </Typography>\n      </Stack>\n    </Stack>\n  );\n}\n","// @mui\nimport { Avatar, Divider, Collapse, Typography, Stack } from '@mui/material';\n// @types\nimport { IChatParticipant } from '../../../../@types/chat';\n// components\nimport Iconify from '../../../../components/iconify';\n//\nimport ChatRoomCollapseButton from './ChatRoomCollapseButton';\n\n// ----------------------------------------------------------------------\n\ntype Props = {\n  participant: IChatParticipant;\n  isCollapse: boolean;\n  onCollapse: VoidFunction;\n};\n\nexport default function ChatRoomSingle({ participant, isCollapse, onCollapse }: Props) {\n  if (!participant) {\n    return null;\n  }\n\n  return (\n    <div>\n      <Stack alignItems=\"center\" sx={{ py: 4 }}>\n        <Avatar\n          alt={participant.name}\n          src={participant.avatar}\n          sx={{ width: 96, height: 96, mb: 2 }}\n        />\n\n        <Typography variant=\"subtitle1\">{participant.name}</Typography>\n\n        <Typography variant=\"body2\" sx={{ color: 'text.secondary', mt: 0.5 }}>\n          {participant.role}\n        </Typography>\n      </Stack>\n\n      <Divider />\n\n      <ChatRoomCollapseButton isCollapse={isCollapse} onCollapse={onCollapse}>\n        information\n      </ChatRoomCollapseButton>\n\n      <Collapse in={isCollapse}>\n        <Stack\n          spacing={2}\n          sx={{\n            p: (theme) => theme.spacing(2, 2.5, 2.5, 2.5),\n          }}\n        >\n          {[\n            { icon: 'eva:pin-fill', value: participant.address },\n            { icon: 'eva:phone-fill', value: participant.phone },\n            { icon: 'eva:email-fill', value: participant.email },\n          ].map((row, index) => (\n            <Stack key={row.icon} direction=\"row\">\n              <Iconify\n                icon={row.icon}\n                sx={{\n                  mr: 1,\n                  mt: 0.5,\n                  flexShrink: 0,\n                  color: 'text.disabled',\n                }}\n              />\n              <Typography variant=\"body2\" noWrap={index === 2}>\n                {row.value}\n              </Typography>\n            </Stack>\n          ))}\n        </Stack>\n      </Collapse>\n    </div>\n  );\n}\n","// @mui\nimport { Typography, Dialog, DialogContent, Stack, IconButton } from '@mui/material';\n// @types\nimport { IChatParticipant } from '../../../../@types/chat';\n// components\nimport { CustomAvatar } from '../../../../components/custom-avatar';\nimport Iconify from '../../../../components/iconify';\n\n// ----------------------------------------------------------------------\n\ntype Props = {\n  participant: IChatParticipant;\n  open: boolean;\n  onClose: VoidFunction;\n};\n\nexport default function ChatRoomParticipantInfoDialog({ participant, open, onClose }: Props) {\n  const { name, avatar, role, address } = participant;\n\n  return (\n    <Dialog fullWidth maxWidth=\"xs\" open={open} onClose={onClose}>\n      <IconButton onClick={onClose} sx={{ position: 'absolute', right: 8, top: 8 }}>\n        <Iconify icon=\"eva:close-fill\" />\n      </IconButton>\n\n      <DialogContent sx={{ p: 5 }}>\n        <Stack direction=\"row\" spacing={3}>\n          <CustomAvatar alt={name} src={avatar} name={name} sx={{ width: 96, height: 96 }} />\n\n          <Stack spacing={1}>\n            <Typography variant=\"caption\" sx={{ color: 'primary.main' }}>\n              {role}\n            </Typography>\n\n            <Typography variant=\"h6\">{name}</Typography>\n\n            <Stack direction=\"row\" sx={{ typography: 'caption', color: 'text.secondary' }}>\n              <Iconify icon=\"eva:pin-fill\" width={16} sx={{ flexShrink: 0, mr: 0.5 }} />\n              {address}\n            </Stack>\n\n            <Stack direction=\"row\" sx={{ pt: 1 }}>\n              <IconButton color=\"info\">\n                <Iconify icon=\"eva:message-square-fill\" />\n              </IconButton>\n\n              <IconButton color=\"warning\">\n                <Iconify icon=\"eva:email-fill\" />\n              </IconButton>\n\n              <IconButton color=\"success\">\n                <Iconify icon=\"eva:phone-fill\" />\n              </IconButton>\n\n              <IconButton color=\"error\">\n                <Iconify icon=\"eva:video-fill\" />\n              </IconButton>\n            </Stack>\n          </Stack>\n        </Stack>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","// @mui\nimport { Box, ListItemText, ListItemAvatar, ListItemButton } from '@mui/material';\n// @types\nimport { IChatParticipant } from '../../../../@types/chat';\n// components\nimport { CustomAvatar } from '../../../../components/custom-avatar';\nimport Scrollbar from '../../../../components/scrollbar';\nimport BadgeStatus from '../../../../components/badge-status';\n//\nimport ChatRoomParticipantInfoDialog from './ChatRoomParticipantInfoDialog';\nimport ChatRoomCollapseButton from './ChatRoomCollapseButton';\n\n// ----------------------------------------------------------------------\n\nconst HEIGHT = 60;\n\ntype Props = {\n  participants: IChatParticipant[];\n  selectUserId: string | null;\n  onOpenUserInfo: (id: string | null) => void;\n  isCollapse: boolean;\n  onCollapse: VoidFunction;\n};\n\nexport default function ChatRoomGroup({\n  participants,\n  selectUserId,\n  onOpenUserInfo,\n  isCollapse,\n  onCollapse,\n}: Props) {\n  return (\n    <>\n      <ChatRoomCollapseButton isCollapse={isCollapse} onCollapse={onCollapse}>\n        In room ({participants.length})\n      </ChatRoomCollapseButton>\n\n      <Box\n        sx={{\n          height: isCollapse ? HEIGHT * 4 : 0,\n          transition: (theme) =>\n            theme.transitions.create('height', {\n              duration: theme.transitions.duration.shorter,\n            }),\n        }}\n      >\n        <Scrollbar>\n          {participants.map((participant) => (\n            <Participant\n              key={participant.id}\n              participant={participant}\n              open={selectUserId === participant.id}\n              onOpen={() => onOpenUserInfo(participant.id)}\n              onClose={() => onOpenUserInfo(null)}\n            />\n          ))}\n        </Scrollbar>\n      </Box>\n    </>\n  );\n}\n\n// ----------------------------------------------------------------------\n\ntype ParticipantProps = {\n  participant: IChatParticipant;\n  open: boolean;\n  onClose: VoidFunction;\n  onOpen: VoidFunction;\n};\n\nfunction Participant({ participant, open, onClose, onOpen }: ParticipantProps) {\n  const { name, avatar, status, role } = participant;\n\n  return (\n    <>\n      <ListItemButton onClick={onOpen} sx={{ height: HEIGHT, px: 2.5 }}>\n        <ListItemAvatar>\n          <CustomAvatar\n            alt={name}\n            src={avatar}\n            BadgeProps={{\n              badgeContent: <BadgeStatus status={status} />,\n            }}\n          />\n        </ListItemAvatar>\n\n        <ListItemText\n          primary={name}\n          secondary={role}\n          primaryTypographyProps={{ noWrap: true, variant: 'subtitle2' }}\n          secondaryTypographyProps={{ noWrap: true }}\n        />\n      </ListItemButton>\n\n      <ChatRoomParticipantInfoDialog participant={participant} open={open} onClose={onClose} />\n    </>\n  );\n}\n","import { useState, useEffect } from 'react';\n// @mui\nimport { useTheme, styled } from '@mui/material/styles';\nimport { Box, Drawer, IconButton, IconButtonProps } from '@mui/material';\n// hooks\nimport useResponsive from '../../../../hooks/useResponsive';\n// @types\nimport { IChatConversation, IChatParticipant } from '../../../../@types/chat';\n// components\nimport Iconify from '../../../../components/iconify';\n//\nimport ChatRoomAttachments from './ChatRoomAttachments';\nimport ChatRoomSingle from './ChatRoomSingle';\nimport ChatRoomGroup from './ChatRoomGroup';\n\n// ----------------------------------------------------------------------\n\nconst StyledToggleButton = styled((props) => (\n  <IconButton disableRipple {...props} />\n))<IconButtonProps>(({ theme }) => ({\n  right: 0,\n  zIndex: 9,\n  width: 32,\n  height: 32,\n  position: 'absolute',\n  top: theme.spacing(1),\n  boxShadow: theme.customShadows.z8,\n  backgroundColor: theme.palette.background.paper,\n  border: `solid 1px ${theme.palette.divider}`,\n  borderRight: 0,\n  borderRadius: `12px 0 0 12px`,\n  transition: theme.transitions.create('all'),\n  '&:hover': {\n    backgroundColor: theme.palette.background.neutral,\n  },\n}));\n\n// ----------------------------------------------------------------------\n\nconst NAV_WIDTH = 240;\n\ntype Props = {\n  conversation: IChatConversation;\n  participants: IChatParticipant[];\n};\n\nexport default function ChatRoom({ conversation, participants }: Props) {\n  const theme = useTheme();\n\n  const isDesktop = useResponsive('up', 'lg');\n\n  const [openNav, setOpenNav] = useState(true);\n\n  const [openInfo, setOpenInfo] = useState(true);\n\n  const [openAttachments, setOpenAttachments] = useState(true);\n\n  const [openParticipants, setOpenParticipants] = useState(true);\n\n  const [selectUser, setSelectUser] = useState<string | null>(null);\n\n  const onOpenNav = () => {\n    setOpenNav(true);\n  };\n\n  const onCloseNav = () => {\n    setOpenNav(false);\n  };\n\n  const isGroup = participants.length > 1;\n\n  useEffect(() => {\n    if (!isDesktop) {\n      onCloseNav();\n    } else {\n      onOpenNav();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [isDesktop]);\n\n  const renderContent = (\n    <>\n      {isGroup ? (\n        <ChatRoomGroup\n          selectUserId={selectUser}\n          participants={participants}\n          isCollapse={openParticipants}\n          onCollapse={() => setOpenParticipants(!openParticipants)}\n          onOpenUserInfo={(participantId) => setSelectUser(participantId)}\n        />\n      ) : (\n        <ChatRoomSingle\n          participant={participants[0]}\n          isCollapse={openInfo}\n          onCollapse={() => setOpenInfo(!openInfo)}\n        />\n      )}\n\n      <ChatRoomAttachments\n        conversation={conversation}\n        isCollapse={openAttachments}\n        onCollapse={() => setOpenAttachments(!openAttachments)}\n      />\n    </>\n  );\n\n  return (\n    <Box sx={{ position: 'relative' }}>\n      <StyledToggleButton\n        onClick={() => setOpenNav(!openNav)}\n        sx={{\n          ...(openNav &&\n            isDesktop && {\n              right: NAV_WIDTH,\n            }),\n        }}\n      >\n        <Iconify\n          width={16}\n          icon={openNav ? 'eva:arrow-ios-forward-fill' : 'eva:arrow-ios-back-fill'}\n        />\n      </StyledToggleButton>\n\n      {isDesktop ? (\n        <Drawer\n          open={openNav}\n          anchor=\"right\"\n          variant=\"persistent\"\n          PaperProps={{\n            sx: {\n              width: 1,\n              position: 'static',\n            },\n          }}\n          sx={{\n            height: 1,\n            width: NAV_WIDTH,\n            transition: theme.transitions.create('width'),\n            ...(!openNav && {\n              width: 0,\n            }),\n          }}\n        >\n          {renderContent}\n        </Drawer>\n      ) : (\n        <Drawer\n          anchor=\"right\"\n          open={openNav}\n          onClose={onCloseNav}\n          ModalProps={{ keepMounted: true }}\n          PaperProps={{\n            sx: {\n              width: NAV_WIDTH,\n            },\n          }}\n        >\n          {renderContent}\n        </Drawer>\n      )}\n    </Box>\n  );\n}\n","import { useRef, useState } from 'react';\n// @mui\nimport { Stack, InputBase, InputBaseProps, IconButton, InputAdornment } from '@mui/material';\n// utils\nimport uuidv4 from '../../../../utils/uuidv4';\n// @types\nimport { IChatSendMessage } from '../../../../@types/chat';\n// components\nimport Iconify from '../../../../components/iconify';\n\n// ----------------------------------------------------------------------\n\nconst CURRENT_USER_ID = '8864c717-587d-472a-929a-8e5f298024da-0';\n\ninterface Props extends InputBaseProps {\n  conversationId: string | null;\n  onSend: (data: IChatSendMessage) => void;\n}\n\nexport default function ChatMessageInput({\n  disabled,\n  conversationId,\n  onSend,\n  sx,\n  ...other\n}: Props) {\n  const fileInputRef = useRef<HTMLInputElement>(null);\n\n  const [message, setMessage] = useState('');\n\n  const handleClickAttach = () => {\n    fileInputRef.current?.click();\n  };\n\n  const handleSend = (event: React.KeyboardEvent<HTMLInputElement>) => {\n    if (event.key === 'Enter') {\n      if (onSend && message && conversationId) {\n        onSend({\n          conversationId,\n          messageId: uuidv4(),\n          message,\n          contentType: 'text',\n          attachments: [],\n          createdAt: new Date(),\n          senderId: CURRENT_USER_ID,\n        });\n      }\n      setMessage('');\n    }\n  };\n\n  return (\n    <>\n      <InputBase\n        value={message}\n        onKeyUp={handleSend}\n        onChange={(event) => setMessage(event.target.value)}\n        placeholder=\"Type a message\"\n        startAdornment={\n          <InputAdornment position=\"start\">\n            <IconButton size=\"small\">\n              <Iconify icon=\"eva:smiling-face-fill\" />\n            </IconButton>\n          </InputAdornment>\n        }\n        endAdornment={\n          <Stack direction=\"row\" spacing={1} sx={{ flexShrink: 0, mr: 1.5 }}>\n            <IconButton disabled={disabled} size=\"small\" onClick={handleClickAttach}>\n              <Iconify icon=\"ic:round-add-photo-alternate\" />\n            </IconButton>\n\n            <IconButton disabled={disabled} size=\"small\" onClick={handleClickAttach}>\n              <Iconify icon=\"eva:attach-2-fill\" />\n            </IconButton>\n\n            <IconButton disabled={disabled} size=\"small\">\n              <Iconify icon=\"eva:mic-fill\" />\n            </IconButton>\n          </Stack>\n        }\n        sx={{\n          pl: 1,\n          height: 56,\n          flexShrink: 0,\n          borderTop: (theme) => `solid 1px ${theme.palette.divider}`,\n          ...sx,\n        }}\n        {...other}\n      />\n\n      <input type=\"file\" ref={fileInputRef} style={{ display: 'none' }} />\n    </>\n  );\n}\n","import { formatDistanceToNowStrict } from 'date-fns';\n// @mui\nimport { Avatar, Typography, Stack } from '@mui/material';\n// @types\nimport { IChatConversation, IChatMessage } from '../../../../@types/chat';\n// components\nimport Image from '../../../../components/image';\n\n// ----------------------------------------------------------------------\n\nconst CURRENT_USER_ID = '8864c717-587d-472a-929a-8e5f298024da-0';\n\ntype Props = {\n  message: IChatMessage;\n  conversation: IChatConversation;\n  onOpenLightbox: (value: string) => void;\n};\n\nexport default function ChatMessageItem({ message, conversation, onOpenLightbox }: Props) {\n  const sender = conversation.participants.find(\n    (participant) => participant.id === message.senderId\n  );\n\n  const senderDetails =\n    message.senderId === CURRENT_USER_ID\n      ? {\n          type: 'me',\n        }\n      : {\n          avatar: sender?.avatar,\n          name: sender?.name,\n        };\n\n  const currentUser = senderDetails.type === 'me';\n\n  const isImage = message.contentType === 'image';\n\n  const firstName = senderDetails.name && senderDetails.name.split(' ')[0];\n\n  return (\n    <Stack direction=\"row\" justifyContent={currentUser ? 'flex-end' : 'unset'} sx={{ mb: 3 }}>\n      {!currentUser && (\n        <Avatar\n          alt={senderDetails.name}\n          src={senderDetails.avatar}\n          sx={{ width: 32, height: 32, mr: 2 }}\n        />\n      )}\n\n      <Stack spacing={1} alignItems=\"flex-end\">\n        <Typography\n          noWrap\n          variant=\"caption\"\n          sx={{\n            color: 'text.disabled',\n            ...(!currentUser && {\n              mr: 'auto',\n            }),\n          }}\n        >\n          {!currentUser && `${firstName},`} &nbsp;\n          {formatDistanceToNowStrict(new Date(message.createdAt), {\n            addSuffix: true,\n          })}\n        </Typography>\n\n        <Stack\n          sx={{\n            p: 1.5,\n            minWidth: 48,\n            maxWidth: 320,\n            borderRadius: 1,\n            overflow: 'hidden',\n            typography: 'body2',\n            bgcolor: 'background.neutral',\n            ...(currentUser && {\n              color: 'grey.800',\n              bgcolor: 'primary.lighter',\n            }),\n            ...(isImage && {\n              p: 0,\n            }),\n          }}\n        >\n          {isImage ? (\n            <Image\n              alt=\"attachment\"\n              src={message.body}\n              onClick={() => onOpenLightbox(message.body)}\n              sx={{\n                cursor: 'pointer',\n                '&:hover': {\n                  opacity: 0.9,\n                },\n              }}\n            />\n          ) : (\n            message.body\n          )}\n        </Stack>\n      </Stack>\n    </Stack>\n  );\n}\n","import { useEffect, useState, useRef } from 'react';\n// @types\nimport { IChatConversation } from '../../../../@types/chat';\n//\nimport Scrollbar from '../../../../components/scrollbar';\nimport Lightbox from '../../../../components/lightbox';\n//\nimport ChatMessageItem from './ChatMessageItem';\n\n// ----------------------------------------------------------------------\n\ntype Props = {\n  conversation: IChatConversation;\n};\n\nexport default function ChatMessageList({ conversation }: Props) {\n  const scrollRef = useRef<HTMLDivElement>(null);\n\n  const [selectedImage, setSelectedImage] = useState<number>(-1);\n\n  useEffect(() => {\n    const scrollMessagesToBottom = () => {\n      if (scrollRef.current) {\n        scrollRef.current.scrollTop = scrollRef.current.scrollHeight;\n      }\n    };\n    scrollMessagesToBottom();\n  }, [conversation.messages]);\n\n  const imagesLightbox = conversation.messages\n    .filter((messages) => messages.contentType === 'image')\n    .map((messages) => ({ src: messages.body }));\n\n  const handleOpenLightbox = (imageUrl: string) => {\n    const imageIndex = imagesLightbox.findIndex((image) => image.src === imageUrl);\n    setSelectedImage(imageIndex);\n  };\n\n  const handleCloseLightbox = () => {\n    setSelectedImage(-1);\n  };\n\n  return (\n    <>\n      <Scrollbar\n        scrollableNodeProps={{\n          ref: scrollRef,\n        }}\n        sx={{ p: 3, height: 1 }}\n      >\n        {conversation.messages.map((message) => (\n          <ChatMessageItem\n            key={message.id}\n            message={message}\n            conversation={conversation}\n            onOpenLightbox={() => handleOpenLightbox(message.body)}\n          />\n        ))}\n      </Scrollbar>\n\n      <Lightbox\n        index={selectedImage}\n        slides={imagesLightbox}\n        open={selectedImage >= 0}\n        close={handleCloseLightbox}\n      />\n    </>\n  );\n}\n","// @mui\nimport { Stack, Box, Link, Typography, IconButton } from '@mui/material';\n// utils\nimport { fToNow } from '../../../../utils/formatTime';\n// @types\nimport { IChatParticipant } from '../../../../@types/chat';\n// components\nimport Iconify from '../../../../components/iconify';\nimport BadgeStatus from '../../../../components/badge-status';\nimport { CustomAvatar, CustomAvatarGroup } from '../../../../components/custom-avatar';\n\n// ----------------------------------------------------------------------\n\ntype Props = {\n  participants: IChatParticipant[];\n};\n\nexport default function ChatHeaderDetail({ participants }: Props) {\n  const isGroup = participants.length > 1;\n\n  const participantInfo = participants.length ? participants[0] : null;\n\n  return (\n    <Stack\n      direction=\"row\"\n      alignItems=\"center\"\n      sx={{\n        p: (theme) => theme.spacing(2, 1, 2, 2),\n      }}\n    >\n      {isGroup ? (\n        <Stack flexGrow={1}>\n          <CustomAvatarGroup max={3}>\n            {participants.map((participant) => (\n              <CustomAvatar key={participant.id} alt={participant.name} src={participant.avatar} />\n            ))}\n          </CustomAvatarGroup>\n\n          <Link\n            variant=\"body2\"\n            sx={{\n              mt: 0.5,\n              alignItems: 'center',\n              display: 'inline-flex',\n              color: 'text.secondary',\n            }}\n          >\n            {participants.length} persons\n            <Iconify icon=\"eva:arrow-ios-forward-fill\" width={16} />\n          </Link>\n        </Stack>\n      ) : (\n        <Stack flexGrow={1} direction=\"row\" alignItems=\"center\" spacing={2}>\n          <CustomAvatar\n            src={participantInfo?.avatar}\n            alt={participantInfo?.name}\n            BadgeProps={{\n              badgeContent: <BadgeStatus status={participantInfo?.status} />,\n            }}\n          />\n\n          <div>\n            <Typography variant=\"subtitle2\">{participantInfo?.name}</Typography>\n\n            <Typography variant=\"body2\" sx={{ color: 'text.secondary' }}>\n              {participantInfo?.status === 'offline' ? (\n                participantInfo?.lastActivity && fToNow(participantInfo?.lastActivity)\n              ) : (\n                <Box component=\"span\" sx={{ textTransform: 'capitalize' }}>\n                  {participantInfo?.status}\n                </Box>\n              )}\n            </Typography>\n          </div>\n        </Stack>\n      )}\n\n      <IconButton>\n        <Iconify icon=\"eva:phone-fill\" />\n      </IconButton>\n\n      <IconButton>\n        <Iconify icon=\"eva:video-fill\" />\n      </IconButton>\n\n      <IconButton>\n        <Iconify icon=\"eva:more-vertical-fill\" />\n      </IconButton>\n    </Stack>\n  );\n}\n","import { useState } from 'react';\nimport parse from 'autosuggest-highlight/parse';\nimport match from 'autosuggest-highlight/match';\n// @mui\nimport { alpha } from '@mui/material/styles';\nimport {\n  Box,\n  Chip,\n  Stack,\n  Avatar,\n  TextField,\n  Typography,\n  StackProps,\n  Autocomplete,\n} from '@mui/material';\n// @types\nimport { IChatParticipant } from '../../../../@types/chat';\n// components\nimport Iconify from '../../../../components/iconify';\nimport SearchNotFound from '../../../../components/search-not-found';\n\n// ----------------------------------------------------------------------\n\ninterface Props extends StackProps {\n  contacts: IChatParticipant[];\n  recipients: IChatParticipant[];\n  onAddRecipients: (data: IChatParticipant[]) => void;\n}\n\nexport default function ChatHeaderCompose({\n  contacts,\n  recipients,\n  onAddRecipients,\n  sx,\n  ...other\n}: Props) {\n  const [searchRecipients, setSearchRecipients] = useState('');\n\n  const handleAddRecipients = (selectedRecipients: IChatParticipant[]) => {\n    setSearchRecipients('');\n    onAddRecipients(selectedRecipients);\n  };\n\n  return (\n    <Stack\n      spacing={1}\n      direction=\"row\"\n      alignItems=\"center\"\n      sx={{\n        py: 2,\n        px: 2.5,\n        ...sx,\n      }}\n      {...other}\n    >\n      <Typography variant=\"subtitle2\" sx={{ color: 'text.secondary' }}>\n        To:\n      </Typography>\n\n      <Autocomplete\n        sx={{ minWidth: 240 }}\n        multiple\n        popupIcon={null}\n        noOptionsText={<SearchNotFound query={searchRecipients} />}\n        onChange={(event, value) => handleAddRecipients(value)}\n        onInputChange={(event, value) => setSearchRecipients(value)}\n        options={contacts}\n        getOptionLabel={(recipient) => recipient.name}\n        renderInput={(params) => (\n          <TextField\n            {...params}\n            size=\"small\"\n            placeholder={recipients.length ? '+Recipients' : ''}\n          />\n        )}\n        renderOption={(props, recipient, { inputValue, selected }) => {\n          const { name, avatar } = recipient;\n          const matches = match(name, inputValue);\n          const parts = parse(name, matches);\n\n          return (\n            <Box\n              component=\"li\"\n              sx={{\n                p: '12px !important',\n              }}\n              {...props}\n            >\n              <Box\n                sx={{\n                  mr: 1.5,\n                  width: 32,\n                  height: 32,\n                  overflow: 'hidden',\n                  borderRadius: '50%',\n                  position: 'relative',\n                }}\n              >\n                <Avatar alt={name} src={avatar} />\n                <Box\n                  sx={{\n                    top: 0,\n                    opacity: 0,\n                    width: '100%',\n                    height: '100%',\n                    display: 'flex',\n                    position: 'absolute',\n                    alignItems: 'center',\n                    justifyContent: 'center',\n                    bgcolor: (theme) => alpha(theme.palette.grey[900], 0.8),\n                    transition: (theme) =>\n                      theme.transitions.create('opacity', {\n                        easing: theme.transitions.easing.easeInOut,\n                        duration: theme.transitions.duration.shorter,\n                      }),\n                    ...(selected && {\n                      opacity: 1,\n                      color: 'primary.main',\n                    }),\n                  }}\n                >\n                  <Iconify icon=\"eva:checkmark-fill\" />\n                </Box>\n              </Box>\n\n              {parts.map((part, index) => (\n                <Typography\n                  key={index}\n                  variant=\"subtitle2\"\n                  color={part.highlight ? 'primary' : 'textPrimary'}\n                >\n                  {part.text}\n                </Typography>\n              ))}\n            </Box>\n          );\n        }}\n        renderTags={(selectedRecipients, getTagProps) =>\n          selectedRecipients.map((recipient, index) => (\n            <Chip\n              {...getTagProps({ index })}\n              key={recipient.id}\n              size=\"small\"\n              label={recipient.name}\n              avatar={<Avatar alt={recipient.name} src={recipient.avatar} />}\n            />\n          ))\n        }\n      />\n    </Stack>\n  );\n}\n","import { useEffect } from 'react';\nimport { useLocation, useNavigate, useParams } from 'react-router-dom';\n// @mui\nimport { Card, Container, Stack } from '@mui/material';\n// redux\nimport { useDispatch, useSelector } from '../../../redux/store';\nimport {\n  getContacts,\n  getConversation,\n  getParticipants,\n  getConversations,\n  addRecipients,\n  sendMessage,\n  markConversationAsRead,\n  resetActiveConversation,\n} from '../../../redux/slices/chat';\n// routes\nimport { PATH_DASHBOARD } from '../../../routes/paths';\n// components\nimport { useSettingsContext } from '../../../components/settings';\nimport CustomBreadcrumbs from '../../../components/custom-breadcrumbs';\n// @types\nimport { IChatParticipant, IChatSendMessage } from '../../../@types/chat';\n// sections\nimport ChatNav from './nav/ChatNav';\nimport ChatRoom from './room/ChatRoom';\nimport ChatMessageInput from './message/ChatMessageInput';\nimport ChatMessageList from './message/ChatMessageList';\nimport ChatHeaderDetail from './header/ChatHeaderDetail';\nimport ChatHeaderCompose from './header/ChatHeaderCompose';\n\n// ----------------------------------------------------------------------\n\nconst CURRENT_USER_ID = '8864c717-587d-472a-929a-8e5f298024da-0';\n\nexport default function Chat() {\n  const { themeStretch } = useSettingsContext();\n\n  const dispatch = useDispatch();\n\n  const navigate = useNavigate();\n\n  const { pathname } = useLocation();\n\n  const { conversationKey = '' } = useParams();\n\n  const { contacts, recipients, participants, activeConversationId, conversations } = useSelector(\n    (state) => state.chat\n  );\n\n  const selectedConversation = useSelector(() => {\n    if (activeConversationId) {\n      return conversations.byId[activeConversationId];\n    }\n\n    return {\n      id: '',\n      messages: [],\n      participants: [],\n      unreadCount: 0,\n      type: '',\n    };\n  });\n\n  const detailView = !!conversationKey;\n\n  const displayParticipants = participants.filter((item) => item.id !== CURRENT_USER_ID);\n\n  useEffect(() => {\n    dispatch(getConversations());\n    dispatch(getContacts());\n  }, [dispatch]);\n\n  useEffect(() => {\n    const getDetails = async () => {\n      dispatch(getParticipants(`${conversationKey}`));\n      try {\n        await dispatch(getConversation(`${conversationKey}`));\n      } catch (error) {\n        console.error(error);\n        navigate(PATH_DASHBOARD.chat.new);\n      }\n    };\n\n    if (conversationKey) {\n      getDetails();\n    } else if (activeConversationId) {\n      dispatch(resetActiveConversation());\n    }\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [conversationKey]);\n\n  useEffect(() => {\n    if (activeConversationId) {\n      dispatch(markConversationAsRead(activeConversationId));\n    }\n  }, [dispatch, activeConversationId]);\n\n  const handleAddRecipients = (selectedRecipients: IChatParticipant[]) => {\n    dispatch(addRecipients(selectedRecipients));\n  };\n\n  const handleSendMessage = async (value: IChatSendMessage) => {\n    try {\n      dispatch(sendMessage(value));\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  return (\n    <Container maxWidth={themeStretch ? false : 'xl'}>\n      <CustomBreadcrumbs\n        heading=\"Chat\"\n        links={[\n          {\n            name: 'Dashboard',\n            href: PATH_DASHBOARD.root,\n          },\n          { name: 'Chat' },\n        ]}\n      />\n\n      <Card sx={{ height: '72vh', display: 'flex' }}>\n        <ChatNav conversations={conversations} activeConversationId={activeConversationId} />\n\n        <Stack flexGrow={1}>\n          {detailView ? (\n            <ChatHeaderDetail participants={displayParticipants} />\n          ) : (\n            <ChatHeaderCompose\n              recipients={recipients}\n              contacts={Object.values(contacts.byId)}\n              onAddRecipients={handleAddRecipients}\n            />\n          )}\n\n          <Stack\n            direction=\"row\"\n            flexGrow={1}\n            sx={{\n              overflow: 'hidden',\n              borderTop: (theme) => `solid 1px ${theme.palette.divider}`,\n            }}\n          >\n            <Stack flexGrow={1}>\n              <ChatMessageList conversation={selectedConversation} />\n\n              <ChatMessageInput\n                conversationId={activeConversationId}\n                onSend={handleSendMessage}\n                disabled={\n                  pathname === PATH_DASHBOARD.chat.root || pathname === PATH_DASHBOARD.chat.new\n                }\n              />\n            </Stack>\n\n            {detailView && (\n              <ChatRoom conversation={selectedConversation} participants={displayParticipants} />\n            )}\n          </Stack>\n        </Stack>\n      </Card>\n    </Container>\n  );\n}\n","import { Helmet } from 'react-helmet-async';\n// sections\nimport { Chat } from '../../sections/@dashboard/chat';\n\n// ----------------------------------------------------------------------\n\nexport default function ChatPage() {\n  return (\n    <>\n      <Helmet>\n        <title> Chat | Laicos</title>\n      </Helmet>\n\n      <Chat />\n    </>\n  );\n}\n","/* eslint-disable */\n// ----------------------------------------------------------------------\n\nexport default function uuidv4() {\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n    const r = (Math.random() * 16) | 0,\n      v = c === 'x' ? r : (r & 0x3) | 0x8;\n    return v.toString(16);\n  });\n}\n"],"names":["StyledBadgeStatus","styled","theme","ownerState","status","size","width","height","display","borderRadius","alignItems","justifyContent","content","backgroundColor","palette","common","white","warning","main","transform","error","success","text","disabled","info","BadgeStatus","sx","useTheme","BreadcrumbsLink","link","activeLast","name","href","icon","styles","color","cursor","pointerEvents","renderContent","Box","component","mr","Link","RouterLink","to","CustomBreadcrumbs","links","action","heading","moreLink","other","lastLink","length","mb","Stack","direction","flexGrow","Typography","variant","gutterBottom","Breadcrumbs","separator","Separator","map","flexShrink","mt","noWrap","target","rel","bgcolor","SkeletonPostItem","Grid","item","xs","sm","md","mx","SkeletonPostDetails","ml","SkeletonProductItem","Card","paddingTop","spacing","p","SkeletonMailNavItem","px","py","SkeletonKanbanColumn","gap","gridTemplateColumns","Array","_","index","Paper","SkeletonProductDetails","container","lg","SkeletonConversationItem","ChatNavItem","conversation","openNav","isSelected","onSelect","details","getDetails","lastActivity","messages","createdAt","isGroup","otherParticipants","isUnread","unreadCount","hasOnlineInGroup","includes","ListItemButton","disableGutters","onClick","ListItemAvatar","Badge","overlap","anchorOrigin","vertical","horizontal","badgeContent","compact","slice","participant","alt","src","avatar","id","BadgeProps","ListItemText","primary","displayNames","primaryTypographyProps","secondary","displayText","secondaryTypographyProps","fontSize","formatDistanceToNowStrict","Date","addSuffix","currentUserId","participants","filter","join","lastMessage","sender","senderId","message","contentType","body","ChatNavList","conversations","onCloseNav","selected","navigate","useNavigate","isDesktop","useResponsive","loading","allIds","List","disablePadding","conversationId","byId","conversationKey","type","otherParticipant","find","username","PATH_DASHBOARD","handleSelectConversation","ChatNavSearch","value","onChange","onClickAway","ClickAwayListener","fullWidth","placeholder","InputProps","startAdornment","InputAdornment","position","STATUS","ChatNavAccount","user","useAuthContext","useState","setStatus","openPopover","setOpenPopover","photoURL","displayName","event","currentTarget","open","onClose","arrow","pr","pl","email","Tooltip","title","IconButton","Divider","MenuItem","m","Select","native","typography","textTransform","right","top","option","ChatNavSearchResults","searchContacts","searchResults","onSelectContact","isNotFound","paragraph","query","result","Avatar","StyledToggleButton","props","disableRipple","left","zIndex","contrastText","boxShadow","customShadows","darker","ChatNav","activeConversationId","setOpenNav","setSearchResults","setSearchContacts","isCollapse","useEffect","handleOpenNav","handleCloseNav","handleToggleNav","handleChangeSearch","axios","params","response","data","results","console","Drawer","PaperProps","pb","visibility","transition","transitions","create","ModalProps","keepMounted","ChatRoomCollapseButton","onCollapse","children","Button","endIcon","ChatRoomAttachments","totalAttachments","uniq","flatten","attachments","overflow","borderTop","divider","borderBottom","duration","shorter","attachment","AttachmentItem","imageView","file","preview","onDownload","log","minWidth","fDateTime","dateCreated","ChatRoomSingle","role","Collapse","in","address","phone","row","ChatRoomParticipantInfoDialog","Dialog","maxWidth","DialogContent","pt","ChatRoomGroup","selectUserId","onOpenUserInfo","HEIGHT","Participant","onOpen","z8","background","paper","border","borderRight","neutral","ChatRoom","openInfo","setOpenInfo","openAttachments","setOpenAttachments","openParticipants","setOpenParticipants","selectUser","setSelectUser","participantId","anchor","ChatMessageInput","onSend","fileInputRef","useRef","setMessage","handleClickAttach","current","click","InputBase","onKeyUp","key","messageId","uuidv4","endAdornment","ref","style","ChatMessageItem","onOpenLightbox","senderDetails","currentUser","isImage","firstName","split","opacity","ChatMessageList","scrollRef","selectedImage","setSelectedImage","scrollTop","scrollHeight","imagesLightbox","scrollableNodeProps","imageUrl","imageIndex","findIndex","image","handleOpenLightbox","slides","close","ChatHeaderDetail","participantInfo","max","fToNow","ChatHeaderCompose","contacts","recipients","onAddRecipients","searchRecipients","setSearchRecipients","Autocomplete","multiple","popupIcon","noOptionsText","selectedRecipients","onInputChange","options","getOptionLabel","recipient","renderInput","TextField","renderOption","inputValue","matches","match","parts","parse","alpha","grey","easing","easeInOut","part","highlight","renderTags","getTagProps","Chip","label","Chat","themeStretch","useSettingsContext","dispatch","useDispatch","pathname","useLocation","useParams","useSelector","state","chat","selectedConversation","detailView","displayParticipants","getConversations","getContacts","getParticipants","getConversation","resetActiveConversation","markConversationAsRead","handleSendMessage","sendMessage","Container","Object","values","addRecipients","ChatPage","replace","c","r","Math","random","toString"],"sourceRoot":""}