{"version":3,"file":"static/js/9858.01af3763.chunk.js","mappings":"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","sources":["../node_modules/viem/errors/ccip.ts","../node_modules/viem/utils/address/isAddressEqual.ts","../node_modules/viem/utils/ccip.ts"],"sourcesContent":["import type { Address } from 'abitype'\n\nimport type { Hex } from '../types/misc.js'\nimport { stringify } from '../utils/stringify.js'\n\nimport { BaseError } from './base.js'\nimport { getUrl } from './utils.js'\n\nexport type OffchainLookupErrorType = OffchainLookupError & {\n  name: 'OffchainLookupError'\n}\nexport class OffchainLookupError extends BaseError {\n  constructor({\n    callbackSelector,\n    cause,\n    data,\n    extraData,\n    sender,\n    urls,\n  }: {\n    callbackSelector: Hex\n    cause: BaseError\n    data: Hex\n    extraData: Hex\n    sender: Address\n    urls: readonly string[]\n  }) {\n    super(\n      cause.shortMessage ||\n        'An error occurred while fetching for an offchain result.',\n      {\n        cause,\n        metaMessages: [\n          ...(cause.metaMessages || []),\n          cause.metaMessages?.length ? '' : [],\n          'Offchain Gateway Call:',\n          urls && [\n            '  Gateway URL(s):',\n            ...urls.map((url) => `    ${getUrl(url)}`),\n          ],\n          `  Sender: ${sender}`,\n          `  Data: ${data}`,\n          `  Callback selector: ${callbackSelector}`,\n          `  Extra data: ${extraData}`,\n        ].flat(),\n        name: 'OffchainLookupError',\n      },\n    )\n  }\n}\n\nexport type OffchainLookupResponseMalformedErrorType =\n  OffchainLookupResponseMalformedError & {\n    name: 'OffchainLookupResponseMalformedError'\n  }\nexport class OffchainLookupResponseMalformedError extends BaseError {\n  constructor({ result, url }: { result: any; url: string }) {\n    super(\n      'Offchain gateway response is malformed. Response data must be a hex value.',\n      {\n        metaMessages: [\n          `Gateway URL: ${getUrl(url)}`,\n          `Response: ${stringify(result)}`,\n        ],\n        name: 'OffchainLookupResponseMalformedError',\n      },\n    )\n  }\n}\n\n/** @internal */\nexport type OffchainLookupSenderMismatchErrorType =\n  OffchainLookupSenderMismatchError & {\n    name: 'OffchainLookupSenderMismatchError'\n  }\nexport class OffchainLookupSenderMismatchError extends BaseError {\n  constructor({ sender, to }: { sender: Address; to: Address }) {\n    super(\n      'Reverted sender address does not match target contract address (`to`).',\n      {\n        metaMessages: [\n          `Contract address: ${to}`,\n          `OffchainLookup sender address: ${sender}`,\n        ],\n        name: 'OffchainLookupSenderMismatchError',\n      },\n    )\n  }\n}\n","import type { Address } from 'abitype'\n\nimport {\n  InvalidAddressError,\n  type InvalidAddressErrorType,\n} from '../../errors/address.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport { isAddress } from './isAddress.js'\n\nexport type IsAddressEqualReturnType = boolean\nexport type IsAddressEqualErrorType = InvalidAddressErrorType | ErrorType\n\nexport function isAddressEqual(a: Address, b: Address) {\n  if (!isAddress(a, { strict: false }))\n    throw new InvalidAddressError({ address: a })\n  if (!isAddress(b, { strict: false }))\n    throw new InvalidAddressError({ address: b })\n  return a.toLowerCase() === b.toLowerCase()\n}\n","import type { Abi, Address } from 'abitype'\n\nimport { type CallParameters, call } from '../actions/public/call.js'\nimport type { Transport } from '../clients/transports/createTransport.js'\nimport type { BaseError } from '../errors/base.js'\nimport {\n  OffchainLookupError,\n  type OffchainLookupErrorType as OffchainLookupErrorType_,\n  OffchainLookupResponseMalformedError,\n  type OffchainLookupResponseMalformedErrorType,\n  OffchainLookupSenderMismatchError,\n} from '../errors/ccip.js'\nimport {\n  HttpRequestError,\n  type HttpRequestErrorType,\n} from '../errors/request.js'\nimport type { Chain } from '../types/chain.js'\nimport type { Hex } from '../types/misc.js'\n\nimport type { Client } from '../clients/createClient.js'\nimport type { ErrorType } from '../errors/utils.js'\nimport { decodeErrorResult } from './abi/decodeErrorResult.js'\nimport { encodeAbiParameters } from './abi/encodeAbiParameters.js'\nimport { isAddressEqual } from './address/isAddressEqual.js'\nimport { concat } from './data/concat.js'\nimport { isHex } from './data/isHex.js'\nimport { stringify } from './stringify.js'\n\nexport const offchainLookupSignature = '0x556f1830'\nexport const offchainLookupAbiItem = {\n  name: 'OffchainLookup',\n  type: 'error',\n  inputs: [\n    {\n      name: 'sender',\n      type: 'address',\n    },\n    {\n      name: 'urls',\n      type: 'string[]',\n    },\n    {\n      name: 'callData',\n      type: 'bytes',\n    },\n    {\n      name: 'callbackFunction',\n      type: 'bytes4',\n    },\n    {\n      name: 'extraData',\n      type: 'bytes',\n    },\n  ],\n} as const satisfies Abi[number]\n\nexport type OffchainLookupErrorType = OffchainLookupErrorType_ | ErrorType\n\nexport async function offchainLookup<chain extends Chain | undefined>(\n  client: Client<Transport, chain>,\n  {\n    blockNumber,\n    blockTag,\n    data,\n    to,\n  }: Pick<CallParameters, 'blockNumber' | 'blockTag'> & {\n    data: Hex\n    to: Address\n  },\n): Promise<Hex> {\n  const { args } = decodeErrorResult({\n    data,\n    abi: [offchainLookupAbiItem],\n  })\n  const [sender, urls, callData, callbackSelector, extraData] = args\n\n  const { ccipRead } = client\n  const ccipRequest_ =\n    ccipRead && typeof ccipRead?.request === 'function'\n      ? ccipRead.request\n      : ccipRequest\n\n  try {\n    if (!isAddressEqual(to, sender))\n      throw new OffchainLookupSenderMismatchError({ sender, to })\n\n    const result = await ccipRequest_({ data: callData, sender, urls })\n\n    const { data: data_ } = await call(client, {\n      blockNumber,\n      blockTag,\n      data: concat([\n        callbackSelector,\n        encodeAbiParameters(\n          [{ type: 'bytes' }, { type: 'bytes' }],\n          [result, extraData],\n        ),\n      ]),\n      to,\n    } as CallParameters)\n\n    return data_!\n  } catch (err) {\n    throw new OffchainLookupError({\n      callbackSelector,\n      cause: err as BaseError,\n      data,\n      extraData,\n      sender,\n      urls,\n    })\n  }\n}\n\nexport type CcipRequestParameters = {\n  data: Hex\n  sender: Address\n  urls: readonly string[]\n}\n\nexport type CcipRequestReturnType = Hex\n\nexport type CcipRequestErrorType =\n  | HttpRequestErrorType\n  | OffchainLookupResponseMalformedErrorType\n  | ErrorType\n\nexport async function ccipRequest({\n  data,\n  sender,\n  urls,\n}: CcipRequestParameters): Promise<CcipRequestReturnType> {\n  let error = new Error('An unknown error occurred.')\n\n  for (let i = 0; i < urls.length; i++) {\n    const url = urls[i]\n    const method = url.includes('{data}') ? 'GET' : 'POST'\n    const body = method === 'POST' ? { data, sender } : undefined\n\n    try {\n      const response = await fetch(\n        url.replace('{sender}', sender).replace('{data}', data),\n        {\n          body: JSON.stringify(body),\n          method,\n        },\n      )\n\n      let result: any\n      if (\n        response.headers.get('Content-Type')?.startsWith('application/json')\n      ) {\n        result = (await response.json()).data\n      } else {\n        result = (await response.text()) as any\n      }\n\n      if (!response.ok) {\n        error = new HttpRequestError({\n          body,\n          details: result?.error\n            ? stringify(result.error)\n            : response.statusText,\n          headers: response.headers,\n          status: response.status,\n          url,\n        })\n        continue\n      }\n\n      if (!isHex(result)) {\n        error = new OffchainLookupResponseMalformedError({\n          result,\n          url,\n        })\n        continue\n      }\n\n      return result\n    } catch (err) {\n      error = new HttpRequestError({\n        body,\n        details: (err as Error).message,\n        url,\n      })\n    }\n  }\n\n  throw error\n}\n"],"names":["OffchainLookupError","callbackSelector","cause","data","extraData","sender","urls","shortMessage","metaMessages","length","map","url","getUrl","flat","name","BaseError","OffchainLookupResponseMalformedError","result","stringify","OffchainLookupSenderMismatchError","to","isAddressEqual","a","b","isAddress","strict","InvalidAddressError","address","toLowerCase","offchainLookupSignature","offchainLookupAbiItem","type","inputs","offchainLookup","client","blockNumber","blockTag","decodeErrorResult","abi","args","callData","ccipRead","ccipRequest_","request","ccipRequest","call","concat","encodeAbiParameters","data_","error","Error","i","method","includes","body","undefined","fetch","replace","JSON","response","headers","get","startsWith","json","text","ok","HttpRequestError","details","statusText","status","isHex","message"],"sourceRoot":""}